///////////////////////////////////////////////////////////////////////////////////////////////
// checkstyle: Checks Java source code and other text files for adherence to a set of rules.
// Copyright (C) 2001-2023 the original author or authors.
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 2.1 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
///////////////////////////////////////////////////////////////////////////////////////////////
package com.puppycrawl.tools.checkstyle.api;

import java.io.Serializable;
import java.text.MessageFormat;
import java.util.Arrays;
import java.util.Locale;
import java.util.Objects;
import com.puppycrawl.tools.checkstyle.LocalizedMessage;

/**
 * Represents a violation that can be localised. The translations come from
 * message.properties files. The underlying implementation uses
 * java.text.MessageFormat.
 *
 * @noinspection SerializableHasSerializationMethods, ClassWithTooManyConstructors
 * @noinspectionreason SerializableHasSerializationMethods - we do not serialize this class
 * @noinspectionreason ClassWithTooManyConstructors - immutable nature of class requires a
 *      bunch of constructors
 */
@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.common.value.ValueChecker")
public final class Violation implements Comparable<Violation>, Serializable {

    /**
     * A unique serial version identifier.
     */
    private static final  @org.checkerframework.common.value.qual.IntVal({ 5675176836184862150L }) long serialVersionUID = 5675176836184862150L;

    /**
     * The default severity level if one is not specified.
     */
    private static final @org.checkerframework.common.value.qual.StringVal({ "ERROR" }) SeverityLevel DEFAULT_SEVERITY = SeverityLevel.ERROR;

    /**
     * The line number. *
     */
    private final   int lineNo;

    /**
     * The column number. *
     */
    private final   int columnNo;

    /**
     * The column char index. *
     */
    private final   int columnCharIndex;

    /**
     * The token type constant. See {@link TokenTypes}. *
     */
    private final   int tokenType;

    /**
     * The severity level. *
     */
    private final  SeverityLevel severityLevel;

    /**
     * The id of the module generating the violation.
     */
    private final  String moduleId;

    /**
     * Key for the violation format. *
     */
    private final  String key;

    /**
     * Arguments for MessageFormat.
     *
     * @noinspection NonSerializableFieldInSerializableClass
     * @noinspectionreason NonSerializableFieldInSerializableClass - usage of
     *      'Serializable' for this api class
     *      is considered as mistake now, but we do not break api without
     *      good reason
     */
    private final  Object @org.checkerframework.common.value.qual.ArrayLenRange(from = 0, to = 2147483647) [] args;

    /**
     * Name of the resource bundle to get violations from. *
     */
    private final  String bundle;

    /**
     * Class of the source for this Violation.
     */
    private final  Class<?> sourceClass;

    /**
     * A custom violation overriding the default violation from the bundle.
     */
    private final  String customMessage;

    /**
     * Creates a new {@code Violation} instance.
     *
     * @param lineNo line number associated with the violation
     * @param columnNo column number associated with the violation
     * @param columnCharIndex column char index associated with the violation
     * @param tokenType token type of the event associated with violation. See {@link TokenTypes}
     * @param bundle resource bundle name
     * @param key the key to locate the translation
     * @param args arguments for the translation
     * @param severityLevel severity level for the violation
     * @param moduleId the id of the module the violation is associated with
     * @param sourceClass the Class that is the source of the violation
     * @param customMessage optional custom violation overriding the default
     * @noinspection ConstructorWithTooManyParameters
     * @noinspectionreason ConstructorWithTooManyParameters - immutable class requires a large
     *      number of arguments
     */
    // -@cs[ParameterNumber] Class is immutable, we need that amount of arguments.
    public Violation(  int lineNo,   int columnNo,   int columnCharIndex,   int tokenType,  String bundle,  String key,  Object  [] args,  SeverityLevel severityLevel,  String moduleId,  Class<?> sourceClass,  String customMessage) {
        this.lineNo = lineNo;
        this.columnNo = columnNo;
        this.columnCharIndex = columnCharIndex;
        this.tokenType = tokenType;
        this.key = key;
        if (args == null) {
            this.args = null;
        } else {
            this.args = Arrays.copyOf(args, args.length);
        }
        this.bundle = bundle;
        this.severityLevel = severityLevel;
        this.moduleId = moduleId;
        this.sourceClass = sourceClass;
        this.customMessage = customMessage;
    }

    /**
     * Creates a new {@code Violation} instance.
     *
     * @param lineNo line number associated with the violation
     * @param columnNo column number associated with the violation
     * @param tokenType token type of the event associated with violation. See {@link TokenTypes}
     * @param bundle resource bundle name
     * @param key the key to locate the translation
     * @param args arguments for the translation
     * @param severityLevel severity level for the violation
     * @param moduleId the id of the module the violation is associated with
     * @param sourceClass the Class that is the source of the violation
     * @param customMessage optional custom violation overriding the default
     * @noinspection ConstructorWithTooManyParameters
     * @noinspectionreason ConstructorWithTooManyParameters - immutable class requires a large
     *      number of arguments
     */
    // -@cs[ParameterNumber] Class is immutable, we need that amount of arguments.
    public Violation(  int lineNo,   int columnNo,  @org.checkerframework.common.value.qual.IntVal({ 0L }) int tokenType,  String bundle,  String key,  Object  [] args,  SeverityLevel severityLevel,  String moduleId,  Class<?> sourceClass,  String customMessage) {
        this(lineNo, columnNo, columnNo, tokenType, bundle, key, args, severityLevel, moduleId, sourceClass, customMessage);
    }

    /**
     * Creates a new {@code Violation} instance.
     *
     * @param lineNo line number associated with the violation
     * @param columnNo column number associated with the violation
     * @param bundle resource bundle name
     * @param key the key to locate the translation
     * @param args arguments for the translation
     * @param severityLevel severity level for the violation
     * @param moduleId the id of the module the violation is associated with
     * @param sourceClass the Class that is the source of the violation
     * @param customMessage optional custom violation overriding the default
     * @noinspection ConstructorWithTooManyParameters
     * @noinspectionreason ConstructorWithTooManyParameters - immutable class requires a large
     *      number of arguments
     */
    // -@cs[ParameterNumber] Class is immutable, we need that amount of arguments.
    public Violation(  int lineNo,   int columnNo,  String bundle,  String key,  Object  [] args,  SeverityLevel severityLevel,  String moduleId,  Class<?> sourceClass,  String customMessage) {
        this(lineNo, columnNo, 0, bundle, key, args, severityLevel, moduleId, sourceClass, customMessage);
    }

    /**
     * Creates a new {@code Violation} instance.
     *
     * @param lineNo line number associated with the violation
     * @param columnNo column number associated with the violation
     * @param bundle resource bundle name
     * @param key the key to locate the translation
     * @param args arguments for the translation
     * @param moduleId the id of the module the violation is associated with
     * @param sourceClass the Class that is the source of the violation
     * @param customMessage optional custom violation overriding the default
     * @noinspection ConstructorWithTooManyParameters
     * @noinspectionreason ConstructorWithTooManyParameters - immutable class requires a large
     *      number of arguments
     */
    // -@cs[ParameterNumber] Class is immutable, we need that amount of arguments.
    public Violation(int lineNo, int columnNo, String bundle, String key, Object[] args, String moduleId, Class<?> sourceClass, String customMessage) {
        this(lineNo, columnNo, bundle, key, args, DEFAULT_SEVERITY, moduleId, sourceClass, customMessage);
    }

    /**
     * Creates a new {@code Violation} instance.
     *
     * @param lineNo line number associated with the violation
     * @param bundle resource bundle name
     * @param key the key to locate the translation
     * @param args arguments for the translation
     * @param severityLevel severity level for the violation
     * @param moduleId the id of the module the violation is associated with
     * @param sourceClass the source class for the violation
     * @param customMessage optional custom violation overriding the default
     * @noinspection ConstructorWithTooManyParameters
     * @noinspectionreason ConstructorWithTooManyParameters - immutable class requires a large
     *      number of arguments
     */
    // -@cs[ParameterNumber] Class is immutable, we need that amount of arguments.
    public Violation(  int lineNo, @org.checkerframework.common.value.qual.ArrayLenRange(from = 8, to = 2147483647) String bundle, @org.checkerframework.common.value.qual.ArrayLenRange(from = 1, to = 2147483647) String key,  Object  [] args,  SeverityLevel severityLevel,  String moduleId,  Class<?> sourceClass,  String customMessage) {
        this(lineNo, 0, bundle, key, args, severityLevel, moduleId, sourceClass, customMessage);
    }

    /**
     * Creates a new {@code Violation} instance. The column number
     * defaults to 0.
     *
     * @param lineNo line number associated with the violation
     * @param bundle name of a resource bundle that contains audit event violations
     * @param key the key to locate the translation
     * @param args arguments for the translation
     * @param moduleId the id of the module the violation is associated with
     * @param sourceClass the name of the source for the violation
     * @param customMessage optional custom violation overriding the default
     */
    public Violation( @org.checkerframework.common.value.qual.IntVal({ 0L, 1L }) int lineNo, @org.checkerframework.common.value.qual.StringVal({ "com.puppycrawl.tools.checkstyle.messages" }) String bundle, @org.checkerframework.common.value.qual.StringVal({ "general.exception", "general.fileNotFound" }) String key,  Object @org.checkerframework.common.value.qual.ArrayLen({ 1 }) [] args,  String moduleId,  Class<?> sourceClass, String customMessage) {
        this(lineNo, 0, bundle, key, args, DEFAULT_SEVERITY, moduleId, sourceClass, customMessage);
    }

    /**
     * Gets the line number.
     *
     * @return the line number
     */
    @org.checkerframework.dataflow.qual.Pure
    public   int getLineNo( Violation this) {
        return lineNo;
    }

    /**
     * Gets the column number.
     *
     * @return the column number
     */
    @org.checkerframework.dataflow.qual.Pure
    public   int getColumnNo( Violation this) {
        return columnNo;
    }

    /**
     * Gets the column char index.
     *
     * @return the column char index
     */
    @org.checkerframework.dataflow.qual.Pure
    public   int getColumnCharIndex( Violation this) {
        return columnCharIndex;
    }

    /**
     * Gets the token type.
     *
     * @return the token type
     */
    @org.checkerframework.dataflow.qual.Pure
    public   int getTokenType( Violation this) {
        return tokenType;
    }

    /**
     * Gets the severity level.
     *
     * @return the severity level
     */
    @org.checkerframework.dataflow.qual.Pure
    public  SeverityLevel getSeverityLevel( Violation this) {
        return severityLevel;
    }

    /**
     * Returns id of module.
     *
     * @return the module identifier.
     */
    @org.checkerframework.dataflow.qual.Pure
    public  String getModuleId( Violation this) {
        return moduleId;
    }

    /**
     * Returns the violation key to locate the translation, can also be used
     * in IDE plugins to map audit event violations to corrective actions.
     *
     * @return the violation key
     */
    @org.checkerframework.dataflow.qual.Pure
    public  String getKey( Violation this) {
        return key;
    }

    /**
     * Gets the name of the source for this Violation.
     *
     * @return the name of the source for this Violation
     */
    @org.checkerframework.dataflow.qual.Pure
    public  String getSourceName( Violation this) {
        return sourceClass.getName();
    }

    /**
     * Indicates whether some other object is "equal to" this one.
     * Suppression on enumeration is needed so code stays consistent.
     *
     * @noinspection EqualsCalledOnEnumConstant
     * @noinspectionreason EqualsCalledOnEnumConstant - enumeration is needed to keep
     *      code consistent
     */
    // -@cs[CyclomaticComplexity] equals - a lot of fields to check.
    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.common.value.qual.BoolVal({ false, true }) boolean equals( Violation this,  Object object) {
        if (this == object) {
            return true;
        }
        if (object == null || getClass() != object.getClass()) {
            return false;
        }
        final Violation violation = (Violation) object;
        return Objects.equals(lineNo, violation.lineNo) && Objects.equals(columnNo, violation.columnNo) && Objects.equals(columnCharIndex, violation.columnCharIndex) && Objects.equals(tokenType, violation.tokenType) && Objects.equals(severityLevel, violation.severityLevel) && Objects.equals(moduleId, violation.moduleId) && Objects.equals(key, violation.key) && Objects.equals(bundle, violation.bundle) && Objects.equals(sourceClass, violation.sourceClass) && Objects.equals(customMessage, violation.customMessage) && Arrays.equals(args, violation.args);
    }

    @org.checkerframework.dataflow.qual.Pure
    public   int hashCode( Violation this) {
        return Objects.hash(lineNo, columnNo, columnCharIndex, tokenType, severityLevel, moduleId, key, bundle, sourceClass, customMessage, Arrays.hashCode(args));
    }

    ////////////////////////////////////////////////////////////////////////////
    // Interface Comparable methods
    ////////////////////////////////////////////////////////////////////////////
    public   int compareTo( Violation this,  Violation other) {
        final int result;
        if (lineNo == other.lineNo) {
            if (columnNo == other.columnNo) {
                if (Objects.equals(moduleId, other.moduleId)) {
                    result = getViolation().compareTo(other.getViolation());
                } else if (moduleId == null) {
                    result = -1;
                } else if (other.moduleId == null) {
                    result = 1;
                } else {
                    result = moduleId.compareTo(other.moduleId);
                }
            } else {
                result = Integer.compare(columnNo, other.columnNo);
            }
        } else {
            result = Integer.compare(lineNo, other.lineNo);
        }
        return result;
    }

    /**
     * Gets the translated violation.
     *
     * @return the translated violation
     */
    public  String getViolation( Violation this) {
        final String violation;
        if (customMessage != null) {
            violation = new MessageFormat(customMessage, Locale.ROOT).format(args);
        } else {
            violation = new LocalizedMessage(bundle, sourceClass, key, args).getMessage();
        }
        return violation;
    }
}
