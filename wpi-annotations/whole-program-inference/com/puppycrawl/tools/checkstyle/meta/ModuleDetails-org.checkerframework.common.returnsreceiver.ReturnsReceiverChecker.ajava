///////////////////////////////////////////////////////////////////////////////////////////////
// checkstyle: Checks Java source code and other text files for adherence to a set of rules.
// Copyright (C) 2001-2023 the original author or authors.
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 2.1 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
///////////////////////////////////////////////////////////////////////////////////////////////
package com.puppycrawl.tools.checkstyle.meta;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

/**
 * Simple POJO class for module details.
 */
@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.common.returnsreceiver.ReturnsReceiverChecker")
public final class ModuleDetails {

    /**
     * List of properties of the module.
     */
    private final  List<ModulePropertyDetails> properties = new ArrayList<>();

    /**
     * List of violation message keys of the module.
     */
    private final  List<String> violationMessageKeys = new ArrayList<>();

    /**
     * Name of the module.
     */
    private  String name;

    /**
     * Fully qualified name of the module.
     */
    private  String fullQualifiedName;

    /**
     * Parent module.
     */
    private  String parent;

    /**
     * Description of the module.
     */
    private  String description;

    /**
     * Type of the module(check/filter/filefilter).
     */
    private  ModuleType moduleType;

    /**
     * Get name of module.
     *
     * @return name of module
     */
    @org.checkerframework.dataflow.qual.Pure
    public  String getName( ModuleDetails this) {
        return name;
    }

    /**
     * Set name of module.
     *
     * @param name module name
     */
    public void setName( ModuleDetails this,  String name) {
        this.name = name;
    }

    /**
     * Get fully qualified name of module.
     *
     * @return fully qualified name of module
     */
    @org.checkerframework.dataflow.qual.Pure
    public  String getFullQualifiedName( ModuleDetails this) {
        return fullQualifiedName;
    }

    /**
     * Set fully qualified name of module.
     *
     * @param fullQualifiedName fully qualified name of module
     */
    public void setFullQualifiedName( ModuleDetails this,  String fullQualifiedName) {
        this.fullQualifiedName = fullQualifiedName;
    }

    /**
     * Get parent of module.
     *
     * @return parent of module
     */
    @org.checkerframework.dataflow.qual.Pure
    public  String getParent( ModuleDetails this) {
        return parent;
    }

    /**
     * Set parent of module.
     *
     * @param parent parent of module
     */
    public void setParent( ModuleDetails this,  String parent) {
        this.parent = parent;
    }

    /**
     * Get description of module.
     *
     * @return description of module
     */
    @org.checkerframework.dataflow.qual.Pure
    public  String getDescription( ModuleDetails this) {
        return description;
    }

    /**
     * Set description of module.
     *
     * @param description description of module
     */
    public void setDescription( ModuleDetails this,  String description) {
        this.description = description;
    }

    /**
     * Get property list of module.
     *
     * @return property list of module
     */
    public  List<ModulePropertyDetails> getProperties( ModuleDetails this) {
        return Collections.unmodifiableList(properties);
    }

    /**
     * Add a single module property to the module's property list and map both.
     *
     * @param property module property
     */
    public void addToProperties( ModuleDetails this,  ModulePropertyDetails property) {
        properties.add(property);
    }

    /**
     * Add a list of properties to the module's property list and map both.
     *
     * @param modulePropertyDetailsList list of module property
     */
    public void addToProperties( ModuleDetails this,  List<ModulePropertyDetails> modulePropertyDetailsList) {
        properties.addAll(modulePropertyDetailsList);
    }

    /**
     * Get violation message keys of the module.
     *
     * @return violation message keys of module
     */
    public  List<String> getViolationMessageKeys( ModuleDetails this) {
        return Collections.unmodifiableList(violationMessageKeys);
    }

    /**
     * Add a key to the violation message key list of the module.
     *
     * @param msg violation message key
     */
    public void addToViolationMessages( ModuleDetails this,  String msg) {
        violationMessageKeys.add(msg);
    }

    /**
     * Add a list of keys to the violation message key list of the module.
     *
     * @param msgList a list of violation message keys
     */
    public void addToViolationMessages( ModuleDetails this,  List<String> msgList) {
        violationMessageKeys.addAll(msgList);
    }

    /**
     * Get module type.
     *
     * @return module type
     */
    @org.checkerframework.dataflow.qual.Pure
    public  ModuleType getModuleType( ModuleDetails this) {
        return moduleType;
    }

    /**
     * Set type of module.
     *
     * @param moduleType type of module
     */
    public void setModuleType( ModuleDetails this,  ModuleType moduleType) {
        this.moduleType = moduleType;
    }
}
