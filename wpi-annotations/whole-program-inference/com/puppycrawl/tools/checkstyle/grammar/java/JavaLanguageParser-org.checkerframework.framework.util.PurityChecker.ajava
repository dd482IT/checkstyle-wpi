// Generated from java-escape by ANTLR 4.11.1
package com.puppycrawl.tools.checkstyle.grammar.java;

import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.misc.*;
import org.antlr.v4.runtime.tree.*;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.framework.util.PurityChecker")
public class JavaLanguageParser extends Parser {

    static {
        RuntimeMetaData.checkVersion("4.11.1", RuntimeMetaData.VERSION);
    }

    protected static final DFA[] _decisionToDFA;

    protected static final PredictionContextCache _sharedContextCache = new PredictionContextCache();

    public static final int COMPILATION_UNIT = 1, PLACEHOLDER1 = 2, NULL_TREE_LOOKAHEAD = 3, BLOCK = 4, MODIFIERS = 5, OBJBLOCK = 6, SLIST = 7, CTOR_DEF = 8, METHOD_DEF = 9, VARIABLE_DEF = 10, INSTANCE_INIT = 11, STATIC_INIT = 12, TYPE = 13, CLASS_DEF = 14, INTERFACE_DEF = 15, PACKAGE_DEF = 16, ARRAY_DECLARATOR = 17, EXTENDS_CLAUSE = 18, IMPLEMENTS_CLAUSE = 19, PARAMETERS = 20, PARAMETER_DEF = 21, LABELED_STAT = 22, TYPECAST = 23, INDEX_OP = 24, POST_INC = 25, POST_DEC = 26, METHOD_CALL = 27, EXPR = 28, ARRAY_INIT = 29, IMPORT = 30, UNARY_MINUS = 31, UNARY_PLUS = 32, CASE_GROUP = 33, ELIST = 34, FOR_INIT = 35, FOR_CONDITION = 36, FOR_ITERATOR = 37, EMPTY_STAT = 38, FINAL = 39, ABSTRACT = 40, STRICTFP = 41, SUPER_CTOR_CALL = 42, CTOR_CALL = 43, LITERAL_PACKAGE = 44, SEMI = 45, LITERAL_IMPORT = 46, LBRACK = 47, RBRACK = 48, LITERAL_VOID = 49, LITERAL_BOOLEAN = 50, LITERAL_BYTE = 51, LITERAL_CHAR = 52, LITERAL_SHORT = 53, LITERAL_INT = 54, LITERAL_FLOAT = 55, LITERAL_LONG = 56, LITERAL_DOUBLE = 57, IDENT = 58, DOT = 59, STAR = 60, LITERAL_PRIVATE = 61, LITERAL_PUBLIC = 62, LITERAL_PROTECTED = 63, LITERAL_STATIC = 64, LITERAL_TRANSIENT = 65, LITERAL_NATIVE = 66, LITERAL_SYNCHRONIZED = 67, LITERAL_VOLATILE = 68, LITERAL_CLASS = 69, LITERAL_EXTENDS = 70, LITERAL_INTERFACE = 71, LCURLY = 72, RCURLY = 73, COMMA = 74, LITERAL_IMPLEMENTS = 75, LPAREN = 76, RPAREN = 77, LITERAL_THIS = 78, LITERAL_SUPER = 79, ASSIGN = 80, LITERAL_THROWS = 81, COLON = 82, LITERAL_IF = 83, LITERAL_WHILE = 84, LITERAL_DO = 85, LITERAL_BREAK = 86, LITERAL_CONTINUE = 87, LITERAL_RETURN = 88, LITERAL_SWITCH = 89, LITERAL_THROW = 90, LITERAL_FOR = 91, LITERAL_ELSE = 92, LITERAL_CASE = 93, LITERAL_DEFAULT = 94, LITERAL_TRY = 95, LITERAL_CATCH = 96, LITERAL_FINALLY = 97, PLUS_ASSIGN = 98, MINUS_ASSIGN = 99, STAR_ASSIGN = 100, DIV_ASSIGN = 101, MOD_ASSIGN = 102, SR_ASSIGN = 103, BSR_ASSIGN = 104, SL_ASSIGN = 105, BAND_ASSIGN = 106, BXOR_ASSIGN = 107, BOR_ASSIGN = 108, QUESTION = 109, LOR = 110, LAND = 111, BOR = 112, BXOR = 113, BAND = 114, NOT_EQUAL = 115, EQUAL = 116, LT = 117, GT = 118, LE = 119, GE = 120, LITERAL_INSTANCEOF = 121, SL = 122, SR = 123, BSR = 124, PLUS = 125, MINUS = 126, DIV = 127, MOD = 128, INC = 129, DEC = 130, BNOT = 131, LNOT = 132, LITERAL_TRUE = 133, LITERAL_FALSE = 134, LITERAL_NULL = 135, LITERAL_NEW = 136, NUM_INT = 137, CHAR_LITERAL = 138, STRING_LITERAL = 139, NUM_FLOAT = 140, NUM_LONG = 141, NUM_DOUBLE = 142, WS = 143, SINGLE_LINE_COMMENT = 144, BLOCK_COMMENT_BEGIN = 145, ESC = 146, HEX_DIGIT = 147, VOCAB = 148, EXPONENT = 149, FLOAT_SUFFIX = 150, ASSERT = 151, STATIC_IMPORT = 152, ENUM = 153, ENUM_DEF = 154, ENUM_CONSTANT_DEF = 155, FOR_EACH_CLAUSE = 156, ANNOTATION_DEF = 157, ANNOTATIONS = 158, ANNOTATION = 159, ANNOTATION_MEMBER_VALUE_PAIR = 160, ANNOTATION_FIELD_DEF = 161, ANNOTATION_ARRAY_INIT = 162, TYPE_ARGUMENTS = 163, TYPE_ARGUMENT = 164, TYPE_PARAMETERS = 165, TYPE_PARAMETER = 166, WILDCARD_TYPE = 167, TYPE_UPPER_BOUNDS = 168, TYPE_LOWER_BOUNDS = 169, AT = 170, ELLIPSIS = 171, GENERIC_START = 172, GENERIC_END = 173, TYPE_EXTENSION_AND = 174, DO_WHILE = 175, RESOURCE_SPECIFICATION = 176, RESOURCES = 177, RESOURCE = 178, DOUBLE_COLON = 179, METHOD_REF = 180, LAMBDA = 181, BLOCK_COMMENT_END = 182, COMMENT_CONTENT = 183, SINGLE_LINE_COMMENT_CONTENT = 184, BLOCK_COMMENT_CONTENT = 185, STD_ESC = 186, BINARY_DIGIT = 187, ID_START = 188, ID_PART = 189, INT_LITERAL = 190, LONG_LITERAL = 191, FLOAT_LITERAL = 192, DOUBLE_LITERAL = 193, HEX_FLOAT_LITERAL = 194, HEX_DOUBLE_LITERAL = 195, SIGNED_INTEGER = 196, BINARY_EXPONENT = 197, PATTERN_VARIABLE_DEF = 198, RECORD_DEF = 199, LITERAL_RECORD = 200, RECORD_COMPONENTS = 201, RECORD_COMPONENT_DEF = 202, COMPACT_CTOR_DEF = 203, TEXT_BLOCK_LITERAL_BEGIN = 204, TEXT_BLOCK_CONTENT = 205, TEXT_BLOCK_LITERAL_END = 206, LITERAL_YIELD = 207, SWITCH_RULE = 208, LITERAL_NON_SEALED = 209, LITERAL_SEALED = 210, LITERAL_PERMITS = 211, PERMITS_CLAUSE = 212, PATTERN_DEF = 213, LITERAL_CONST = 214, LITERAL_GOTO = 215, DECIMAL_LITERAL_LONG = 216, DECIMAL_LITERAL = 217, HEX_LITERAL_LONG = 218, HEX_LITERAL = 219, OCT_LITERAL_LONG = 220, OCT_LITERAL = 221, BINARY_LITERAL_LONG = 222, BINARY_LITERAL = 223;

    public static final int RULE_compilationUnit = 0, RULE_packageDeclaration = 1, RULE_importDeclaration = 2, RULE_typeDeclaration = 3, RULE_types = 4, RULE_modifier = 5, RULE_variableModifier = 6, RULE_classDeclaration = 7, RULE_recordDeclaration = 8, RULE_recordComponentsList = 9, RULE_recordComponents = 10, RULE_recordComponent = 11, RULE_lastRecordComponent = 12, RULE_recordBody = 13, RULE_recordBodyDeclaration = 14, RULE_compactConstructorDeclaration = 15, RULE_classExtends = 16, RULE_implementsClause = 17, RULE_typeParameters = 18, RULE_typeParameter = 19, RULE_typeUpperBounds = 20, RULE_typeBound = 21, RULE_typeBoundType = 22, RULE_enumDeclaration = 23, RULE_enumBody = 24, RULE_enumConstants = 25, RULE_enumConstant = 26, RULE_enumBodyDeclarations = 27, RULE_interfaceDeclaration = 28, RULE_interfaceExtends = 29, RULE_classBody = 30, RULE_interfaceBody = 31, RULE_classBodyDeclaration = 32, RULE_memberDeclaration = 33, RULE_methodDeclaration = 34, RULE_methodBody = 35, RULE_throwsList = 36, RULE_constructorDeclaration = 37, RULE_fieldDeclaration = 38, RULE_interfaceBodyDeclaration = 39, RULE_interfaceMemberDeclaration = 40, RULE_interfaceMethodDeclaration = 41, RULE_variableDeclarators = 42, RULE_variableDeclarator = 43, RULE_variableDeclaratorId = 44, RULE_variableInitializer = 45, RULE_arrayInitializer = 46, RULE_classOrInterfaceType = 47, RULE_classOrInterfaceTypeExtended = 48, RULE_typeArgument = 49, RULE_qualifiedNameList = 50, RULE_formalParameters = 51, RULE_formalParameterList = 52, RULE_formalParameter = 53, RULE_lastFormalParameter = 54, RULE_qualifiedName = 55, RULE_qualifiedNameExtended = 56, RULE_literal = 57, RULE_integerLiteral = 58, RULE_floatLiteral = 59, RULE_textBlockLiteral = 60, RULE_annotations = 61, RULE_annotation = 62, RULE_elementValuePairs = 63, RULE_elementValuePair = 64, RULE_elementValue = 65, RULE_elementValueArrayInitializer = 66, RULE_annotationTypeDeclaration = 67, RULE_annotationTypeBody = 68, RULE_annotationTypeElementDeclaration = 69, RULE_annotationTypeElementRest = 70, RULE_annotationMethodRest = 71, RULE_annotationConstantRest = 72, RULE_defaultValue = 73, RULE_constructorBlock = 74, RULE_explicitConstructorInvocation = 75, RULE_block = 76, RULE_blockStatement = 77, RULE_localVariableDeclaration = 78, RULE_localTypeDeclaration = 79, RULE_statement = 80, RULE_switchExpressionOrStatement = 81, RULE_switchBlock = 82, RULE_switchLabeledRule = 83, RULE_switchLabeledExpression = 84, RULE_switchLabeledBlock = 85, RULE_switchLabeledThrow = 86, RULE_elseStat = 87, RULE_catchClause = 88, RULE_catchParameter = 89, RULE_catchType = 90, RULE_finallyBlock = 91, RULE_resourceSpecification = 92, RULE_resources = 93, RULE_resource = 94, RULE_resourceDeclaration = 95, RULE_variableAccess = 96, RULE_fieldAccessNoIdent = 97, RULE_switchBlockStatementGroup = 98, RULE_switchLabel = 99, RULE_caseConstants = 100, RULE_caseConstant = 101, RULE_forControl = 102, RULE_forInit = 103, RULE_enhancedForControl = 104, RULE_parExpression = 105, RULE_expressionList = 106, RULE_expression = 107, RULE_expr = 108, RULE_typeCastParameters = 109, RULE_lambdaExpression = 110, RULE_lambdaParameters = 111, RULE_multiLambdaParams = 112, RULE_lambdaBody = 113, RULE_primary = 114, RULE_classType = 115, RULE_creator = 116, RULE_createdName = 117, RULE_createdNameExtended = 118, RULE_innerCreator = 119, RULE_arrayCreatorRest = 120, RULE_bracketsWithExp = 121, RULE_classCreatorRest = 122, RULE_typeArgumentsOrDiamond = 123, RULE_nonWildcardTypeArgumentsOrDiamond = 124, RULE_nonWildcardTypeArguments = 125, RULE_typeArgumentsTypeList = 126, RULE_typeList = 127, RULE_typeType = 128, RULE_classOrInterfaceOrPrimitiveType = 129, RULE_arrayDeclarator = 130, RULE_primitiveType = 131, RULE_typeArguments = 132, RULE_superSuffix = 133, RULE_arguments = 134, RULE_pattern = 135, RULE_guardedPattern = 136, RULE_primaryPattern = 137, RULE_typePattern = 138, RULE_permittedSubclassesAndInterfaces = 139, RULE_id = 140;

    @org.checkerframework.dataflow.qual.Pure
    private static String[] makeRuleNames() {
        return new String[] { "compilationUnit", "packageDeclaration", "importDeclaration", "typeDeclaration", "types", "modifier", "variableModifier", "classDeclaration", "recordDeclaration", "recordComponentsList", "recordComponents", "recordComponent", "lastRecordComponent", "recordBody", "recordBodyDeclaration", "compactConstructorDeclaration", "classExtends", "implementsClause", "typeParameters", "typeParameter", "typeUpperBounds", "typeBound", "typeBoundType", "enumDeclaration", "enumBody", "enumConstants", "enumConstant", "enumBodyDeclarations", "interfaceDeclaration", "interfaceExtends", "classBody", "interfaceBody", "classBodyDeclaration", "memberDeclaration", "methodDeclaration", "methodBody", "throwsList", "constructorDeclaration", "fieldDeclaration", "interfaceBodyDeclaration", "interfaceMemberDeclaration", "interfaceMethodDeclaration", "variableDeclarators", "variableDeclarator", "variableDeclaratorId", "variableInitializer", "arrayInitializer", "classOrInterfaceType", "classOrInterfaceTypeExtended", "typeArgument", "qualifiedNameList", "formalParameters", "formalParameterList", "formalParameter", "lastFormalParameter", "qualifiedName", "qualifiedNameExtended", "literal", "integerLiteral", "floatLiteral", "textBlockLiteral", "annotations", "annotation", "elementValuePairs", "elementValuePair", "elementValue", "elementValueArrayInitializer", "annotationTypeDeclaration", "annotationTypeBody", "annotationTypeElementDeclaration", "annotationTypeElementRest", "annotationMethodRest", "annotationConstantRest", "defaultValue", "constructorBlock", "explicitConstructorInvocation", "block", "blockStatement", "localVariableDeclaration", "localTypeDeclaration", "statement", "switchExpressionOrStatement", "switchBlock", "switchLabeledRule", "switchLabeledExpression", "switchLabeledBlock", "switchLabeledThrow", "elseStat", "catchClause", "catchParameter", "catchType", "finallyBlock", "resourceSpecification", "resources", "resource", "resourceDeclaration", "variableAccess", "fieldAccessNoIdent", "switchBlockStatementGroup", "switchLabel", "caseConstants", "caseConstant", "forControl", "forInit", "enhancedForControl", "parExpression", "expressionList", "expression", "expr", "typeCastParameters", "lambdaExpression", "lambdaParameters", "multiLambdaParams", "lambdaBody", "primary", "classType", "creator", "createdName", "createdNameExtended", "innerCreator", "arrayCreatorRest", "bracketsWithExp", "classCreatorRest", "typeArgumentsOrDiamond", "nonWildcardTypeArgumentsOrDiamond", "nonWildcardTypeArguments", "typeArgumentsTypeList", "typeList", "typeType", "classOrInterfaceOrPrimitiveType", "arrayDeclarator", "primitiveType", "typeArguments", "superSuffix", "arguments", "pattern", "guardedPattern", "primaryPattern", "typePattern", "permittedSubclassesAndInterfaces", "id" };
    }

    public static final String[] ruleNames = makeRuleNames();

    @org.checkerframework.dataflow.qual.Pure
    private static String[] makeLiteralNames() {
        return new String[] { null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "'extends'", null, null, null, null, null, null, null, null, null, null, null, "'import'", null, null, null, null, null, null, null, null, "'final'", "'abstract'", "'strictfp'", null, null, "'package'", "';'", null, "'['", "']'", "'void'", "'boolean'", "'byte'", "'char'", "'short'", "'int'", "'float'", "'long'", "'double'", null, "'.'", "'*'", "'private'", "'public'", "'protected'", "'static'", "'transient'", "'native'", "'synchronized'", "'volatile'", "'class'", null, "'interface'", "'{'", "'}'", "','", "'implements'", "'('", "')'", "'this'", "'super'", "'='", "'throws'", "':'", "'if'", "'while'", "'do'", "'break'", "'continue'", "'return'", "'switch'", "'throw'", "'for'", "'else'", "'case'", "'default'", "'try'", "'catch'", "'finally'", "'+='", "'-='", "'*='", "'/='", "'%='", "'>>='", "'>>>='", "'<<='", "'&='", "'^='", "'|='", "'?'", "'||'", "'&&'", "'|'", "'^'", "'&'", "'!='", "'=='", "'<'", "'>'", "'<='", "'>='", "'instanceof'", null, null, null, "'+'", "'-'", "'/'", "'%'", "'++'", "'--'", "'~'", "'!'", "'true'", "'false'", "'null'", "'new'", null, null, null, null, null, null, null, null, null, null, null, null, null, null, "'assert'", null, "'enum'", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "'@'", "'...'", null, null, null, null, null, null, null, "'::'", null, "'->'", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "'record'", null, null, null, null, null, null, "'yield'", null, "'non-sealed'", "'sealed'", "'permits'", null, null, "'const'", "'goto'" };
    }

    private static final String[] _LITERAL_NAMES = makeLiteralNames();

    @org.checkerframework.dataflow.qual.Pure
    private static String[] makeSymbolicNames() {
        return new String[] { null, "COMPILATION_UNIT", "PLACEHOLDER1", "NULL_TREE_LOOKAHEAD", "BLOCK", "MODIFIERS", "OBJBLOCK", "SLIST", "CTOR_DEF", "METHOD_DEF", "VARIABLE_DEF", "INSTANCE_INIT", "STATIC_INIT", "TYPE", "CLASS_DEF", "INTERFACE_DEF", "PACKAGE_DEF", "ARRAY_DECLARATOR", "EXTENDS_CLAUSE", "IMPLEMENTS_CLAUSE", "PARAMETERS", "PARAMETER_DEF", "LABELED_STAT", "TYPECAST", "INDEX_OP", "POST_INC", "POST_DEC", "METHOD_CALL", "EXPR", "ARRAY_INIT", "IMPORT", "UNARY_MINUS", "UNARY_PLUS", "CASE_GROUP", "ELIST", "FOR_INIT", "FOR_CONDITION", "FOR_ITERATOR", "EMPTY_STAT", "FINAL", "ABSTRACT", "STRICTFP", "SUPER_CTOR_CALL", "CTOR_CALL", "LITERAL_PACKAGE", "SEMI", "LITERAL_IMPORT", "LBRACK", "RBRACK", "LITERAL_VOID", "LITERAL_BOOLEAN", "LITERAL_BYTE", "LITERAL_CHAR", "LITERAL_SHORT", "LITERAL_INT", "LITERAL_FLOAT", "LITERAL_LONG", "LITERAL_DOUBLE", "IDENT", "DOT", "STAR", "LITERAL_PRIVATE", "LITERAL_PUBLIC", "LITERAL_PROTECTED", "LITERAL_STATIC", "LITERAL_TRANSIENT", "LITERAL_NATIVE", "LITERAL_SYNCHRONIZED", "LITERAL_VOLATILE", "LITERAL_CLASS", "LITERAL_EXTENDS", "LITERAL_INTERFACE", "LCURLY", "RCURLY", "COMMA", "LITERAL_IMPLEMENTS", "LPAREN", "RPAREN", "LITERAL_THIS", "LITERAL_SUPER", "ASSIGN", "LITERAL_THROWS", "COLON", "LITERAL_IF", "LITERAL_WHILE", "LITERAL_DO", "LITERAL_BREAK", "LITERAL_CONTINUE", "LITERAL_RETURN", "LITERAL_SWITCH", "LITERAL_THROW", "LITERAL_FOR", "LITERAL_ELSE", "LITERAL_CASE", "LITERAL_DEFAULT", "LITERAL_TRY", "LITERAL_CATCH", "LITERAL_FINALLY", "PLUS_ASSIGN", "MINUS_ASSIGN", "STAR_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", "SR_ASSIGN", "BSR_ASSIGN", "SL_ASSIGN", "BAND_ASSIGN", "BXOR_ASSIGN", "BOR_ASSIGN", "QUESTION", "LOR", "LAND", "BOR", "BXOR", "BAND", "NOT_EQUAL", "EQUAL", "LT", "GT", "LE", "GE", "LITERAL_INSTANCEOF", "SL", "SR", "BSR", "PLUS", "MINUS", "DIV", "MOD", "INC", "DEC", "BNOT", "LNOT", "LITERAL_TRUE", "LITERAL_FALSE", "LITERAL_NULL", "LITERAL_NEW", "NUM_INT", "CHAR_LITERAL", "STRING_LITERAL", "NUM_FLOAT", "NUM_LONG", "NUM_DOUBLE", "WS", "SINGLE_LINE_COMMENT", "BLOCK_COMMENT_BEGIN", "ESC", "HEX_DIGIT", "VOCAB", "EXPONENT", "FLOAT_SUFFIX", "ASSERT", "STATIC_IMPORT", "ENUM", "ENUM_DEF", "ENUM_CONSTANT_DEF", "FOR_EACH_CLAUSE", "ANNOTATION_DEF", "ANNOTATIONS", "ANNOTATION", "ANNOTATION_MEMBER_VALUE_PAIR", "ANNOTATION_FIELD_DEF", "ANNOTATION_ARRAY_INIT", "TYPE_ARGUMENTS", "TYPE_ARGUMENT", "TYPE_PARAMETERS", "TYPE_PARAMETER", "WILDCARD_TYPE", "TYPE_UPPER_BOUNDS", "TYPE_LOWER_BOUNDS", "AT", "ELLIPSIS", "GENERIC_START", "GENERIC_END", "TYPE_EXTENSION_AND", "DO_WHILE", "RESOURCE_SPECIFICATION", "RESOURCES", "RESOURCE", "DOUBLE_COLON", "METHOD_REF", "LAMBDA", "BLOCK_COMMENT_END", "COMMENT_CONTENT", "SINGLE_LINE_COMMENT_CONTENT", "BLOCK_COMMENT_CONTENT", "STD_ESC", "BINARY_DIGIT", "ID_START", "ID_PART", "INT_LITERAL", "LONG_LITERAL", "FLOAT_LITERAL", "DOUBLE_LITERAL", "HEX_FLOAT_LITERAL", "HEX_DOUBLE_LITERAL", "SIGNED_INTEGER", "BINARY_EXPONENT", "PATTERN_VARIABLE_DEF", "RECORD_DEF", "LITERAL_RECORD", "RECORD_COMPONENTS", "RECORD_COMPONENT_DEF", "COMPACT_CTOR_DEF", "TEXT_BLOCK_LITERAL_BEGIN", "TEXT_BLOCK_CONTENT", "TEXT_BLOCK_LITERAL_END", "LITERAL_YIELD", "SWITCH_RULE", "LITERAL_NON_SEALED", "LITERAL_SEALED", "LITERAL_PERMITS", "PERMITS_CLAUSE", "PATTERN_DEF", "LITERAL_CONST", "LITERAL_GOTO", "DECIMAL_LITERAL_LONG", "DECIMAL_LITERAL", "HEX_LITERAL_LONG", "HEX_LITERAL", "OCT_LITERAL_LONG", "OCT_LITERAL", "BINARY_LITERAL_LONG", "BINARY_LITERAL" };
    }

    private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();

    public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

    /**
     * @deprecated Use {@link #VOCABULARY} instead.
     */
    public static final String[] tokenNames;

    static {
        tokenNames = new String[_SYMBOLIC_NAMES.length];
        for (int i = 0; i < tokenNames.length; i++) {
            tokenNames[i] = VOCABULARY.getLiteralName(i);
            if (tokenNames[i] == null) {
                tokenNames[i] = VOCABULARY.getSymbolicName(i);
            }
            if (tokenNames[i] == null) {
                tokenNames[i] = "<INVALID>";
            }
        }
    }

    @org.checkerframework.dataflow.qual.Pure
    public String[] getTokenNames() {
        return tokenNames;
    }

    @org.checkerframework.dataflow.qual.Pure
    public Vocabulary getVocabulary() {
        return VOCABULARY;
    }

    @org.checkerframework.dataflow.qual.Pure
    public String getGrammarFileName() {
        return "java-escape";
    }

    @org.checkerframework.dataflow.qual.Pure
    public String[] getRuleNames() {
        return ruleNames;
    }

    @org.checkerframework.dataflow.qual.Pure
    public String getSerializedATN() {
        return _serializedATN;
    }

    @org.checkerframework.dataflow.qual.Pure
    public ATN getATN() {
        return _ATN;
    }

    /**
     * This is the number of files to parse before clearing the parser's
     * DFA states. This number can have a significant impact on performance;
     * we have found 500 files to be a good balance between parser speed and
     * memory usage. This field must be public in order to be accessed and
     * used for {@link JavaLanguageParser#JavaLanguageParser(TokenStream, int)}
     * generated constructor.
     */
    public static final int CLEAR_DFA_LIMIT = 500;

    /**
     * This value tracks the depth of a switch expression. Along with the
     * IDENT to id rule at the end of the parser, this value helps us
     * to know if the "yield" we are parsing is an IDENT, method call, class,
     * field, etc. or if it is a java 13+ yield statement. Positive values
     * indicate that we are within a (possibly nested) switch expression.
     */
    private int switchBlockDepth = 0;

    /**
     * Checks if next statement is a yield statement.
     *
     * @return true if next statement is a yield statement.
     */
    private boolean isYieldStatement() {
        return _input.LT(1).getType() == JavaLanguageLexer.LITERAL_YIELD && switchBlockDepth > 0;
    }

    static int fileCounter = 0;

    /**
     * We create a custom constructor so that we can clear the DFA
     * states upon instantiation of JavaLanguageParser.
     *
     * @param input the token stream to parse
     * @param clearDfaLimit this is the number of files to parse before clearing
     *         the parser's DFA states. This number can have a significant impact
     *         on performance; more frequent clearing of DFA states can lead to
     *         slower parsing but lower memory usage. Conversely, not clearing the
     *         DFA states at all can lead to enormous memory usage, but may also
     *         have a negative effect on memory usage from higher garbage collector
     *         activity.
     */
    public JavaLanguageParser( TokenStream input,   int clearDfaLimit) {
        super(input);
        _interp = new ParserATNSimulator(this, _ATN, _decisionToDFA, _sharedContextCache);
        fileCounter++;
        if (fileCounter > clearDfaLimit) {
            _interp.clearDFA();
            fileCounter = 0;
        }
    }

    public JavaLanguageParser(TokenStream input) {
        super(input);
        _interp = new ParserATNSimulator(this, _ATN, _decisionToDFA, _sharedContextCache);
    }

    public static class CompilationUnitContext extends ParserRuleContext {

        public TerminalNode EOF() {
            return getToken(JavaLanguageParser.EOF, 0);
        }

        public PackageDeclarationContext packageDeclaration() {
            return getRuleContext(PackageDeclarationContext.class, 0);
        }

        public List<ImportDeclarationContext> importDeclaration() {
            return getRuleContexts(ImportDeclarationContext.class);
        }

        public ImportDeclarationContext importDeclaration(int i) {
            return getRuleContext(ImportDeclarationContext.class, i);
        }

        public List<TypeDeclarationContext> typeDeclaration() {
            return getRuleContexts(TypeDeclarationContext.class);
        }

        public TypeDeclarationContext typeDeclaration(int i) {
            return getRuleContext(TypeDeclarationContext.class, i);
        }

        public CompilationUnitContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_compilationUnit;
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitCompilationUnit(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final CompilationUnitContext compilationUnit() throws RecognitionException {
        CompilationUnitContext _localctx = new CompilationUnitContext(_ctx, getState());
        enterRule(_localctx, 0, RULE_compilationUnit);
        int _la;
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(283);
                _errHandler.sync(this);
                switch(getInterpreter().adaptivePredict(_input, 0, _ctx)) {
                    case 1:
                        {
                            setState(282);
                            packageDeclaration();
                        }
                        break;
                }
                setState(288);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input, 1, _ctx);
                while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                    if (_alt == 1) {
                        {
                            {
                                setState(285);
                                importDeclaration();
                            }
                        }
                    }
                    setState(290);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 1, _ctx);
                }
                setState(294);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while ((((_la - 39)) & ~0x3f) == 0 && ((1L << (_la - 39)) & 36028803457220679L) != 0 || (((_la - 153)) & ~0x3f) == 0 && ((1L << (_la - 153)) & 216313519602270209L) != 0) {
                    {
                        {
                            setState(291);
                            typeDeclaration();
                        }
                    }
                    setState(296);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
                setState(297);
                match(EOF);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class PackageDeclarationContext extends ParserRuleContext {

        public AnnotationsContext annotations() {
            return getRuleContext(AnnotationsContext.class, 0);
        }

        public TerminalNode LITERAL_PACKAGE() {
            return getToken(JavaLanguageParser.LITERAL_PACKAGE, 0);
        }

        public QualifiedNameContext qualifiedName() {
            return getRuleContext(QualifiedNameContext.class, 0);
        }

        public TerminalNode SEMI() {
            return getToken(JavaLanguageParser.SEMI, 0);
        }

        public PackageDeclarationContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_packageDeclaration;
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitPackageDeclaration(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final PackageDeclarationContext packageDeclaration() throws RecognitionException {
        PackageDeclarationContext _localctx = new PackageDeclarationContext(_ctx, getState());
        enterRule(_localctx, 2, RULE_packageDeclaration);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(299);
                annotations(true);
                setState(300);
                match(LITERAL_PACKAGE);
                setState(301);
                qualifiedName();
                setState(302);
                match(SEMI);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class ImportDeclarationContext extends ParserRuleContext {

        public ImportDeclarationContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_importDeclaration;
        }

        public ImportDeclarationContext() {
        }

        public void copyFrom(ImportDeclarationContext ctx) {
            super.copyFrom(ctx);
        }
    }

    public static class SingleSemiImportContext extends ImportDeclarationContext {

        public TerminalNode SEMI() {
            return getToken(JavaLanguageParser.SEMI, 0);
        }

        public SingleSemiImportContext(ImportDeclarationContext ctx) {
            copyFrom(ctx);
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitSingleSemiImport(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public static class ImportDecContext extends ImportDeclarationContext {

        public TerminalNode IMPORT() {
            return getToken(JavaLanguageParser.IMPORT, 0);
        }

        public QualifiedNameContext qualifiedName() {
            return getRuleContext(QualifiedNameContext.class, 0);
        }

        public TerminalNode SEMI() {
            return getToken(JavaLanguageParser.SEMI, 0);
        }

        public TerminalNode LITERAL_STATIC() {
            return getToken(JavaLanguageParser.LITERAL_STATIC, 0);
        }

        public TerminalNode DOT() {
            return getToken(JavaLanguageParser.DOT, 0);
        }

        public TerminalNode STAR() {
            return getToken(JavaLanguageParser.STAR, 0);
        }

        public ImportDecContext(ImportDeclarationContext ctx) {
            copyFrom(ctx);
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitImportDec(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final ImportDeclarationContext importDeclaration() throws RecognitionException {
        ImportDeclarationContext _localctx = new ImportDeclarationContext(_ctx, getState());
        enterRule(_localctx, 4, RULE_importDeclaration);
        int _la;
        try {
            setState(316);
            _errHandler.sync(this);
            switch(_input.LA(1)) {
                case IMPORT:
                    _localctx = new ImportDecContext(_localctx);
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(304);
                        match(IMPORT);
                        setState(306);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == LITERAL_STATIC) {
                            {
                                setState(305);
                                match(LITERAL_STATIC);
                            }
                        }
                        setState(308);
                        qualifiedName();
                        setState(311);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == DOT) {
                            {
                                setState(309);
                                match(DOT);
                                setState(310);
                                match(STAR);
                            }
                        }
                        setState(313);
                        match(SEMI);
                    }
                    break;
                case SEMI:
                    _localctx = new SingleSemiImportContext(_localctx);
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(315);
                        match(SEMI);
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class TypeDeclarationContext extends ParserRuleContext {

        public ModifierContext modifier;

        public List<ModifierContext> mods = new ArrayList<ModifierContext>();

        public TypesContext type;

        public Token SEMI;

        public List<Token> semi = new ArrayList<Token>();

        public TypesContext types() {
            return getRuleContext(TypesContext.class, 0);
        }

        public List<ModifierContext> modifier() {
            return getRuleContexts(ModifierContext.class);
        }

        public ModifierContext modifier(int i) {
            return getRuleContext(ModifierContext.class, i);
        }

        public List<TerminalNode> SEMI() {
            return getTokens(JavaLanguageParser.SEMI);
        }

        public TerminalNode SEMI(int i) {
            return getToken(JavaLanguageParser.SEMI, i);
        }

        public TypeDeclarationContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_typeDeclaration;
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitTypeDeclaration(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final TypeDeclarationContext typeDeclaration() throws RecognitionException {
        TypeDeclarationContext _localctx = new TypeDeclarationContext(_ctx, getState());
        enterRule(_localctx, 6, RULE_typeDeclaration);
        try {
            int _alt;
            setState(330);
            _errHandler.sync(this);
            switch(_input.LA(1)) {
                case FINAL:
                case ABSTRACT:
                case STRICTFP:
                case LITERAL_PRIVATE:
                case LITERAL_PUBLIC:
                case LITERAL_PROTECTED:
                case LITERAL_STATIC:
                case LITERAL_TRANSIENT:
                case LITERAL_NATIVE:
                case LITERAL_SYNCHRONIZED:
                case LITERAL_VOLATILE:
                case LITERAL_CLASS:
                case LITERAL_INTERFACE:
                case LITERAL_DEFAULT:
                case ENUM:
                case AT:
                case LITERAL_RECORD:
                case LITERAL_NON_SEALED:
                case LITERAL_SEALED:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(321);
                        _errHandler.sync(this);
                        _alt = getInterpreter().adaptivePredict(_input, 6, _ctx);
                        while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                            if (_alt == 1) {
                                {
                                    {
                                        setState(318);
                                        ((TypeDeclarationContext) _localctx).modifier = modifier();
                                        ((TypeDeclarationContext) _localctx).mods.add(((TypeDeclarationContext) _localctx).modifier);
                                    }
                                }
                            }
                            setState(323);
                            _errHandler.sync(this);
                            _alt = getInterpreter().adaptivePredict(_input, 6, _ctx);
                        }
                        setState(324);
                        ((TypeDeclarationContext) _localctx).type = types(_localctx.mods);
                    }
                    break;
                case SEMI:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(326);
                        _errHandler.sync(this);
                        _alt = 1;
                        do {
                            switch(_alt) {
                                case 1:
                                    {
                                        {
                                            setState(325);
                                            ((TypeDeclarationContext) _localctx).SEMI = match(SEMI);
                                            ((TypeDeclarationContext) _localctx).semi.add(((TypeDeclarationContext) _localctx).SEMI);
                                        }
                                    }
                                    break;
                                default:
                                    throw new NoViableAltException(this);
                            }
                            setState(328);
                            _errHandler.sync(this);
                            _alt = getInterpreter().adaptivePredict(_input, 7, _ctx);
                        } while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER);
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class TypesContext extends ParserRuleContext {

        public List<ModifierContext> mods;

        public ClassDeclarationContext classDeclaration() {
            return getRuleContext(ClassDeclarationContext.class, 0);
        }

        public EnumDeclarationContext enumDeclaration() {
            return getRuleContext(EnumDeclarationContext.class, 0);
        }

        public InterfaceDeclarationContext interfaceDeclaration() {
            return getRuleContext(InterfaceDeclarationContext.class, 0);
        }

        public AnnotationTypeDeclarationContext annotationTypeDeclaration() {
            return getRuleContext(AnnotationTypeDeclarationContext.class, 0);
        }

        public RecordDeclarationContext recordDeclaration() {
            return getRuleContext(RecordDeclarationContext.class, 0);
        }

        public TypesContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TypesContext(ParserRuleContext parent, int invokingState, List<ModifierContext> mods) {
            super(parent, invokingState);
            this.mods = mods;
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_types;
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitTypes(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final TypesContext types(List<ModifierContext> mods) throws RecognitionException {
        TypesContext _localctx = new TypesContext(_ctx, getState(), mods);
        enterRule(_localctx, 8, RULE_types);
        try {
            setState(337);
            _errHandler.sync(this);
            switch(_input.LA(1)) {
                case LITERAL_CLASS:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(332);
                        classDeclaration(mods);
                    }
                    break;
                case ENUM:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(333);
                        enumDeclaration(mods);
                    }
                    break;
                case LITERAL_INTERFACE:
                    enterOuterAlt(_localctx, 3);
                    {
                        setState(334);
                        interfaceDeclaration(mods);
                    }
                    break;
                case AT:
                    enterOuterAlt(_localctx, 4);
                    {
                        setState(335);
                        annotationTypeDeclaration(mods);
                    }
                    break;
                case LITERAL_RECORD:
                    enterOuterAlt(_localctx, 5);
                    {
                        setState(336);
                        recordDeclaration(mods);
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class ModifierContext extends ParserRuleContext {

        public AnnotationContext annotation() {
            return getRuleContext(AnnotationContext.class, 0);
        }

        public TerminalNode LITERAL_PUBLIC() {
            return getToken(JavaLanguageParser.LITERAL_PUBLIC, 0);
        }

        public TerminalNode LITERAL_PROTECTED() {
            return getToken(JavaLanguageParser.LITERAL_PROTECTED, 0);
        }

        public TerminalNode LITERAL_PRIVATE() {
            return getToken(JavaLanguageParser.LITERAL_PRIVATE, 0);
        }

        public TerminalNode LITERAL_STATIC() {
            return getToken(JavaLanguageParser.LITERAL_STATIC, 0);
        }

        public TerminalNode ABSTRACT() {
            return getToken(JavaLanguageParser.ABSTRACT, 0);
        }

        public TerminalNode LITERAL_DEFAULT() {
            return getToken(JavaLanguageParser.LITERAL_DEFAULT, 0);
        }

        public TerminalNode FINAL() {
            return getToken(JavaLanguageParser.FINAL, 0);
        }

        public TerminalNode STRICTFP() {
            return getToken(JavaLanguageParser.STRICTFP, 0);
        }

        public TerminalNode LITERAL_NATIVE() {
            return getToken(JavaLanguageParser.LITERAL_NATIVE, 0);
        }

        public TerminalNode LITERAL_SYNCHRONIZED() {
            return getToken(JavaLanguageParser.LITERAL_SYNCHRONIZED, 0);
        }

        public TerminalNode LITERAL_TRANSIENT() {
            return getToken(JavaLanguageParser.LITERAL_TRANSIENT, 0);
        }

        public TerminalNode LITERAL_VOLATILE() {
            return getToken(JavaLanguageParser.LITERAL_VOLATILE, 0);
        }

        public TerminalNode LITERAL_NON_SEALED() {
            return getToken(JavaLanguageParser.LITERAL_NON_SEALED, 0);
        }

        public TerminalNode LITERAL_SEALED() {
            return getToken(JavaLanguageParser.LITERAL_SEALED, 0);
        }

        public ModifierContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_modifier;
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitModifier(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final ModifierContext modifier() throws RecognitionException {
        ModifierContext _localctx = new ModifierContext(_ctx, getState());
        enterRule(_localctx, 10, RULE_modifier);
        try {
            setState(354);
            _errHandler.sync(this);
            switch(_input.LA(1)) {
                case AT:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(339);
                        annotation();
                    }
                    break;
                case LITERAL_PUBLIC:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(340);
                        match(LITERAL_PUBLIC);
                    }
                    break;
                case LITERAL_PROTECTED:
                    enterOuterAlt(_localctx, 3);
                    {
                        setState(341);
                        match(LITERAL_PROTECTED);
                    }
                    break;
                case LITERAL_PRIVATE:
                    enterOuterAlt(_localctx, 4);
                    {
                        setState(342);
                        match(LITERAL_PRIVATE);
                    }
                    break;
                case LITERAL_STATIC:
                    enterOuterAlt(_localctx, 5);
                    {
                        setState(343);
                        match(LITERAL_STATIC);
                    }
                    break;
                case ABSTRACT:
                    enterOuterAlt(_localctx, 6);
                    {
                        setState(344);
                        match(ABSTRACT);
                    }
                    break;
                case LITERAL_DEFAULT:
                    enterOuterAlt(_localctx, 7);
                    {
                        setState(345);
                        match(LITERAL_DEFAULT);
                    }
                    break;
                case FINAL:
                    enterOuterAlt(_localctx, 8);
                    {
                        setState(346);
                        match(FINAL);
                    }
                    break;
                case STRICTFP:
                    enterOuterAlt(_localctx, 9);
                    {
                        setState(347);
                        match(STRICTFP);
                    }
                    break;
                case LITERAL_NATIVE:
                    enterOuterAlt(_localctx, 10);
                    {
                        setState(348);
                        match(LITERAL_NATIVE);
                    }
                    break;
                case LITERAL_SYNCHRONIZED:
                    enterOuterAlt(_localctx, 11);
                    {
                        setState(349);
                        match(LITERAL_SYNCHRONIZED);
                    }
                    break;
                case LITERAL_TRANSIENT:
                    enterOuterAlt(_localctx, 12);
                    {
                        setState(350);
                        match(LITERAL_TRANSIENT);
                    }
                    break;
                case LITERAL_VOLATILE:
                    enterOuterAlt(_localctx, 13);
                    {
                        setState(351);
                        match(LITERAL_VOLATILE);
                    }
                    break;
                case LITERAL_NON_SEALED:
                    enterOuterAlt(_localctx, 14);
                    {
                        setState(352);
                        match(LITERAL_NON_SEALED);
                    }
                    break;
                case LITERAL_SEALED:
                    enterOuterAlt(_localctx, 15);
                    {
                        setState(353);
                        match(LITERAL_SEALED);
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class VariableModifierContext extends ParserRuleContext {

        public TerminalNode FINAL() {
            return getToken(JavaLanguageParser.FINAL, 0);
        }

        public AnnotationContext annotation() {
            return getRuleContext(AnnotationContext.class, 0);
        }

        public VariableModifierContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_variableModifier;
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitVariableModifier(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final VariableModifierContext variableModifier() throws RecognitionException {
        VariableModifierContext _localctx = new VariableModifierContext(_ctx, getState());
        enterRule(_localctx, 12, RULE_variableModifier);
        try {
            setState(358);
            _errHandler.sync(this);
            switch(_input.LA(1)) {
                case FINAL:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(356);
                        match(FINAL);
                    }
                    break;
                case AT:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(357);
                        annotation();
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class ClassDeclarationContext extends ParserRuleContext {

        public List<ModifierContext> mods;

        public TerminalNode LITERAL_CLASS() {
            return getToken(JavaLanguageParser.LITERAL_CLASS, 0);
        }

        public IdContext id() {
            return getRuleContext(IdContext.class, 0);
        }

        public ClassBodyContext classBody() {
            return getRuleContext(ClassBodyContext.class, 0);
        }

        public TypeParametersContext typeParameters() {
            return getRuleContext(TypeParametersContext.class, 0);
        }

        public ClassExtendsContext classExtends() {
            return getRuleContext(ClassExtendsContext.class, 0);
        }

        public ImplementsClauseContext implementsClause() {
            return getRuleContext(ImplementsClauseContext.class, 0);
        }

        public PermittedSubclassesAndInterfacesContext permittedSubclassesAndInterfaces() {
            return getRuleContext(PermittedSubclassesAndInterfacesContext.class, 0);
        }

        public ClassDeclarationContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public ClassDeclarationContext(ParserRuleContext parent, int invokingState, List<ModifierContext> mods) {
            super(parent, invokingState);
            this.mods = mods;
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_classDeclaration;
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitClassDeclaration(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final ClassDeclarationContext classDeclaration(List<ModifierContext> mods) throws RecognitionException {
        ClassDeclarationContext _localctx = new ClassDeclarationContext(_ctx, getState(), mods);
        enterRule(_localctx, 14, RULE_classDeclaration);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(360);
                match(LITERAL_CLASS);
                setState(361);
                id();
                setState(363);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == LT) {
                    {
                        setState(362);
                        typeParameters();
                    }
                }
                setState(366);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == EXTENDS_CLAUSE) {
                    {
                        setState(365);
                        classExtends();
                    }
                }
                setState(369);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == LITERAL_IMPLEMENTS) {
                    {
                        setState(368);
                        implementsClause();
                    }
                }
                setState(372);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == LITERAL_PERMITS) {
                    {
                        setState(371);
                        permittedSubclassesAndInterfaces();
                    }
                }
                setState(374);
                classBody();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class RecordDeclarationContext extends ParserRuleContext {

        public List<ModifierContext> mods;

        public TerminalNode LITERAL_RECORD() {
            return getToken(JavaLanguageParser.LITERAL_RECORD, 0);
        }

        public IdContext id() {
            return getRuleContext(IdContext.class, 0);
        }

        public RecordComponentsListContext recordComponentsList() {
            return getRuleContext(RecordComponentsListContext.class, 0);
        }

        public RecordBodyContext recordBody() {
            return getRuleContext(RecordBodyContext.class, 0);
        }

        public TypeParametersContext typeParameters() {
            return getRuleContext(TypeParametersContext.class, 0);
        }

        public ImplementsClauseContext implementsClause() {
            return getRuleContext(ImplementsClauseContext.class, 0);
        }

        public RecordDeclarationContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public RecordDeclarationContext(ParserRuleContext parent, int invokingState, List<ModifierContext> mods) {
            super(parent, invokingState);
            this.mods = mods;
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_recordDeclaration;
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitRecordDeclaration(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final RecordDeclarationContext recordDeclaration(List<ModifierContext> mods) throws RecognitionException {
        RecordDeclarationContext _localctx = new RecordDeclarationContext(_ctx, getState(), mods);
        enterRule(_localctx, 16, RULE_recordDeclaration);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(376);
                match(LITERAL_RECORD);
                setState(377);
                id();
                setState(379);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == LT) {
                    {
                        setState(378);
                        typeParameters();
                    }
                }
                setState(381);
                recordComponentsList();
                setState(383);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == LITERAL_IMPLEMENTS) {
                    {
                        setState(382);
                        implementsClause();
                    }
                }
                setState(385);
                recordBody();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class RecordComponentsListContext extends ParserRuleContext {

        public TerminalNode LPAREN() {
            return getToken(JavaLanguageParser.LPAREN, 0);
        }

        public TerminalNode RPAREN() {
            return getToken(JavaLanguageParser.RPAREN, 0);
        }

        public RecordComponentsContext recordComponents() {
            return getRuleContext(RecordComponentsContext.class, 0);
        }

        public RecordComponentsListContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_recordComponentsList;
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitRecordComponentsList(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final RecordComponentsListContext recordComponentsList() throws RecognitionException {
        RecordComponentsListContext _localctx = new RecordComponentsListContext(_ctx, getState());
        enterRule(_localctx, 18, RULE_recordComponentsList);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(387);
                match(LPAREN);
                setState(389);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (((_la) & ~0x3f) == 0 && ((1L << _la) & 575897802350002176L) != 0 || (((_la - 170)) & ~0x3f) == 0 && ((1L << (_la - 170)) & 3986803392513L) != 0) {
                    {
                        setState(388);
                        recordComponents();
                    }
                }
                setState(391);
                match(RPAREN);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class RecordComponentsContext extends ParserRuleContext {

        public List<RecordComponentContext> recordComponent() {
            return getRuleContexts(RecordComponentContext.class);
        }

        public RecordComponentContext recordComponent(int i) {
            return getRuleContext(RecordComponentContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(JavaLanguageParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(JavaLanguageParser.COMMA, i);
        }

        public LastRecordComponentContext lastRecordComponent() {
            return getRuleContext(LastRecordComponentContext.class, 0);
        }

        public RecordComponentsContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_recordComponents;
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitRecordComponents(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final RecordComponentsContext recordComponents() throws RecognitionException {
        RecordComponentsContext _localctx = new RecordComponentsContext(_ctx, getState());
        enterRule(_localctx, 20, RULE_recordComponents);
        int _la;
        try {
            int _alt;
            setState(406);
            _errHandler.sync(this);
            switch(getInterpreter().adaptivePredict(_input, 21, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(393);
                        recordComponent();
                        setState(398);
                        _errHandler.sync(this);
                        _alt = getInterpreter().adaptivePredict(_input, 19, _ctx);
                        while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                            if (_alt == 1) {
                                {
                                    {
                                        setState(394);
                                        match(COMMA);
                                        setState(395);
                                        recordComponent();
                                    }
                                }
                            }
                            setState(400);
                            _errHandler.sync(this);
                            _alt = getInterpreter().adaptivePredict(_input, 19, _ctx);
                        }
                        setState(403);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == COMMA) {
                            {
                                setState(401);
                                match(COMMA);
                                setState(402);
                                lastRecordComponent();
                            }
                        }
                    }
                    break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(405);
                        lastRecordComponent();
                    }
                    break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class RecordComponentContext extends ParserRuleContext {

        public TypeTypeContext type;

        public AnnotationsContext annotations() {
            return getRuleContext(AnnotationsContext.class, 0);
        }

        public IdContext id() {
            return getRuleContext(IdContext.class, 0);
        }

        public TypeTypeContext typeType() {
            return getRuleContext(TypeTypeContext.class, 0);
        }

        public RecordComponentContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_recordComponent;
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitRecordComponent(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final RecordComponentContext recordComponent() throws RecognitionException {
        RecordComponentContext _localctx = new RecordComponentContext(_ctx, getState());
        enterRule(_localctx, 22, RULE_recordComponent);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(408);
                annotations(true);
                setState(409);
                ((RecordComponentContext) _localctx).type = typeType(true);
                setState(410);
                id();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class LastRecordComponentContext extends ParserRuleContext {

        public TypeTypeContext type;

        public AnnotationsContext annotations() {
            return getRuleContext(AnnotationsContext.class, 0);
        }

        public TerminalNode ELLIPSIS() {
            return getToken(JavaLanguageParser.ELLIPSIS, 0);
        }

        public IdContext id() {
            return getRuleContext(IdContext.class, 0);
        }

        public TypeTypeContext typeType() {
            return getRuleContext(TypeTypeContext.class, 0);
        }

        public LastRecordComponentContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_lastRecordComponent;
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitLastRecordComponent(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final LastRecordComponentContext lastRecordComponent() throws RecognitionException {
        LastRecordComponentContext _localctx = new LastRecordComponentContext(_ctx, getState());
        enterRule(_localctx, 24, RULE_lastRecordComponent);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(412);
                annotations(true);
                setState(413);
                ((LastRecordComponentContext) _localctx).type = typeType(true);
                setState(414);
                match(ELLIPSIS);
                setState(415);
                id();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class RecordBodyContext extends ParserRuleContext {

        public TerminalNode LCURLY() {
            return getToken(JavaLanguageParser.LCURLY, 0);
        }

        public TerminalNode RCURLY() {
            return getToken(JavaLanguageParser.RCURLY, 0);
        }

        public List<RecordBodyDeclarationContext> recordBodyDeclaration() {
            return getRuleContexts(RecordBodyDeclarationContext.class);
        }

        public RecordBodyDeclarationContext recordBodyDeclaration(int i) {
            return getRuleContext(RecordBodyDeclarationContext.class, i);
        }

        public RecordBodyContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_recordBody;
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitRecordBody(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final RecordBodyContext recordBody() throws RecognitionException {
        RecordBodyContext _localctx = new RecordBodyContext(_ctx, getState());
        enterRule(_localctx, 26, RULE_recordBody);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(417);
                match(LCURLY);
                setState(421);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (((_la) & ~0x3f) == 0 && ((1L << _la) & -1729906174200905728L) != 0 || (((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 9007200328483263L) != 0 || (((_la - 153)) & ~0x3f) == 0 && ((1L << (_la - 153)) & 522558294263463937L) != 0) {
                    {
                        {
                            setState(418);
                            recordBodyDeclaration();
                        }
                    }
                    setState(423);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
                setState(424);
                match(RCURLY);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class RecordBodyDeclarationContext extends ParserRuleContext {

        public CompactConstructorDeclarationContext compactConstructorDeclaration() {
            return getRuleContext(CompactConstructorDeclarationContext.class, 0);
        }

        public ClassBodyDeclarationContext classBodyDeclaration() {
            return getRuleContext(ClassBodyDeclarationContext.class, 0);
        }

        public RecordBodyDeclarationContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_recordBodyDeclaration;
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitRecordBodyDeclaration(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final RecordBodyDeclarationContext recordBodyDeclaration() throws RecognitionException {
        RecordBodyDeclarationContext _localctx = new RecordBodyDeclarationContext(_ctx, getState());
        enterRule(_localctx, 28, RULE_recordBodyDeclaration);
        try {
            setState(428);
            _errHandler.sync(this);
            switch(getInterpreter().adaptivePredict(_input, 23, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(426);
                        compactConstructorDeclaration();
                    }
                    break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(427);
                        classBodyDeclaration();
                    }
                    break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class CompactConstructorDeclarationContext extends ParserRuleContext {

        public ModifierContext modifier;

        public List<ModifierContext> mods = new ArrayList<ModifierContext>();

        public IdContext id() {
            return getRuleContext(IdContext.class, 0);
        }

        public ConstructorBlockContext constructorBlock() {
            return getRuleContext(ConstructorBlockContext.class, 0);
        }

        public List<ModifierContext> modifier() {
            return getRuleContexts(ModifierContext.class);
        }

        public ModifierContext modifier(int i) {
            return getRuleContext(ModifierContext.class, i);
        }

        public CompactConstructorDeclarationContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_compactConstructorDeclaration;
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitCompactConstructorDeclaration(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final CompactConstructorDeclarationContext compactConstructorDeclaration() throws RecognitionException {
        CompactConstructorDeclarationContext _localctx = new CompactConstructorDeclarationContext(_ctx, getState());
        enterRule(_localctx, 30, RULE_compactConstructorDeclaration);
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(433);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input, 24, _ctx);
                while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                    if (_alt == 1) {
                        {
                            {
                                setState(430);
                                ((CompactConstructorDeclarationContext) _localctx).modifier = modifier();
                                ((CompactConstructorDeclarationContext) _localctx).mods.add(((CompactConstructorDeclarationContext) _localctx).modifier);
                            }
                        }
                    }
                    setState(435);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 24, _ctx);
                }
                setState(436);
                id();
                setState(437);
                constructorBlock();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class ClassExtendsContext extends ParserRuleContext {

        public TypeTypeContext type;

        public TerminalNode EXTENDS_CLAUSE() {
            return getToken(JavaLanguageParser.EXTENDS_CLAUSE, 0);
        }

        public TypeTypeContext typeType() {
            return getRuleContext(TypeTypeContext.class, 0);
        }

        public ClassExtendsContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_classExtends;
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitClassExtends(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final ClassExtendsContext classExtends() throws RecognitionException {
        ClassExtendsContext _localctx = new ClassExtendsContext(_ctx, getState());
        enterRule(_localctx, 32, RULE_classExtends);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(439);
                match(EXTENDS_CLAUSE);
                setState(440);
                ((ClassExtendsContext) _localctx).type = typeType(false);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class ImplementsClauseContext extends ParserRuleContext {

        public TerminalNode LITERAL_IMPLEMENTS() {
            return getToken(JavaLanguageParser.LITERAL_IMPLEMENTS, 0);
        }

        public TypeListContext typeList() {
            return getRuleContext(TypeListContext.class, 0);
        }

        public ImplementsClauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_implementsClause;
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitImplementsClause(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final ImplementsClauseContext implementsClause() throws RecognitionException {
        ImplementsClauseContext _localctx = new ImplementsClauseContext(_ctx, getState());
        enterRule(_localctx, 34, RULE_implementsClause);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(442);
                match(LITERAL_IMPLEMENTS);
                setState(443);
                typeList();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class TypeParametersContext extends ParserRuleContext {

        public TerminalNode LT() {
            return getToken(JavaLanguageParser.LT, 0);
        }

        public List<TypeParameterContext> typeParameter() {
            return getRuleContexts(TypeParameterContext.class);
        }

        public TypeParameterContext typeParameter(int i) {
            return getRuleContext(TypeParameterContext.class, i);
        }

        public TerminalNode GT() {
            return getToken(JavaLanguageParser.GT, 0);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(JavaLanguageParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(JavaLanguageParser.COMMA, i);
        }

        public TypeParametersContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_typeParameters;
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitTypeParameters(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final TypeParametersContext typeParameters() throws RecognitionException {
        TypeParametersContext _localctx = new TypeParametersContext(_ctx, getState());
        enterRule(_localctx, 36, RULE_typeParameters);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(445);
                match(LT);
                setState(446);
                typeParameter();
                setState(451);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == COMMA) {
                    {
                        {
                            setState(447);
                            match(COMMA);
                            setState(448);
                            typeParameter();
                        }
                    }
                    setState(453);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
                setState(454);
                match(GT);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class TypeParameterContext extends ParserRuleContext {

        public AnnotationsContext annotations() {
            return getRuleContext(AnnotationsContext.class, 0);
        }

        public IdContext id() {
            return getRuleContext(IdContext.class, 0);
        }

        public TypeUpperBoundsContext typeUpperBounds() {
            return getRuleContext(TypeUpperBoundsContext.class, 0);
        }

        public TypeParameterContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_typeParameter;
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitTypeParameter(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final TypeParameterContext typeParameter() throws RecognitionException {
        TypeParameterContext _localctx = new TypeParameterContext(_ctx, getState());
        enterRule(_localctx, 38, RULE_typeParameter);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(456);
                annotations(false);
                setState(457);
                id();
                setState(459);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == EXTENDS_CLAUSE) {
                    {
                        setState(458);
                        typeUpperBounds();
                    }
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class TypeUpperBoundsContext extends ParserRuleContext {

        public TerminalNode EXTENDS_CLAUSE() {
            return getToken(JavaLanguageParser.EXTENDS_CLAUSE, 0);
        }

        public AnnotationsContext annotations() {
            return getRuleContext(AnnotationsContext.class, 0);
        }

        public TypeBoundContext typeBound() {
            return getRuleContext(TypeBoundContext.class, 0);
        }

        public TypeUpperBoundsContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_typeUpperBounds;
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitTypeUpperBounds(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final TypeUpperBoundsContext typeUpperBounds() throws RecognitionException {
        TypeUpperBoundsContext _localctx = new TypeUpperBoundsContext(_ctx, getState());
        enterRule(_localctx, 40, RULE_typeUpperBounds);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(461);
                match(EXTENDS_CLAUSE);
                setState(462);
                annotations(false);
                setState(463);
                typeBound();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class TypeBoundContext extends ParserRuleContext {

        public List<TypeBoundTypeContext> typeBoundType() {
            return getRuleContexts(TypeBoundTypeContext.class);
        }

        public TypeBoundTypeContext typeBoundType(int i) {
            return getRuleContext(TypeBoundTypeContext.class, i);
        }

        public List<TerminalNode> BAND() {
            return getTokens(JavaLanguageParser.BAND);
        }

        public TerminalNode BAND(int i) {
            return getToken(JavaLanguageParser.BAND, i);
        }

        public TypeBoundContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_typeBound;
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitTypeBound(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final TypeBoundContext typeBound() throws RecognitionException {
        TypeBoundContext _localctx = new TypeBoundContext(_ctx, getState());
        enterRule(_localctx, 42, RULE_typeBound);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(465);
                typeBoundType();
                setState(470);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == BAND) {
                    {
                        {
                            setState(466);
                            match(BAND);
                            setState(467);
                            typeBoundType();
                        }
                    }
                    setState(472);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class TypeBoundTypeContext extends ParserRuleContext {

        public AnnotationsContext annotations() {
            return getRuleContext(AnnotationsContext.class, 0);
        }

        public ClassOrInterfaceOrPrimitiveTypeContext classOrInterfaceOrPrimitiveType() {
            return getRuleContext(ClassOrInterfaceOrPrimitiveTypeContext.class, 0);
        }

        public List<ArrayDeclaratorContext> arrayDeclarator() {
            return getRuleContexts(ArrayDeclaratorContext.class);
        }

        public ArrayDeclaratorContext arrayDeclarator(int i) {
            return getRuleContext(ArrayDeclaratorContext.class, i);
        }

        public TypeBoundTypeContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_typeBoundType;
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitTypeBoundType(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final TypeBoundTypeContext typeBoundType() throws RecognitionException {
        TypeBoundTypeContext _localctx = new TypeBoundTypeContext(_ctx, getState());
        enterRule(_localctx, 44, RULE_typeBoundType);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(473);
                annotations(false);
                setState(474);
                classOrInterfaceOrPrimitiveType();
                setState(478);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == LBRACK || _la == AT) {
                    {
                        {
                            setState(475);
                            arrayDeclarator();
                        }
                    }
                    setState(480);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class EnumDeclarationContext extends ParserRuleContext {

        public List<ModifierContext> mods;

        public TerminalNode ENUM() {
            return getToken(JavaLanguageParser.ENUM, 0);
        }

        public IdContext id() {
            return getRuleContext(IdContext.class, 0);
        }

        public EnumBodyContext enumBody() {
            return getRuleContext(EnumBodyContext.class, 0);
        }

        public ImplementsClauseContext implementsClause() {
            return getRuleContext(ImplementsClauseContext.class, 0);
        }

        public EnumDeclarationContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public EnumDeclarationContext(ParserRuleContext parent, int invokingState, List<ModifierContext> mods) {
            super(parent, invokingState);
            this.mods = mods;
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_enumDeclaration;
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitEnumDeclaration(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final EnumDeclarationContext enumDeclaration(List<ModifierContext> mods) throws RecognitionException {
        EnumDeclarationContext _localctx = new EnumDeclarationContext(_ctx, getState(), mods);
        enterRule(_localctx, 46, RULE_enumDeclaration);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(481);
                match(ENUM);
                setState(482);
                id();
                setState(484);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == LITERAL_IMPLEMENTS) {
                    {
                        setState(483);
                        implementsClause();
                    }
                }
                setState(486);
                enumBody();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class EnumBodyContext extends ParserRuleContext {

        public TerminalNode LCURLY() {
            return getToken(JavaLanguageParser.LCURLY, 0);
        }

        public TerminalNode RCURLY() {
            return getToken(JavaLanguageParser.RCURLY, 0);
        }

        public EnumConstantsContext enumConstants() {
            return getRuleContext(EnumConstantsContext.class, 0);
        }

        public TerminalNode COMMA() {
            return getToken(JavaLanguageParser.COMMA, 0);
        }

        public EnumBodyDeclarationsContext enumBodyDeclarations() {
            return getRuleContext(EnumBodyDeclarationsContext.class, 0);
        }

        public EnumBodyContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_enumBody;
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitEnumBody(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final EnumBodyContext enumBody() throws RecognitionException {
        EnumBodyContext _localctx = new EnumBodyContext(_ctx, getState());
        enterRule(_localctx, 48, RULE_enumBody);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(488);
                match(LCURLY);
                setState(490);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == IDENT || (((_la - 170)) & ~0x3f) == 0 && ((1L << (_la - 170)) & 3986803392513L) != 0) {
                    {
                        setState(489);
                        enumConstants();
                    }
                }
                setState(493);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == COMMA) {
                    {
                        setState(492);
                        match(COMMA);
                    }
                }
                setState(496);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == SEMI) {
                    {
                        setState(495);
                        enumBodyDeclarations();
                    }
                }
                setState(498);
                match(RCURLY);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class EnumConstantsContext extends ParserRuleContext {

        public List<EnumConstantContext> enumConstant() {
            return getRuleContexts(EnumConstantContext.class);
        }

        public EnumConstantContext enumConstant(int i) {
            return getRuleContext(EnumConstantContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(JavaLanguageParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(JavaLanguageParser.COMMA, i);
        }

        public EnumConstantsContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_enumConstants;
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitEnumConstants(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final EnumConstantsContext enumConstants() throws RecognitionException {
        EnumConstantsContext _localctx = new EnumConstantsContext(_ctx, getState());
        enterRule(_localctx, 50, RULE_enumConstants);
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(500);
                enumConstant();
                setState(505);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input, 33, _ctx);
                while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                    if (_alt == 1) {
                        {
                            {
                                setState(501);
                                match(COMMA);
                                setState(502);
                                enumConstant();
                            }
                        }
                    }
                    setState(507);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 33, _ctx);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class EnumConstantContext extends ParserRuleContext {

        public AnnotationsContext annotations() {
            return getRuleContext(AnnotationsContext.class, 0);
        }

        public IdContext id() {
            return getRuleContext(IdContext.class, 0);
        }

        public ArgumentsContext arguments() {
            return getRuleContext(ArgumentsContext.class, 0);
        }

        public ClassBodyContext classBody() {
            return getRuleContext(ClassBodyContext.class, 0);
        }

        public EnumConstantContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_enumConstant;
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitEnumConstant(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final EnumConstantContext enumConstant() throws RecognitionException {
        EnumConstantContext _localctx = new EnumConstantContext(_ctx, getState());
        enterRule(_localctx, 52, RULE_enumConstant);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(508);
                annotations(true);
                setState(509);
                id();
                setState(511);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == LPAREN) {
                    {
                        setState(510);
                        arguments();
                    }
                }
                setState(514);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == LCURLY) {
                    {
                        setState(513);
                        classBody();
                    }
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class EnumBodyDeclarationsContext extends ParserRuleContext {

        public TerminalNode SEMI() {
            return getToken(JavaLanguageParser.SEMI, 0);
        }

        public List<ClassBodyDeclarationContext> classBodyDeclaration() {
            return getRuleContexts(ClassBodyDeclarationContext.class);
        }

        public ClassBodyDeclarationContext classBodyDeclaration(int i) {
            return getRuleContext(ClassBodyDeclarationContext.class, i);
        }

        public EnumBodyDeclarationsContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_enumBodyDeclarations;
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitEnumBodyDeclarations(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final EnumBodyDeclarationsContext enumBodyDeclarations() throws RecognitionException {
        EnumBodyDeclarationsContext _localctx = new EnumBodyDeclarationsContext(_ctx, getState());
        enterRule(_localctx, 54, RULE_enumBodyDeclarations);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(516);
                match(SEMI);
                setState(520);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (((_la) & ~0x3f) == 0 && ((1L << _la) & -1729906174200905728L) != 0 || (((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 9007200328483263L) != 0 || (((_la - 153)) & ~0x3f) == 0 && ((1L << (_la - 153)) & 522558294263463937L) != 0) {
                    {
                        {
                            setState(517);
                            classBodyDeclaration();
                        }
                    }
                    setState(522);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class InterfaceDeclarationContext extends ParserRuleContext {

        public List<ModifierContext> mods;

        public TerminalNode LITERAL_INTERFACE() {
            return getToken(JavaLanguageParser.LITERAL_INTERFACE, 0);
        }

        public IdContext id() {
            return getRuleContext(IdContext.class, 0);
        }

        public InterfaceBodyContext interfaceBody() {
            return getRuleContext(InterfaceBodyContext.class, 0);
        }

        public TypeParametersContext typeParameters() {
            return getRuleContext(TypeParametersContext.class, 0);
        }

        public InterfaceExtendsContext interfaceExtends() {
            return getRuleContext(InterfaceExtendsContext.class, 0);
        }

        public PermittedSubclassesAndInterfacesContext permittedSubclassesAndInterfaces() {
            return getRuleContext(PermittedSubclassesAndInterfacesContext.class, 0);
        }

        public InterfaceDeclarationContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public InterfaceDeclarationContext(ParserRuleContext parent, int invokingState, List<ModifierContext> mods) {
            super(parent, invokingState);
            this.mods = mods;
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_interfaceDeclaration;
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitInterfaceDeclaration(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final InterfaceDeclarationContext interfaceDeclaration(List<ModifierContext> mods) throws RecognitionException {
        InterfaceDeclarationContext _localctx = new InterfaceDeclarationContext(_ctx, getState(), mods);
        enterRule(_localctx, 56, RULE_interfaceDeclaration);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(523);
                match(LITERAL_INTERFACE);
                setState(524);
                id();
                setState(526);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == LT) {
                    {
                        setState(525);
                        typeParameters();
                    }
                }
                setState(529);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == EXTENDS_CLAUSE) {
                    {
                        setState(528);
                        interfaceExtends();
                    }
                }
                setState(532);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == LITERAL_PERMITS) {
                    {
                        setState(531);
                        permittedSubclassesAndInterfaces();
                    }
                }
                setState(534);
                interfaceBody();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class InterfaceExtendsContext extends ParserRuleContext {

        public TerminalNode EXTENDS_CLAUSE() {
            return getToken(JavaLanguageParser.EXTENDS_CLAUSE, 0);
        }

        public TypeListContext typeList() {
            return getRuleContext(TypeListContext.class, 0);
        }

        public InterfaceExtendsContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_interfaceExtends;
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitInterfaceExtends(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final InterfaceExtendsContext interfaceExtends() throws RecognitionException {
        InterfaceExtendsContext _localctx = new InterfaceExtendsContext(_ctx, getState());
        enterRule(_localctx, 58, RULE_interfaceExtends);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(536);
                match(EXTENDS_CLAUSE);
                setState(537);
                typeList();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class ClassBodyContext extends ParserRuleContext {

        public TerminalNode LCURLY() {
            return getToken(JavaLanguageParser.LCURLY, 0);
        }

        public TerminalNode RCURLY() {
            return getToken(JavaLanguageParser.RCURLY, 0);
        }

        public List<ClassBodyDeclarationContext> classBodyDeclaration() {
            return getRuleContexts(ClassBodyDeclarationContext.class);
        }

        public ClassBodyDeclarationContext classBodyDeclaration(int i) {
            return getRuleContext(ClassBodyDeclarationContext.class, i);
        }

        public ClassBodyContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_classBody;
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitClassBody(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final ClassBodyContext classBody() throws RecognitionException {
        ClassBodyContext _localctx = new ClassBodyContext(_ctx, getState());
        enterRule(_localctx, 60, RULE_classBody);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(539);
                match(LCURLY);
                setState(543);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (((_la) & ~0x3f) == 0 && ((1L << _la) & -1729906174200905728L) != 0 || (((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 9007200328483263L) != 0 || (((_la - 153)) & ~0x3f) == 0 && ((1L << (_la - 153)) & 522558294263463937L) != 0) {
                    {
                        {
                            setState(540);
                            classBodyDeclaration();
                        }
                    }
                    setState(545);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
                setState(546);
                match(RCURLY);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class InterfaceBodyContext extends ParserRuleContext {

        public TerminalNode LCURLY() {
            return getToken(JavaLanguageParser.LCURLY, 0);
        }

        public TerminalNode RCURLY() {
            return getToken(JavaLanguageParser.RCURLY, 0);
        }

        public List<InterfaceBodyDeclarationContext> interfaceBodyDeclaration() {
            return getRuleContexts(InterfaceBodyDeclarationContext.class);
        }

        public InterfaceBodyDeclarationContext interfaceBodyDeclaration(int i) {
            return getRuleContext(InterfaceBodyDeclarationContext.class, i);
        }

        public InterfaceBodyContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_interfaceBody;
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitInterfaceBody(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final InterfaceBodyContext interfaceBody() throws RecognitionException {
        InterfaceBodyContext _localctx = new InterfaceBodyContext(_ctx, getState());
        enterRule(_localctx, 62, RULE_interfaceBody);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(548);
                match(LCURLY);
                setState(552);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (((_la) & ~0x3f) == 0 && ((1L << _la) & -1729906174200905728L) != 0 || (((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 9007200328483007L) != 0 || (((_la - 153)) & ~0x3f) == 0 && ((1L << (_la - 153)) & 522558294263463937L) != 0) {
                    {
                        {
                            setState(549);
                            interfaceBodyDeclaration();
                        }
                    }
                    setState(554);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
                setState(555);
                match(RCURLY);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class ClassBodyDeclarationContext extends ParserRuleContext {

        public ClassBodyDeclarationContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_classBodyDeclaration;
        }

        public ClassBodyDeclarationContext() {
        }

        public void copyFrom(ClassBodyDeclarationContext ctx) {
            super.copyFrom(ctx);
        }
    }

    public static class ClassBlockContext extends ClassBodyDeclarationContext {

        public BlockContext block() {
            return getRuleContext(BlockContext.class, 0);
        }

        public TerminalNode LITERAL_STATIC() {
            return getToken(JavaLanguageParser.LITERAL_STATIC, 0);
        }

        public ClassBlockContext(ClassBodyDeclarationContext ctx) {
            copyFrom(ctx);
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitClassBlock(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public static class ClassDefContext extends ClassBodyDeclarationContext {

        public ModifierContext modifier;

        public List<ModifierContext> mods = new ArrayList<ModifierContext>();

        public MemberDeclarationContext memberDeclaration() {
            return getRuleContext(MemberDeclarationContext.class, 0);
        }

        public List<ModifierContext> modifier() {
            return getRuleContexts(ModifierContext.class);
        }

        public ModifierContext modifier(int i) {
            return getRuleContext(ModifierContext.class, i);
        }

        public ClassDefContext(ClassBodyDeclarationContext ctx) {
            copyFrom(ctx);
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitClassDef(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public static class EmptyClassContext extends ClassBodyDeclarationContext {

        public TerminalNode SEMI() {
            return getToken(JavaLanguageParser.SEMI, 0);
        }

        public EmptyClassContext(ClassBodyDeclarationContext ctx) {
            copyFrom(ctx);
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitEmptyClass(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final ClassBodyDeclarationContext classBodyDeclaration() throws RecognitionException {
        ClassBodyDeclarationContext _localctx = new ClassBodyDeclarationContext(_ctx, getState());
        enterRule(_localctx, 64, RULE_classBodyDeclaration);
        int _la;
        try {
            int _alt;
            setState(569);
            _errHandler.sync(this);
            switch(getInterpreter().adaptivePredict(_input, 44, _ctx)) {
                case 1:
                    _localctx = new EmptyClassContext(_localctx);
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(557);
                        match(SEMI);
                    }
                    break;
                case 2:
                    _localctx = new ClassBlockContext(_localctx);
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(559);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == LITERAL_STATIC) {
                            {
                                setState(558);
                                match(LITERAL_STATIC);
                            }
                        }
                        setState(561);
                        block();
                    }
                    break;
                case 3:
                    _localctx = new ClassDefContext(_localctx);
                    enterOuterAlt(_localctx, 3);
                    {
                        setState(565);
                        _errHandler.sync(this);
                        _alt = getInterpreter().adaptivePredict(_input, 43, _ctx);
                        while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                            if (_alt == 1) {
                                {
                                    {
                                        setState(562);
                                        ((ClassDefContext) _localctx).modifier = modifier();
                                        ((ClassDefContext) _localctx).mods.add(((ClassDefContext) _localctx).modifier);
                                    }
                                }
                            }
                            setState(567);
                            _errHandler.sync(this);
                            _alt = getInterpreter().adaptivePredict(_input, 43, _ctx);
                        }
                        setState(568);
                        memberDeclaration(((ClassDefContext) _localctx).mods);
                    }
                    break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class MemberDeclarationContext extends ParserRuleContext {

        public List<ModifierContext> mods;

        public RecordDeclarationContext recordDeclaration() {
            return getRuleContext(RecordDeclarationContext.class, 0);
        }

        public MethodDeclarationContext methodDeclaration() {
            return getRuleContext(MethodDeclarationContext.class, 0);
        }

        public FieldDeclarationContext fieldDeclaration() {
            return getRuleContext(FieldDeclarationContext.class, 0);
        }

        public ConstructorDeclarationContext constructorDeclaration() {
            return getRuleContext(ConstructorDeclarationContext.class, 0);
        }

        public InterfaceDeclarationContext interfaceDeclaration() {
            return getRuleContext(InterfaceDeclarationContext.class, 0);
        }

        public AnnotationTypeDeclarationContext annotationTypeDeclaration() {
            return getRuleContext(AnnotationTypeDeclarationContext.class, 0);
        }

        public ClassDeclarationContext classDeclaration() {
            return getRuleContext(ClassDeclarationContext.class, 0);
        }

        public EnumDeclarationContext enumDeclaration() {
            return getRuleContext(EnumDeclarationContext.class, 0);
        }

        public MemberDeclarationContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public MemberDeclarationContext(ParserRuleContext parent, int invokingState, List<ModifierContext> mods) {
            super(parent, invokingState);
            this.mods = mods;
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_memberDeclaration;
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitMemberDeclaration(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final MemberDeclarationContext memberDeclaration(List<ModifierContext> mods) throws RecognitionException {
        MemberDeclarationContext _localctx = new MemberDeclarationContext(_ctx, getState(), mods);
        enterRule(_localctx, 66, RULE_memberDeclaration);
        try {
            setState(579);
            _errHandler.sync(this);
            switch(getInterpreter().adaptivePredict(_input, 45, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(571);
                        recordDeclaration(mods);
                    }
                    break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(572);
                        methodDeclaration(mods);
                    }
                    break;
                case 3:
                    enterOuterAlt(_localctx, 3);
                    {
                        setState(573);
                        fieldDeclaration(mods);
                    }
                    break;
                case 4:
                    enterOuterAlt(_localctx, 4);
                    {
                        setState(574);
                        constructorDeclaration(mods);
                    }
                    break;
                case 5:
                    enterOuterAlt(_localctx, 5);
                    {
                        setState(575);
                        interfaceDeclaration(mods);
                    }
                    break;
                case 6:
                    enterOuterAlt(_localctx, 6);
                    {
                        setState(576);
                        annotationTypeDeclaration(mods);
                    }
                    break;
                case 7:
                    enterOuterAlt(_localctx, 7);
                    {
                        setState(577);
                        classDeclaration(mods);
                    }
                    break;
                case 8:
                    enterOuterAlt(_localctx, 8);
                    {
                        setState(578);
                        enumDeclaration(mods);
                    }
                    break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class MethodDeclarationContext extends ParserRuleContext {

        public List<ModifierContext> mods;

        public TypeParametersContext typeParams;

        public TypeTypeContext type;

        public ArrayDeclaratorContext arrayDeclarator;

        public List<ArrayDeclaratorContext> cStyleArrDec = new ArrayList<ArrayDeclaratorContext>();

        public IdContext id() {
            return getRuleContext(IdContext.class, 0);
        }

        public FormalParametersContext formalParameters() {
            return getRuleContext(FormalParametersContext.class, 0);
        }

        public MethodBodyContext methodBody() {
            return getRuleContext(MethodBodyContext.class, 0);
        }

        public TypeTypeContext typeType() {
            return getRuleContext(TypeTypeContext.class, 0);
        }

        public ThrowsListContext throwsList() {
            return getRuleContext(ThrowsListContext.class, 0);
        }

        public TypeParametersContext typeParameters() {
            return getRuleContext(TypeParametersContext.class, 0);
        }

        public List<ArrayDeclaratorContext> arrayDeclarator() {
            return getRuleContexts(ArrayDeclaratorContext.class);
        }

        public ArrayDeclaratorContext arrayDeclarator(int i) {
            return getRuleContext(ArrayDeclaratorContext.class, i);
        }

        public MethodDeclarationContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public MethodDeclarationContext(ParserRuleContext parent, int invokingState, List<ModifierContext> mods) {
            super(parent, invokingState);
            this.mods = mods;
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_methodDeclaration;
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitMethodDeclaration(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final MethodDeclarationContext methodDeclaration(List<ModifierContext> mods) throws RecognitionException {
        MethodDeclarationContext _localctx = new MethodDeclarationContext(_ctx, getState(), mods);
        enterRule(_localctx, 68, RULE_methodDeclaration);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(582);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == LT) {
                    {
                        setState(581);
                        ((MethodDeclarationContext) _localctx).typeParams = typeParameters();
                    }
                }
                setState(584);
                ((MethodDeclarationContext) _localctx).type = typeType(true);
                setState(585);
                id();
                setState(586);
                formalParameters();
                {
                    setState(590);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    while (_la == LBRACK || _la == AT) {
                        {
                            {
                                setState(587);
                                ((MethodDeclarationContext) _localctx).arrayDeclarator = arrayDeclarator();
                                ((MethodDeclarationContext) _localctx).cStyleArrDec.add(((MethodDeclarationContext) _localctx).arrayDeclarator);
                            }
                        }
                        setState(592);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                    }
                }
                setState(594);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == LITERAL_THROWS) {
                    {
                        setState(593);
                        throwsList();
                    }
                }
                setState(596);
                methodBody();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class MethodBodyContext extends ParserRuleContext {

        public BlockContext block() {
            return getRuleContext(BlockContext.class, 0);
        }

        public TerminalNode SEMI() {
            return getToken(JavaLanguageParser.SEMI, 0);
        }

        public MethodBodyContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_methodBody;
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitMethodBody(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final MethodBodyContext methodBody() throws RecognitionException {
        MethodBodyContext _localctx = new MethodBodyContext(_ctx, getState());
        enterRule(_localctx, 70, RULE_methodBody);
        try {
            setState(600);
            _errHandler.sync(this);
            switch(_input.LA(1)) {
                case LCURLY:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(598);
                        block();
                    }
                    break;
                case SEMI:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(599);
                        match(SEMI);
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class ThrowsListContext extends ParserRuleContext {

        public TerminalNode LITERAL_THROWS() {
            return getToken(JavaLanguageParser.LITERAL_THROWS, 0);
        }

        public QualifiedNameListContext qualifiedNameList() {
            return getRuleContext(QualifiedNameListContext.class, 0);
        }

        public ThrowsListContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_throwsList;
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitThrowsList(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final ThrowsListContext throwsList() throws RecognitionException {
        ThrowsListContext _localctx = new ThrowsListContext(_ctx, getState());
        enterRule(_localctx, 72, RULE_throwsList);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(602);
                match(LITERAL_THROWS);
                setState(603);
                qualifiedNameList();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class ConstructorDeclarationContext extends ParserRuleContext {

        public List<ModifierContext> mods;

        public ConstructorBlockContext constructorBody;

        public IdContext id() {
            return getRuleContext(IdContext.class, 0);
        }

        public FormalParametersContext formalParameters() {
            return getRuleContext(FormalParametersContext.class, 0);
        }

        public ConstructorBlockContext constructorBlock() {
            return getRuleContext(ConstructorBlockContext.class, 0);
        }

        public TypeParametersContext typeParameters() {
            return getRuleContext(TypeParametersContext.class, 0);
        }

        public ThrowsListContext throwsList() {
            return getRuleContext(ThrowsListContext.class, 0);
        }

        public ConstructorDeclarationContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public ConstructorDeclarationContext(ParserRuleContext parent, int invokingState, List<ModifierContext> mods) {
            super(parent, invokingState);
            this.mods = mods;
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_constructorDeclaration;
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitConstructorDeclaration(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final ConstructorDeclarationContext constructorDeclaration(List<ModifierContext> mods) throws RecognitionException {
        ConstructorDeclarationContext _localctx = new ConstructorDeclarationContext(_ctx, getState(), mods);
        enterRule(_localctx, 74, RULE_constructorDeclaration);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(606);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == LT) {
                    {
                        setState(605);
                        typeParameters();
                    }
                }
                setState(608);
                id();
                setState(609);
                formalParameters();
                setState(611);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == LITERAL_THROWS) {
                    {
                        setState(610);
                        throwsList();
                    }
                }
                setState(613);
                ((ConstructorDeclarationContext) _localctx).constructorBody = constructorBlock();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class FieldDeclarationContext extends ParserRuleContext {

        public List<ModifierContext> mods;

        public TypeTypeContext type;

        public VariableDeclaratorsContext variableDeclarators() {
            return getRuleContext(VariableDeclaratorsContext.class, 0);
        }

        public TerminalNode SEMI() {
            return getToken(JavaLanguageParser.SEMI, 0);
        }

        public TypeTypeContext typeType() {
            return getRuleContext(TypeTypeContext.class, 0);
        }

        public FieldDeclarationContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public FieldDeclarationContext(ParserRuleContext parent, int invokingState, List<ModifierContext> mods) {
            super(parent, invokingState);
            this.mods = mods;
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_fieldDeclaration;
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitFieldDeclaration(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final FieldDeclarationContext fieldDeclaration(List<ModifierContext> mods) throws RecognitionException {
        FieldDeclarationContext _localctx = new FieldDeclarationContext(_ctx, getState(), mods);
        enterRule(_localctx, 76, RULE_fieldDeclaration);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(615);
                ((FieldDeclarationContext) _localctx).type = typeType(true);
                setState(616);
                variableDeclarators(_localctx.mods, _localctx.type);
                setState(617);
                match(SEMI);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class InterfaceBodyDeclarationContext extends ParserRuleContext {

        public ModifierContext modifier;

        public List<ModifierContext> mods = new ArrayList<ModifierContext>();

        public InterfaceMemberDeclarationContext interfaceMemberDeclaration() {
            return getRuleContext(InterfaceMemberDeclarationContext.class, 0);
        }

        public List<ModifierContext> modifier() {
            return getRuleContexts(ModifierContext.class);
        }

        public ModifierContext modifier(int i) {
            return getRuleContext(ModifierContext.class, i);
        }

        public TerminalNode SEMI() {
            return getToken(JavaLanguageParser.SEMI, 0);
        }

        public InterfaceBodyDeclarationContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_interfaceBodyDeclaration;
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitInterfaceBodyDeclaration(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final InterfaceBodyDeclarationContext interfaceBodyDeclaration() throws RecognitionException {
        InterfaceBodyDeclarationContext _localctx = new InterfaceBodyDeclarationContext(_ctx, getState());
        enterRule(_localctx, 78, RULE_interfaceBodyDeclaration);
        try {
            int _alt;
            setState(627);
            _errHandler.sync(this);
            switch(_input.LA(1)) {
                case FINAL:
                case ABSTRACT:
                case STRICTFP:
                case LITERAL_VOID:
                case LITERAL_BOOLEAN:
                case LITERAL_BYTE:
                case LITERAL_CHAR:
                case LITERAL_SHORT:
                case LITERAL_INT:
                case LITERAL_FLOAT:
                case LITERAL_LONG:
                case LITERAL_DOUBLE:
                case IDENT:
                case LITERAL_PRIVATE:
                case LITERAL_PUBLIC:
                case LITERAL_PROTECTED:
                case LITERAL_STATIC:
                case LITERAL_TRANSIENT:
                case LITERAL_NATIVE:
                case LITERAL_SYNCHRONIZED:
                case LITERAL_VOLATILE:
                case LITERAL_CLASS:
                case LITERAL_INTERFACE:
                case LITERAL_DEFAULT:
                case LT:
                case ENUM:
                case AT:
                case LITERAL_RECORD:
                case LITERAL_YIELD:
                case LITERAL_NON_SEALED:
                case LITERAL_SEALED:
                case LITERAL_PERMITS:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(622);
                        _errHandler.sync(this);
                        _alt = getInterpreter().adaptivePredict(_input, 52, _ctx);
                        while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                            if (_alt == 1) {
                                {
                                    {
                                        setState(619);
                                        ((InterfaceBodyDeclarationContext) _localctx).modifier = modifier();
                                        ((InterfaceBodyDeclarationContext) _localctx).mods.add(((InterfaceBodyDeclarationContext) _localctx).modifier);
                                    }
                                }
                            }
                            setState(624);
                            _errHandler.sync(this);
                            _alt = getInterpreter().adaptivePredict(_input, 52, _ctx);
                        }
                        setState(625);
                        interfaceMemberDeclaration(_localctx.mods);
                    }
                    break;
                case SEMI:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(626);
                        match(SEMI);
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class InterfaceMemberDeclarationContext extends ParserRuleContext {

        public List<ModifierContext> mods;

        public FieldDeclarationContext fieldDeclaration() {
            return getRuleContext(FieldDeclarationContext.class, 0);
        }

        public RecordDeclarationContext recordDeclaration() {
            return getRuleContext(RecordDeclarationContext.class, 0);
        }

        public InterfaceMethodDeclarationContext interfaceMethodDeclaration() {
            return getRuleContext(InterfaceMethodDeclarationContext.class, 0);
        }

        public InterfaceDeclarationContext interfaceDeclaration() {
            return getRuleContext(InterfaceDeclarationContext.class, 0);
        }

        public AnnotationTypeDeclarationContext annotationTypeDeclaration() {
            return getRuleContext(AnnotationTypeDeclarationContext.class, 0);
        }

        public ClassDeclarationContext classDeclaration() {
            return getRuleContext(ClassDeclarationContext.class, 0);
        }

        public EnumDeclarationContext enumDeclaration() {
            return getRuleContext(EnumDeclarationContext.class, 0);
        }

        public InterfaceMemberDeclarationContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public InterfaceMemberDeclarationContext(ParserRuleContext parent, int invokingState, List<ModifierContext> mods) {
            super(parent, invokingState);
            this.mods = mods;
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_interfaceMemberDeclaration;
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitInterfaceMemberDeclaration(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final InterfaceMemberDeclarationContext interfaceMemberDeclaration(List<ModifierContext> mods) throws RecognitionException {
        InterfaceMemberDeclarationContext _localctx = new InterfaceMemberDeclarationContext(_ctx, getState(), mods);
        enterRule(_localctx, 80, RULE_interfaceMemberDeclaration);
        try {
            setState(636);
            _errHandler.sync(this);
            switch(getInterpreter().adaptivePredict(_input, 54, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(629);
                        fieldDeclaration(mods);
                    }
                    break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(630);
                        recordDeclaration(mods);
                    }
                    break;
                case 3:
                    enterOuterAlt(_localctx, 3);
                    {
                        setState(631);
                        interfaceMethodDeclaration(mods);
                    }
                    break;
                case 4:
                    enterOuterAlt(_localctx, 4);
                    {
                        setState(632);
                        interfaceDeclaration(mods);
                    }
                    break;
                case 5:
                    enterOuterAlt(_localctx, 5);
                    {
                        setState(633);
                        annotationTypeDeclaration(mods);
                    }
                    break;
                case 6:
                    enterOuterAlt(_localctx, 6);
                    {
                        setState(634);
                        classDeclaration(mods);
                    }
                    break;
                case 7:
                    enterOuterAlt(_localctx, 7);
                    {
                        setState(635);
                        enumDeclaration(mods);
                    }
                    break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class InterfaceMethodDeclarationContext extends ParserRuleContext {

        public List<ModifierContext> mods;

        public TypeTypeContext type;

        public ArrayDeclaratorContext arrayDeclarator;

        public List<ArrayDeclaratorContext> cStyleArrDec = new ArrayList<ArrayDeclaratorContext>();

        public IdContext id() {
            return getRuleContext(IdContext.class, 0);
        }

        public FormalParametersContext formalParameters() {
            return getRuleContext(FormalParametersContext.class, 0);
        }

        public MethodBodyContext methodBody() {
            return getRuleContext(MethodBodyContext.class, 0);
        }

        public TypeTypeContext typeType() {
            return getRuleContext(TypeTypeContext.class, 0);
        }

        public TypeParametersContext typeParameters() {
            return getRuleContext(TypeParametersContext.class, 0);
        }

        public ThrowsListContext throwsList() {
            return getRuleContext(ThrowsListContext.class, 0);
        }

        public List<ArrayDeclaratorContext> arrayDeclarator() {
            return getRuleContexts(ArrayDeclaratorContext.class);
        }

        public ArrayDeclaratorContext arrayDeclarator(int i) {
            return getRuleContext(ArrayDeclaratorContext.class, i);
        }

        public InterfaceMethodDeclarationContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public InterfaceMethodDeclarationContext(ParserRuleContext parent, int invokingState, List<ModifierContext> mods) {
            super(parent, invokingState);
            this.mods = mods;
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_interfaceMethodDeclaration;
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitInterfaceMethodDeclaration(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final InterfaceMethodDeclarationContext interfaceMethodDeclaration(List<ModifierContext> mods) throws RecognitionException {
        InterfaceMethodDeclarationContext _localctx = new InterfaceMethodDeclarationContext(_ctx, getState(), mods);
        enterRule(_localctx, 82, RULE_interfaceMethodDeclaration);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(639);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == LT) {
                    {
                        setState(638);
                        typeParameters();
                    }
                }
                setState(641);
                ((InterfaceMethodDeclarationContext) _localctx).type = typeType(true);
                setState(642);
                id();
                setState(643);
                formalParameters();
                setState(647);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == LBRACK || _la == AT) {
                    {
                        {
                            setState(644);
                            ((InterfaceMethodDeclarationContext) _localctx).arrayDeclarator = arrayDeclarator();
                            ((InterfaceMethodDeclarationContext) _localctx).cStyleArrDec.add(((InterfaceMethodDeclarationContext) _localctx).arrayDeclarator);
                        }
                    }
                    setState(649);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
                setState(651);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == LITERAL_THROWS) {
                    {
                        setState(650);
                        throwsList();
                    }
                }
                setState(653);
                methodBody();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class VariableDeclaratorsContext extends ParserRuleContext {

        public List<ModifierContext> mods;

        public TypeTypeContext type;

        public List<VariableDeclaratorContext> variableDeclarator() {
            return getRuleContexts(VariableDeclaratorContext.class);
        }

        public VariableDeclaratorContext variableDeclarator(int i) {
            return getRuleContext(VariableDeclaratorContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(JavaLanguageParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(JavaLanguageParser.COMMA, i);
        }

        public VariableDeclaratorsContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public VariableDeclaratorsContext(ParserRuleContext parent, int invokingState, List<ModifierContext> mods, TypeTypeContext type) {
            super(parent, invokingState);
            this.mods = mods;
            this.type = type;
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_variableDeclarators;
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitVariableDeclarators(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final VariableDeclaratorsContext variableDeclarators(List<ModifierContext> mods, TypeTypeContext type) throws RecognitionException {
        VariableDeclaratorsContext _localctx = new VariableDeclaratorsContext(_ctx, getState(), mods, type);
        enterRule(_localctx, 84, RULE_variableDeclarators);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(655);
                variableDeclarator(mods, type);
                setState(660);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == COMMA) {
                    {
                        {
                            setState(656);
                            match(COMMA);
                            setState(657);
                            variableDeclarator(mods, type);
                        }
                    }
                    setState(662);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class VariableDeclaratorContext extends ParserRuleContext {

        public List<ModifierContext> mods;

        public TypeTypeContext type;

        public IdContext id() {
            return getRuleContext(IdContext.class, 0);
        }

        public List<ArrayDeclaratorContext> arrayDeclarator() {
            return getRuleContexts(ArrayDeclaratorContext.class);
        }

        public ArrayDeclaratorContext arrayDeclarator(int i) {
            return getRuleContext(ArrayDeclaratorContext.class, i);
        }

        public TerminalNode ASSIGN() {
            return getToken(JavaLanguageParser.ASSIGN, 0);
        }

        public VariableInitializerContext variableInitializer() {
            return getRuleContext(VariableInitializerContext.class, 0);
        }

        public VariableDeclaratorContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public VariableDeclaratorContext(ParserRuleContext parent, int invokingState, List<ModifierContext> mods, TypeTypeContext type) {
            super(parent, invokingState);
            this.mods = mods;
            this.type = type;
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_variableDeclarator;
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitVariableDeclarator(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final VariableDeclaratorContext variableDeclarator(List<ModifierContext> mods, TypeTypeContext type) throws RecognitionException {
        VariableDeclaratorContext _localctx = new VariableDeclaratorContext(_ctx, getState(), mods, type);
        enterRule(_localctx, 86, RULE_variableDeclarator);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(663);
                id();
                setState(667);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == LBRACK || _la == AT) {
                    {
                        {
                            setState(664);
                            arrayDeclarator();
                        }
                    }
                    setState(669);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
                setState(672);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == ASSIGN) {
                    {
                        setState(670);
                        match(ASSIGN);
                        setState(671);
                        variableInitializer();
                    }
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class VariableDeclaratorIdContext extends ParserRuleContext {

        public List<VariableModifierContext> mods;

        public ParserRuleContext type;

        public TerminalNode LITERAL_THIS() {
            return getToken(JavaLanguageParser.LITERAL_THIS, 0);
        }

        public List<ArrayDeclaratorContext> arrayDeclarator() {
            return getRuleContexts(ArrayDeclaratorContext.class);
        }

        public ArrayDeclaratorContext arrayDeclarator(int i) {
            return getRuleContext(ArrayDeclaratorContext.class, i);
        }

        public QualifiedNameContext qualifiedName() {
            return getRuleContext(QualifiedNameContext.class, 0);
        }

        public TerminalNode DOT() {
            return getToken(JavaLanguageParser.DOT, 0);
        }

        public VariableDeclaratorIdContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public VariableDeclaratorIdContext(ParserRuleContext parent, int invokingState, List<VariableModifierContext> mods, ParserRuleContext type) {
            super(parent, invokingState);
            this.mods = mods;
            this.type = type;
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_variableDeclaratorId;
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitVariableDeclaratorId(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final VariableDeclaratorIdContext variableDeclaratorId(List<VariableModifierContext> mods, ParserRuleContext type) throws RecognitionException {
        VariableDeclaratorIdContext _localctx = new VariableDeclaratorIdContext(_ctx, getState(), mods, type);
        enterRule(_localctx, 88, RULE_variableDeclaratorId);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(680);
                _errHandler.sync(this);
                switch(_input.LA(1)) {
                    case LITERAL_THIS:
                        {
                            setState(674);
                            match(LITERAL_THIS);
                        }
                        break;
                    case IDENT:
                    case LITERAL_RECORD:
                    case LITERAL_YIELD:
                    case LITERAL_NON_SEALED:
                    case LITERAL_SEALED:
                    case LITERAL_PERMITS:
                        {
                            {
                                setState(675);
                                qualifiedName();
                                setState(678);
                                _errHandler.sync(this);
                                _la = _input.LA(1);
                                if (_la == DOT) {
                                    {
                                        setState(676);
                                        match(DOT);
                                        setState(677);
                                        match(LITERAL_THIS);
                                    }
                                }
                            }
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
                setState(685);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == LBRACK || _la == AT) {
                    {
                        {
                            setState(682);
                            arrayDeclarator();
                        }
                    }
                    setState(687);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class VariableInitializerContext extends ParserRuleContext {

        public ArrayInitializerContext arrayInitializer() {
            return getRuleContext(ArrayInitializerContext.class, 0);
        }

        public ExpressionContext expression() {
            return getRuleContext(ExpressionContext.class, 0);
        }

        public VariableInitializerContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_variableInitializer;
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitVariableInitializer(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final VariableInitializerContext variableInitializer() throws RecognitionException {
        VariableInitializerContext _localctx = new VariableInitializerContext(_ctx, getState());
        enterRule(_localctx, 90, RULE_variableInitializer);
        try {
            setState(690);
            _errHandler.sync(this);
            switch(_input.LA(1)) {
                case LCURLY:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(688);
                        arrayInitializer();
                    }
                    break;
                case LITERAL_VOID:
                case LITERAL_BOOLEAN:
                case LITERAL_BYTE:
                case LITERAL_CHAR:
                case LITERAL_SHORT:
                case LITERAL_INT:
                case LITERAL_FLOAT:
                case LITERAL_LONG:
                case LITERAL_DOUBLE:
                case IDENT:
                case LPAREN:
                case LITERAL_THIS:
                case LITERAL_SUPER:
                case LITERAL_SWITCH:
                case PLUS:
                case MINUS:
                case INC:
                case DEC:
                case BNOT:
                case LNOT:
                case LITERAL_TRUE:
                case LITERAL_FALSE:
                case LITERAL_NULL:
                case LITERAL_NEW:
                case CHAR_LITERAL:
                case STRING_LITERAL:
                case AT:
                case FLOAT_LITERAL:
                case DOUBLE_LITERAL:
                case HEX_FLOAT_LITERAL:
                case HEX_DOUBLE_LITERAL:
                case LITERAL_RECORD:
                case TEXT_BLOCK_LITERAL_BEGIN:
                case LITERAL_YIELD:
                case LITERAL_NON_SEALED:
                case LITERAL_SEALED:
                case LITERAL_PERMITS:
                case DECIMAL_LITERAL_LONG:
                case DECIMAL_LITERAL:
                case HEX_LITERAL_LONG:
                case HEX_LITERAL:
                case OCT_LITERAL_LONG:
                case OCT_LITERAL:
                case BINARY_LITERAL_LONG:
                case BINARY_LITERAL:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(689);
                        expression();
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class ArrayInitializerContext extends ParserRuleContext {

        public TerminalNode LCURLY() {
            return getToken(JavaLanguageParser.LCURLY, 0);
        }

        public TerminalNode RCURLY() {
            return getToken(JavaLanguageParser.RCURLY, 0);
        }

        public List<VariableInitializerContext> variableInitializer() {
            return getRuleContexts(VariableInitializerContext.class);
        }

        public VariableInitializerContext variableInitializer(int i) {
            return getRuleContext(VariableInitializerContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(JavaLanguageParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(JavaLanguageParser.COMMA, i);
        }

        public ArrayInitializerContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_arrayInitializer;
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitArrayInitializer(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final ArrayInitializerContext arrayInitializer() throws RecognitionException {
        ArrayInitializerContext _localctx = new ArrayInitializerContext(_ctx, getState());
        enterRule(_localctx, 92, RULE_arrayInitializer);
        int _la;
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(692);
                match(LCURLY);
                setState(701);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if ((((_la - 49)) & ~0x3f) == 0 && ((1L << (_la - 49)) & 1101264847871L) != 0 || (((_la - 125)) & ~0x3f) == 0 && ((1L << (_la - 125)) & 35184372117491L) != 0 || (((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & 4279144719L) != 0) {
                    {
                        setState(693);
                        variableInitializer();
                        setState(698);
                        _errHandler.sync(this);
                        _alt = getInterpreter().adaptivePredict(_input, 65, _ctx);
                        while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                            if (_alt == 1) {
                                {
                                    {
                                        setState(694);
                                        match(COMMA);
                                        setState(695);
                                        variableInitializer();
                                    }
                                }
                            }
                            setState(700);
                            _errHandler.sync(this);
                            _alt = getInterpreter().adaptivePredict(_input, 65, _ctx);
                        }
                    }
                }
                setState(704);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == COMMA) {
                    {
                        setState(703);
                        match(COMMA);
                    }
                }
                setState(706);
                match(RCURLY);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class ClassOrInterfaceTypeContext extends ParserRuleContext {

        public boolean createImaginaryNode;

        public ClassOrInterfaceTypeExtendedContext classOrInterfaceTypeExtended;

        public List<ClassOrInterfaceTypeExtendedContext> extended = new ArrayList<ClassOrInterfaceTypeExtendedContext>();

        public AnnotationsContext annotations() {
            return getRuleContext(AnnotationsContext.class, 0);
        }

        public IdContext id() {
            return getRuleContext(IdContext.class, 0);
        }

        public TypeArgumentsContext typeArguments() {
            return getRuleContext(TypeArgumentsContext.class, 0);
        }

        public List<ClassOrInterfaceTypeExtendedContext> classOrInterfaceTypeExtended() {
            return getRuleContexts(ClassOrInterfaceTypeExtendedContext.class);
        }

        public ClassOrInterfaceTypeExtendedContext classOrInterfaceTypeExtended(int i) {
            return getRuleContext(ClassOrInterfaceTypeExtendedContext.class, i);
        }

        public ClassOrInterfaceTypeContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public ClassOrInterfaceTypeContext(ParserRuleContext parent, int invokingState, boolean createImaginaryNode) {
            super(parent, invokingState);
            this.createImaginaryNode = createImaginaryNode;
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_classOrInterfaceType;
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitClassOrInterfaceType(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final ClassOrInterfaceTypeContext classOrInterfaceType(boolean createImaginaryNode) throws RecognitionException {
        ClassOrInterfaceTypeContext _localctx = new ClassOrInterfaceTypeContext(_ctx, getState(), createImaginaryNode);
        enterRule(_localctx, 94, RULE_classOrInterfaceType);
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(708);
                annotations(false);
                setState(709);
                id();
                setState(711);
                _errHandler.sync(this);
                switch(getInterpreter().adaptivePredict(_input, 68, _ctx)) {
                    case 1:
                        {
                            setState(710);
                            typeArguments();
                        }
                        break;
                }
                setState(716);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input, 69, _ctx);
                while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                    if (_alt == 1) {
                        {
                            {
                                setState(713);
                                ((ClassOrInterfaceTypeContext) _localctx).classOrInterfaceTypeExtended = classOrInterfaceTypeExtended();
                                ((ClassOrInterfaceTypeContext) _localctx).extended.add(((ClassOrInterfaceTypeContext) _localctx).classOrInterfaceTypeExtended);
                            }
                        }
                    }
                    setState(718);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 69, _ctx);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class ClassOrInterfaceTypeExtendedContext extends ParserRuleContext {

        public TerminalNode DOT() {
            return getToken(JavaLanguageParser.DOT, 0);
        }

        public AnnotationsContext annotations() {
            return getRuleContext(AnnotationsContext.class, 0);
        }

        public IdContext id() {
            return getRuleContext(IdContext.class, 0);
        }

        public TypeArgumentsContext typeArguments() {
            return getRuleContext(TypeArgumentsContext.class, 0);
        }

        public ClassOrInterfaceTypeExtendedContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_classOrInterfaceTypeExtended;
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitClassOrInterfaceTypeExtended(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final ClassOrInterfaceTypeExtendedContext classOrInterfaceTypeExtended() throws RecognitionException {
        ClassOrInterfaceTypeExtendedContext _localctx = new ClassOrInterfaceTypeExtendedContext(_ctx, getState());
        enterRule(_localctx, 96, RULE_classOrInterfaceTypeExtended);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(719);
                match(DOT);
                setState(720);
                annotations(false);
                setState(721);
                id();
                setState(723);
                _errHandler.sync(this);
                switch(getInterpreter().adaptivePredict(_input, 70, _ctx)) {
                    case 1:
                        {
                            setState(722);
                            typeArguments();
                        }
                        break;
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class TypeArgumentContext extends ParserRuleContext {

        public TypeArgumentContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_typeArgument;
        }

        public TypeArgumentContext() {
        }

        public void copyFrom(TypeArgumentContext ctx) {
            super.copyFrom(ctx);
        }
    }

    public static class WildCardTypeArgumentContext extends TypeArgumentContext {

        public Token upperBound;

        public Token lowerBound;

        public AnnotationsContext annotations() {
            return getRuleContext(AnnotationsContext.class, 0);
        }

        public TerminalNode QUESTION() {
            return getToken(JavaLanguageParser.QUESTION, 0);
        }

        public TypeTypeContext typeType() {
            return getRuleContext(TypeTypeContext.class, 0);
        }

        public TerminalNode EXTENDS_CLAUSE() {
            return getToken(JavaLanguageParser.EXTENDS_CLAUSE, 0);
        }

        public TerminalNode LITERAL_SUPER() {
            return getToken(JavaLanguageParser.LITERAL_SUPER, 0);
        }

        public WildCardTypeArgumentContext(TypeArgumentContext ctx) {
            copyFrom(ctx);
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitWildCardTypeArgument(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public static class SimpleTypeArgumentContext extends TypeArgumentContext {

        public TypeTypeContext typeType() {
            return getRuleContext(TypeTypeContext.class, 0);
        }

        public SimpleTypeArgumentContext(TypeArgumentContext ctx) {
            copyFrom(ctx);
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitSimpleTypeArgument(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final TypeArgumentContext typeArgument() throws RecognitionException {
        TypeArgumentContext _localctx = new TypeArgumentContext(_ctx, getState());
        enterRule(_localctx, 98, RULE_typeArgument);
        int _la;
        try {
            setState(735);
            _errHandler.sync(this);
            switch(getInterpreter().adaptivePredict(_input, 73, _ctx)) {
                case 1:
                    _localctx = new SimpleTypeArgumentContext(_localctx);
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(725);
                        typeType(false);
                    }
                    break;
                case 2:
                    _localctx = new WildCardTypeArgumentContext(_localctx);
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(726);
                        annotations(false);
                        setState(727);
                        match(QUESTION);
                        setState(733);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == EXTENDS_CLAUSE || _la == LITERAL_SUPER) {
                            {
                                setState(730);
                                _errHandler.sync(this);
                                switch(_input.LA(1)) {
                                    case EXTENDS_CLAUSE:
                                        {
                                            setState(728);
                                            ((WildCardTypeArgumentContext) _localctx).upperBound = match(EXTENDS_CLAUSE);
                                        }
                                        break;
                                    case LITERAL_SUPER:
                                        {
                                            setState(729);
                                            ((WildCardTypeArgumentContext) _localctx).lowerBound = match(LITERAL_SUPER);
                                        }
                                        break;
                                    default:
                                        throw new NoViableAltException(this);
                                }
                                setState(732);
                                typeType(false);
                            }
                        }
                    }
                    break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class QualifiedNameListContext extends ParserRuleContext {

        public List<AnnotationsContext> annotations() {
            return getRuleContexts(AnnotationsContext.class);
        }

        public AnnotationsContext annotations(int i) {
            return getRuleContext(AnnotationsContext.class, i);
        }

        public List<QualifiedNameContext> qualifiedName() {
            return getRuleContexts(QualifiedNameContext.class);
        }

        public QualifiedNameContext qualifiedName(int i) {
            return getRuleContext(QualifiedNameContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(JavaLanguageParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(JavaLanguageParser.COMMA, i);
        }

        public QualifiedNameListContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_qualifiedNameList;
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitQualifiedNameList(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final QualifiedNameListContext qualifiedNameList() throws RecognitionException {
        QualifiedNameListContext _localctx = new QualifiedNameListContext(_ctx, getState());
        enterRule(_localctx, 100, RULE_qualifiedNameList);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(737);
                annotations(false);
                setState(738);
                qualifiedName();
                setState(745);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == COMMA) {
                    {
                        {
                            setState(739);
                            match(COMMA);
                            setState(740);
                            annotations(false);
                            setState(741);
                            qualifiedName();
                        }
                    }
                    setState(747);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class FormalParametersContext extends ParserRuleContext {

        public TerminalNode LPAREN() {
            return getToken(JavaLanguageParser.LPAREN, 0);
        }

        public TerminalNode RPAREN() {
            return getToken(JavaLanguageParser.RPAREN, 0);
        }

        public FormalParameterListContext formalParameterList() {
            return getRuleContext(FormalParameterListContext.class, 0);
        }

        public FormalParametersContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_formalParameters;
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitFormalParameters(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final FormalParametersContext formalParameters() throws RecognitionException {
        FormalParametersContext _localctx = new FormalParametersContext(_ctx, getState());
        enterRule(_localctx, 102, RULE_formalParameters);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(748);
                match(LPAREN);
                setState(750);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (((_la) & ~0x3f) == 0 && ((1L << _la) & 575898352105816064L) != 0 || (((_la - 170)) & ~0x3f) == 0 && ((1L << (_la - 170)) & 3986803392513L) != 0) {
                    {
                        setState(749);
                        formalParameterList();
                    }
                }
                setState(752);
                match(RPAREN);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class FormalParameterListContext extends ParserRuleContext {

        public List<FormalParameterContext> formalParameter() {
            return getRuleContexts(FormalParameterContext.class);
        }

        public FormalParameterContext formalParameter(int i) {
            return getRuleContext(FormalParameterContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(JavaLanguageParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(JavaLanguageParser.COMMA, i);
        }

        public LastFormalParameterContext lastFormalParameter() {
            return getRuleContext(LastFormalParameterContext.class, 0);
        }

        public FormalParameterListContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_formalParameterList;
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitFormalParameterList(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final FormalParameterListContext formalParameterList() throws RecognitionException {
        FormalParameterListContext _localctx = new FormalParameterListContext(_ctx, getState());
        enterRule(_localctx, 104, RULE_formalParameterList);
        int _la;
        try {
            int _alt;
            setState(767);
            _errHandler.sync(this);
            switch(getInterpreter().adaptivePredict(_input, 78, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(754);
                        formalParameter();
                        setState(759);
                        _errHandler.sync(this);
                        _alt = getInterpreter().adaptivePredict(_input, 76, _ctx);
                        while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                            if (_alt == 1) {
                                {
                                    {
                                        setState(755);
                                        match(COMMA);
                                        setState(756);
                                        formalParameter();
                                    }
                                }
                            }
                            setState(761);
                            _errHandler.sync(this);
                            _alt = getInterpreter().adaptivePredict(_input, 76, _ctx);
                        }
                        setState(764);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == COMMA) {
                            {
                                setState(762);
                                match(COMMA);
                                setState(763);
                                lastFormalParameter();
                            }
                        }
                    }
                    break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(766);
                        lastFormalParameter();
                    }
                    break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class FormalParameterContext extends ParserRuleContext {

        public VariableModifierContext variableModifier;

        public List<VariableModifierContext> mods = new ArrayList<VariableModifierContext>();

        public TypeTypeContext type;

        public VariableDeclaratorIdContext variableDeclaratorId() {
            return getRuleContext(VariableDeclaratorIdContext.class, 0);
        }

        public TypeTypeContext typeType() {
            return getRuleContext(TypeTypeContext.class, 0);
        }

        public List<VariableModifierContext> variableModifier() {
            return getRuleContexts(VariableModifierContext.class);
        }

        public VariableModifierContext variableModifier(int i) {
            return getRuleContext(VariableModifierContext.class, i);
        }

        public FormalParameterContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_formalParameter;
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitFormalParameter(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final FormalParameterContext formalParameter() throws RecognitionException {
        FormalParameterContext _localctx = new FormalParameterContext(_ctx, getState());
        enterRule(_localctx, 106, RULE_formalParameter);
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(772);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input, 79, _ctx);
                while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                    if (_alt == 1) {
                        {
                            {
                                setState(769);
                                ((FormalParameterContext) _localctx).variableModifier = variableModifier();
                                ((FormalParameterContext) _localctx).mods.add(((FormalParameterContext) _localctx).variableModifier);
                            }
                        }
                    }
                    setState(774);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 79, _ctx);
                }
                setState(775);
                ((FormalParameterContext) _localctx).type = typeType(true);
                setState(776);
                variableDeclaratorId(_localctx.mods, _localctx.type);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class LastFormalParameterContext extends ParserRuleContext {

        public VariableModifierContext variableModifier;

        public List<VariableModifierContext> mods = new ArrayList<VariableModifierContext>();

        public TypeTypeContext type;

        public AnnotationsContext annotations() {
            return getRuleContext(AnnotationsContext.class, 0);
        }

        public TerminalNode ELLIPSIS() {
            return getToken(JavaLanguageParser.ELLIPSIS, 0);
        }

        public VariableDeclaratorIdContext variableDeclaratorId() {
            return getRuleContext(VariableDeclaratorIdContext.class, 0);
        }

        public TypeTypeContext typeType() {
            return getRuleContext(TypeTypeContext.class, 0);
        }

        public List<VariableModifierContext> variableModifier() {
            return getRuleContexts(VariableModifierContext.class);
        }

        public VariableModifierContext variableModifier(int i) {
            return getRuleContext(VariableModifierContext.class, i);
        }

        public LastFormalParameterContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_lastFormalParameter;
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitLastFormalParameter(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final LastFormalParameterContext lastFormalParameter() throws RecognitionException {
        LastFormalParameterContext _localctx = new LastFormalParameterContext(_ctx, getState());
        enterRule(_localctx, 108, RULE_lastFormalParameter);
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(781);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input, 80, _ctx);
                while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                    if (_alt == 1) {
                        {
                            {
                                setState(778);
                                ((LastFormalParameterContext) _localctx).variableModifier = variableModifier();
                                ((LastFormalParameterContext) _localctx).mods.add(((LastFormalParameterContext) _localctx).variableModifier);
                            }
                        }
                    }
                    setState(783);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 80, _ctx);
                }
                setState(784);
                ((LastFormalParameterContext) _localctx).type = typeType(true);
                setState(785);
                annotations(false);
                setState(786);
                match(ELLIPSIS);
                setState(787);
                variableDeclaratorId(_localctx.mods, _localctx.type);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class QualifiedNameContext extends ParserRuleContext {

        public QualifiedNameExtendedContext qualifiedNameExtended;

        public List<QualifiedNameExtendedContext> extended = new ArrayList<QualifiedNameExtendedContext>();

        public IdContext id() {
            return getRuleContext(IdContext.class, 0);
        }

        public List<QualifiedNameExtendedContext> qualifiedNameExtended() {
            return getRuleContexts(QualifiedNameExtendedContext.class);
        }

        public QualifiedNameExtendedContext qualifiedNameExtended(int i) {
            return getRuleContext(QualifiedNameExtendedContext.class, i);
        }

        public QualifiedNameContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_qualifiedName;
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitQualifiedName(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final QualifiedNameContext qualifiedName() throws RecognitionException {
        QualifiedNameContext _localctx = new QualifiedNameContext(_ctx, getState());
        enterRule(_localctx, 110, RULE_qualifiedName);
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(789);
                id();
                setState(793);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input, 81, _ctx);
                while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                    if (_alt == 1) {
                        {
                            {
                                setState(790);
                                ((QualifiedNameContext) _localctx).qualifiedNameExtended = qualifiedNameExtended();
                                ((QualifiedNameContext) _localctx).extended.add(((QualifiedNameContext) _localctx).qualifiedNameExtended);
                            }
                        }
                    }
                    setState(795);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 81, _ctx);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class QualifiedNameExtendedContext extends ParserRuleContext {

        public TerminalNode DOT() {
            return getToken(JavaLanguageParser.DOT, 0);
        }

        public AnnotationsContext annotations() {
            return getRuleContext(AnnotationsContext.class, 0);
        }

        public IdContext id() {
            return getRuleContext(IdContext.class, 0);
        }

        public QualifiedNameExtendedContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_qualifiedNameExtended;
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitQualifiedNameExtended(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final QualifiedNameExtendedContext qualifiedNameExtended() throws RecognitionException {
        QualifiedNameExtendedContext _localctx = new QualifiedNameExtendedContext(_ctx, getState());
        enterRule(_localctx, 112, RULE_qualifiedNameExtended);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(796);
                match(DOT);
                setState(797);
                annotations(false);
                setState(798);
                id();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class LiteralContext extends ParserRuleContext {

        public IntegerLiteralContext integerLiteral() {
            return getRuleContext(IntegerLiteralContext.class, 0);
        }

        public FloatLiteralContext floatLiteral() {
            return getRuleContext(FloatLiteralContext.class, 0);
        }

        public TextBlockLiteralContext textBlockLiteral() {
            return getRuleContext(TextBlockLiteralContext.class, 0);
        }

        public TerminalNode CHAR_LITERAL() {
            return getToken(JavaLanguageParser.CHAR_LITERAL, 0);
        }

        public TerminalNode STRING_LITERAL() {
            return getToken(JavaLanguageParser.STRING_LITERAL, 0);
        }

        public TerminalNode LITERAL_TRUE() {
            return getToken(JavaLanguageParser.LITERAL_TRUE, 0);
        }

        public TerminalNode LITERAL_FALSE() {
            return getToken(JavaLanguageParser.LITERAL_FALSE, 0);
        }

        public TerminalNode LITERAL_NULL() {
            return getToken(JavaLanguageParser.LITERAL_NULL, 0);
        }

        public LiteralContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_literal;
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitLiteral(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final LiteralContext literal() throws RecognitionException {
        LiteralContext _localctx = new LiteralContext(_ctx, getState());
        enterRule(_localctx, 114, RULE_literal);
        try {
            setState(808);
            _errHandler.sync(this);
            switch(_input.LA(1)) {
                case DECIMAL_LITERAL_LONG:
                case DECIMAL_LITERAL:
                case HEX_LITERAL_LONG:
                case HEX_LITERAL:
                case OCT_LITERAL_LONG:
                case OCT_LITERAL:
                case BINARY_LITERAL_LONG:
                case BINARY_LITERAL:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(800);
                        integerLiteral();
                    }
                    break;
                case FLOAT_LITERAL:
                case DOUBLE_LITERAL:
                case HEX_FLOAT_LITERAL:
                case HEX_DOUBLE_LITERAL:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(801);
                        floatLiteral();
                    }
                    break;
                case TEXT_BLOCK_LITERAL_BEGIN:
                    enterOuterAlt(_localctx, 3);
                    {
                        setState(802);
                        textBlockLiteral();
                    }
                    break;
                case CHAR_LITERAL:
                    enterOuterAlt(_localctx, 4);
                    {
                        setState(803);
                        match(CHAR_LITERAL);
                    }
                    break;
                case STRING_LITERAL:
                    enterOuterAlt(_localctx, 5);
                    {
                        setState(804);
                        match(STRING_LITERAL);
                    }
                    break;
                case LITERAL_TRUE:
                    enterOuterAlt(_localctx, 6);
                    {
                        setState(805);
                        match(LITERAL_TRUE);
                    }
                    break;
                case LITERAL_FALSE:
                    enterOuterAlt(_localctx, 7);
                    {
                        setState(806);
                        match(LITERAL_FALSE);
                    }
                    break;
                case LITERAL_NULL:
                    enterOuterAlt(_localctx, 8);
                    {
                        setState(807);
                        match(LITERAL_NULL);
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class IntegerLiteralContext extends ParserRuleContext {

        public TerminalNode DECIMAL_LITERAL_LONG() {
            return getToken(JavaLanguageParser.DECIMAL_LITERAL_LONG, 0);
        }

        public TerminalNode DECIMAL_LITERAL() {
            return getToken(JavaLanguageParser.DECIMAL_LITERAL, 0);
        }

        public TerminalNode HEX_LITERAL_LONG() {
            return getToken(JavaLanguageParser.HEX_LITERAL_LONG, 0);
        }

        public TerminalNode HEX_LITERAL() {
            return getToken(JavaLanguageParser.HEX_LITERAL, 0);
        }

        public TerminalNode OCT_LITERAL_LONG() {
            return getToken(JavaLanguageParser.OCT_LITERAL_LONG, 0);
        }

        public TerminalNode OCT_LITERAL() {
            return getToken(JavaLanguageParser.OCT_LITERAL, 0);
        }

        public TerminalNode BINARY_LITERAL_LONG() {
            return getToken(JavaLanguageParser.BINARY_LITERAL_LONG, 0);
        }

        public TerminalNode BINARY_LITERAL() {
            return getToken(JavaLanguageParser.BINARY_LITERAL, 0);
        }

        public IntegerLiteralContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_integerLiteral;
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitIntegerLiteral(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final IntegerLiteralContext integerLiteral() throws RecognitionException {
        IntegerLiteralContext _localctx = new IntegerLiteralContext(_ctx, getState());
        enterRule(_localctx, 116, RULE_integerLiteral);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(810);
                _la = _input.LA(1);
                if (!((((_la - 216)) & ~0x3f) == 0 && ((1L << (_la - 216)) & 255L) != 0)) {
                    _errHandler.recoverInline(this);
                } else {
                    if (_input.LA(1) == Token.EOF)
                        matchedEOF = true;
                    _errHandler.reportMatch(this);
                    consume();
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class FloatLiteralContext extends ParserRuleContext {

        public TerminalNode DOUBLE_LITERAL() {
            return getToken(JavaLanguageParser.DOUBLE_LITERAL, 0);
        }

        public TerminalNode FLOAT_LITERAL() {
            return getToken(JavaLanguageParser.FLOAT_LITERAL, 0);
        }

        public TerminalNode HEX_DOUBLE_LITERAL() {
            return getToken(JavaLanguageParser.HEX_DOUBLE_LITERAL, 0);
        }

        public TerminalNode HEX_FLOAT_LITERAL() {
            return getToken(JavaLanguageParser.HEX_FLOAT_LITERAL, 0);
        }

        public FloatLiteralContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_floatLiteral;
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitFloatLiteral(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final FloatLiteralContext floatLiteral() throws RecognitionException {
        FloatLiteralContext _localctx = new FloatLiteralContext(_ctx, getState());
        enterRule(_localctx, 118, RULE_floatLiteral);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(812);
                _la = _input.LA(1);
                if (!((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & 15L) != 0)) {
                    _errHandler.recoverInline(this);
                } else {
                    if (_input.LA(1) == Token.EOF)
                        matchedEOF = true;
                    _errHandler.reportMatch(this);
                    consume();
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class TextBlockLiteralContext extends ParserRuleContext {

        public TerminalNode TEXT_BLOCK_LITERAL_BEGIN() {
            return getToken(JavaLanguageParser.TEXT_BLOCK_LITERAL_BEGIN, 0);
        }

        public TerminalNode TEXT_BLOCK_CONTENT() {
            return getToken(JavaLanguageParser.TEXT_BLOCK_CONTENT, 0);
        }

        public TerminalNode TEXT_BLOCK_LITERAL_END() {
            return getToken(JavaLanguageParser.TEXT_BLOCK_LITERAL_END, 0);
        }

        public TextBlockLiteralContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_textBlockLiteral;
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitTextBlockLiteral(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final TextBlockLiteralContext textBlockLiteral() throws RecognitionException {
        TextBlockLiteralContext _localctx = new TextBlockLiteralContext(_ctx, getState());
        enterRule(_localctx, 120, RULE_textBlockLiteral);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(814);
                match(TEXT_BLOCK_LITERAL_BEGIN);
                setState(815);
                match(TEXT_BLOCK_CONTENT);
                setState(816);
                match(TEXT_BLOCK_LITERAL_END);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class AnnotationsContext extends ParserRuleContext {

        public boolean createImaginaryNode;

        public AnnotationContext annotation;

        public List<AnnotationContext> anno = new ArrayList<AnnotationContext>();

        public List<AnnotationContext> annotation() {
            return getRuleContexts(AnnotationContext.class);
        }

        public AnnotationContext annotation(int i) {
            return getRuleContext(AnnotationContext.class, i);
        }

        public AnnotationsContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public AnnotationsContext(ParserRuleContext parent, int invokingState, boolean createImaginaryNode) {
            super(parent, invokingState);
            this.createImaginaryNode = createImaginaryNode;
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_annotations;
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitAnnotations(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final AnnotationsContext annotations(boolean createImaginaryNode) throws RecognitionException {
        AnnotationsContext _localctx = new AnnotationsContext(_ctx, getState(), createImaginaryNode);
        enterRule(_localctx, 122, RULE_annotations);
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(821);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input, 83, _ctx);
                while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                    if (_alt == 1) {
                        {
                            {
                                setState(818);
                                ((AnnotationsContext) _localctx).annotation = annotation();
                                ((AnnotationsContext) _localctx).anno.add(((AnnotationsContext) _localctx).annotation);
                            }
                        }
                    }
                    setState(823);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 83, _ctx);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class AnnotationContext extends ParserRuleContext {

        public TerminalNode AT() {
            return getToken(JavaLanguageParser.AT, 0);
        }

        public QualifiedNameContext qualifiedName() {
            return getRuleContext(QualifiedNameContext.class, 0);
        }

        public TerminalNode LPAREN() {
            return getToken(JavaLanguageParser.LPAREN, 0);
        }

        public TerminalNode RPAREN() {
            return getToken(JavaLanguageParser.RPAREN, 0);
        }

        public ElementValuePairsContext elementValuePairs() {
            return getRuleContext(ElementValuePairsContext.class, 0);
        }

        public ElementValueContext elementValue() {
            return getRuleContext(ElementValueContext.class, 0);
        }

        public AnnotationContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_annotation;
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitAnnotation(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final AnnotationContext annotation() throws RecognitionException {
        AnnotationContext _localctx = new AnnotationContext(_ctx, getState());
        enterRule(_localctx, 124, RULE_annotation);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(824);
                match(AT);
                setState(825);
                qualifiedName();
                setState(832);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == LPAREN) {
                    {
                        setState(826);
                        match(LPAREN);
                        setState(829);
                        _errHandler.sync(this);
                        switch(getInterpreter().adaptivePredict(_input, 84, _ctx)) {
                            case 1:
                                {
                                    setState(827);
                                    elementValuePairs();
                                }
                                break;
                            case 2:
                                {
                                    setState(828);
                                    elementValue();
                                }
                                break;
                        }
                        setState(831);
                        match(RPAREN);
                    }
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class ElementValuePairsContext extends ParserRuleContext {

        public List<ElementValuePairContext> elementValuePair() {
            return getRuleContexts(ElementValuePairContext.class);
        }

        public ElementValuePairContext elementValuePair(int i) {
            return getRuleContext(ElementValuePairContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(JavaLanguageParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(JavaLanguageParser.COMMA, i);
        }

        public ElementValuePairsContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_elementValuePairs;
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitElementValuePairs(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final ElementValuePairsContext elementValuePairs() throws RecognitionException {
        ElementValuePairsContext _localctx = new ElementValuePairsContext(_ctx, getState());
        enterRule(_localctx, 126, RULE_elementValuePairs);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(834);
                elementValuePair();
                setState(839);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == COMMA) {
                    {
                        {
                            setState(835);
                            match(COMMA);
                            setState(836);
                            elementValuePair();
                        }
                    }
                    setState(841);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class ElementValuePairContext extends ParserRuleContext {

        public IdContext id() {
            return getRuleContext(IdContext.class, 0);
        }

        public TerminalNode ASSIGN() {
            return getToken(JavaLanguageParser.ASSIGN, 0);
        }

        public ElementValueContext elementValue() {
            return getRuleContext(ElementValueContext.class, 0);
        }

        public ElementValuePairContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_elementValuePair;
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitElementValuePair(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final ElementValuePairContext elementValuePair() throws RecognitionException {
        ElementValuePairContext _localctx = new ElementValuePairContext(_ctx, getState());
        enterRule(_localctx, 128, RULE_elementValuePair);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(842);
                id();
                setState(843);
                match(ASSIGN);
                setState(844);
                elementValue();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class ElementValueContext extends ParserRuleContext {

        public ExpressionContext expression() {
            return getRuleContext(ExpressionContext.class, 0);
        }

        public AnnotationContext annotation() {
            return getRuleContext(AnnotationContext.class, 0);
        }

        public ElementValueArrayInitializerContext elementValueArrayInitializer() {
            return getRuleContext(ElementValueArrayInitializerContext.class, 0);
        }

        public ElementValueContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_elementValue;
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitElementValue(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final ElementValueContext elementValue() throws RecognitionException {
        ElementValueContext _localctx = new ElementValueContext(_ctx, getState());
        enterRule(_localctx, 130, RULE_elementValue);
        try {
            setState(849);
            _errHandler.sync(this);
            switch(getInterpreter().adaptivePredict(_input, 87, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(846);
                        expression();
                    }
                    break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(847);
                        annotation();
                    }
                    break;
                case 3:
                    enterOuterAlt(_localctx, 3);
                    {
                        setState(848);
                        elementValueArrayInitializer();
                    }
                    break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class ElementValueArrayInitializerContext extends ParserRuleContext {

        public TerminalNode LCURLY() {
            return getToken(JavaLanguageParser.LCURLY, 0);
        }

        public TerminalNode RCURLY() {
            return getToken(JavaLanguageParser.RCURLY, 0);
        }

        public List<ElementValueContext> elementValue() {
            return getRuleContexts(ElementValueContext.class);
        }

        public ElementValueContext elementValue(int i) {
            return getRuleContext(ElementValueContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(JavaLanguageParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(JavaLanguageParser.COMMA, i);
        }

        public ElementValueArrayInitializerContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_elementValueArrayInitializer;
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitElementValueArrayInitializer(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final ElementValueArrayInitializerContext elementValueArrayInitializer() throws RecognitionException {
        ElementValueArrayInitializerContext _localctx = new ElementValueArrayInitializerContext(_ctx, getState());
        enterRule(_localctx, 132, RULE_elementValueArrayInitializer);
        int _la;
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(851);
                match(LCURLY);
                setState(860);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if ((((_la - 49)) & ~0x3f) == 0 && ((1L << (_la - 49)) & 1101264847871L) != 0 || (((_la - 125)) & ~0x3f) == 0 && ((1L << (_la - 125)) & 35184372117491L) != 0 || (((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & 4279144719L) != 0) {
                    {
                        setState(852);
                        elementValue();
                        setState(857);
                        _errHandler.sync(this);
                        _alt = getInterpreter().adaptivePredict(_input, 88, _ctx);
                        while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                            if (_alt == 1) {
                                {
                                    {
                                        setState(853);
                                        match(COMMA);
                                        setState(854);
                                        elementValue();
                                    }
                                }
                            }
                            setState(859);
                            _errHandler.sync(this);
                            _alt = getInterpreter().adaptivePredict(_input, 88, _ctx);
                        }
                    }
                }
                setState(863);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == COMMA) {
                    {
                        setState(862);
                        match(COMMA);
                    }
                }
                setState(865);
                match(RCURLY);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class AnnotationTypeDeclarationContext extends ParserRuleContext {

        public List<ModifierContext> mods;

        public TerminalNode AT() {
            return getToken(JavaLanguageParser.AT, 0);
        }

        public TerminalNode LITERAL_INTERFACE() {
            return getToken(JavaLanguageParser.LITERAL_INTERFACE, 0);
        }

        public IdContext id() {
            return getRuleContext(IdContext.class, 0);
        }

        public AnnotationTypeBodyContext annotationTypeBody() {
            return getRuleContext(AnnotationTypeBodyContext.class, 0);
        }

        public AnnotationTypeDeclarationContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public AnnotationTypeDeclarationContext(ParserRuleContext parent, int invokingState, List<ModifierContext> mods) {
            super(parent, invokingState);
            this.mods = mods;
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_annotationTypeDeclaration;
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitAnnotationTypeDeclaration(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final AnnotationTypeDeclarationContext annotationTypeDeclaration(List<ModifierContext> mods) throws RecognitionException {
        AnnotationTypeDeclarationContext _localctx = new AnnotationTypeDeclarationContext(_ctx, getState(), mods);
        enterRule(_localctx, 134, RULE_annotationTypeDeclaration);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(867);
                match(AT);
                setState(868);
                match(LITERAL_INTERFACE);
                setState(869);
                id();
                setState(870);
                annotationTypeBody();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class AnnotationTypeBodyContext extends ParserRuleContext {

        public TerminalNode LCURLY() {
            return getToken(JavaLanguageParser.LCURLY, 0);
        }

        public TerminalNode RCURLY() {
            return getToken(JavaLanguageParser.RCURLY, 0);
        }

        public List<AnnotationTypeElementDeclarationContext> annotationTypeElementDeclaration() {
            return getRuleContexts(AnnotationTypeElementDeclarationContext.class);
        }

        public AnnotationTypeElementDeclarationContext annotationTypeElementDeclaration(int i) {
            return getRuleContext(AnnotationTypeElementDeclarationContext.class, i);
        }

        public AnnotationTypeBodyContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_annotationTypeBody;
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitAnnotationTypeBody(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final AnnotationTypeBodyContext annotationTypeBody() throws RecognitionException {
        AnnotationTypeBodyContext _localctx = new AnnotationTypeBodyContext(_ctx, getState());
        enterRule(_localctx, 136, RULE_annotationTypeBody);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(872);
                match(LCURLY);
                setState(876);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while ((((_la - 39)) & ~0x3f) == 0 && ((1L << (_la - 39)) & 36028803458268231L) != 0 || (((_la - 153)) & ~0x3f) == 0 && ((1L << (_la - 153)) & 522558294263463937L) != 0) {
                    {
                        {
                            setState(873);
                            annotationTypeElementDeclaration();
                        }
                    }
                    setState(878);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
                setState(879);
                match(RCURLY);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class AnnotationTypeElementDeclarationContext extends ParserRuleContext {

        public ModifierContext modifier;

        public List<ModifierContext> mods = new ArrayList<ModifierContext>();

        public AnnotationTypeElementRestContext annotationTypeElementRest() {
            return getRuleContext(AnnotationTypeElementRestContext.class, 0);
        }

        public List<ModifierContext> modifier() {
            return getRuleContexts(ModifierContext.class);
        }

        public ModifierContext modifier(int i) {
            return getRuleContext(ModifierContext.class, i);
        }

        public TerminalNode SEMI() {
            return getToken(JavaLanguageParser.SEMI, 0);
        }

        public AnnotationTypeElementDeclarationContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_annotationTypeElementDeclaration;
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitAnnotationTypeElementDeclaration(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final AnnotationTypeElementDeclarationContext annotationTypeElementDeclaration() throws RecognitionException {
        AnnotationTypeElementDeclarationContext _localctx = new AnnotationTypeElementDeclarationContext(_ctx, getState());
        enterRule(_localctx, 138, RULE_annotationTypeElementDeclaration);
        try {
            int _alt;
            setState(889);
            _errHandler.sync(this);
            switch(_input.LA(1)) {
                case FINAL:
                case ABSTRACT:
                case STRICTFP:
                case LITERAL_VOID:
                case LITERAL_BOOLEAN:
                case LITERAL_BYTE:
                case LITERAL_CHAR:
                case LITERAL_SHORT:
                case LITERAL_INT:
                case LITERAL_FLOAT:
                case LITERAL_LONG:
                case LITERAL_DOUBLE:
                case IDENT:
                case LITERAL_PRIVATE:
                case LITERAL_PUBLIC:
                case LITERAL_PROTECTED:
                case LITERAL_STATIC:
                case LITERAL_TRANSIENT:
                case LITERAL_NATIVE:
                case LITERAL_SYNCHRONIZED:
                case LITERAL_VOLATILE:
                case LITERAL_CLASS:
                case LITERAL_INTERFACE:
                case LITERAL_DEFAULT:
                case ENUM:
                case AT:
                case LITERAL_RECORD:
                case LITERAL_YIELD:
                case LITERAL_NON_SEALED:
                case LITERAL_SEALED:
                case LITERAL_PERMITS:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(884);
                        _errHandler.sync(this);
                        _alt = getInterpreter().adaptivePredict(_input, 92, _ctx);
                        while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                            if (_alt == 1) {
                                {
                                    {
                                        setState(881);
                                        ((AnnotationTypeElementDeclarationContext) _localctx).modifier = modifier();
                                        ((AnnotationTypeElementDeclarationContext) _localctx).mods.add(((AnnotationTypeElementDeclarationContext) _localctx).modifier);
                                    }
                                }
                            }
                            setState(886);
                            _errHandler.sync(this);
                            _alt = getInterpreter().adaptivePredict(_input, 92, _ctx);
                        }
                        setState(887);
                        annotationTypeElementRest(_localctx.mods);
                    }
                    break;
                case SEMI:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(888);
                        match(SEMI);
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class AnnotationTypeElementRestContext extends ParserRuleContext {

        public List<ModifierContext> mods;

        public AnnotationTypeElementRestContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public AnnotationTypeElementRestContext(ParserRuleContext parent, int invokingState, List<ModifierContext> mods) {
            super(parent, invokingState);
            this.mods = mods;
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_annotationTypeElementRest;
        }

        public AnnotationTypeElementRestContext() {
        }

        public void copyFrom(AnnotationTypeElementRestContext ctx) {
            super.copyFrom(ctx);
            this.mods = ctx.mods;
        }
    }

    public static class AnnotationFieldContext extends AnnotationTypeElementRestContext {

        public TypeTypeContext type;

        public TerminalNode SEMI() {
            return getToken(JavaLanguageParser.SEMI, 0);
        }

        public TypeTypeContext typeType() {
            return getRuleContext(TypeTypeContext.class, 0);
        }

        public AnnotationMethodRestContext annotationMethodRest() {
            return getRuleContext(AnnotationMethodRestContext.class, 0);
        }

        public AnnotationConstantRestContext annotationConstantRest() {
            return getRuleContext(AnnotationConstantRestContext.class, 0);
        }

        public AnnotationFieldContext(AnnotationTypeElementRestContext ctx) {
            copyFrom(ctx);
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitAnnotationField(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public static class AnnotationTypeContext extends AnnotationTypeElementRestContext {

        public TypeTypeContext type;

        public TerminalNode SEMI() {
            return getToken(JavaLanguageParser.SEMI, 0);
        }

        public TypeTypeContext typeType() {
            return getRuleContext(TypeTypeContext.class, 0);
        }

        public ClassDeclarationContext classDeclaration() {
            return getRuleContext(ClassDeclarationContext.class, 0);
        }

        public RecordDeclarationContext recordDeclaration() {
            return getRuleContext(RecordDeclarationContext.class, 0);
        }

        public InterfaceDeclarationContext interfaceDeclaration() {
            return getRuleContext(InterfaceDeclarationContext.class, 0);
        }

        public EnumDeclarationContext enumDeclaration() {
            return getRuleContext(EnumDeclarationContext.class, 0);
        }

        public AnnotationTypeDeclarationContext annotationTypeDeclaration() {
            return getRuleContext(AnnotationTypeDeclarationContext.class, 0);
        }

        public AnnotationTypeContext(AnnotationTypeElementRestContext ctx) {
            copyFrom(ctx);
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitAnnotationType(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final AnnotationTypeElementRestContext annotationTypeElementRest(List<ModifierContext> mods) throws RecognitionException {
        AnnotationTypeElementRestContext _localctx = new AnnotationTypeElementRestContext(_ctx, getState(), mods);
        enterRule(_localctx, 140, RULE_annotationTypeElementRest);
        try {
            setState(921);
            _errHandler.sync(this);
            switch(getInterpreter().adaptivePredict(_input, 100, _ctx)) {
                case 1:
                    _localctx = new AnnotationFieldContext(_localctx);
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(891);
                        ((AnnotationFieldContext) _localctx).type = typeType(true);
                        setState(894);
                        _errHandler.sync(this);
                        switch(getInterpreter().adaptivePredict(_input, 94, _ctx)) {
                            case 1:
                                {
                                    setState(892);
                                    annotationMethodRest(mods, ((AnnotationFieldContext) _localctx).type);
                                }
                                break;
                            case 2:
                                {
                                    setState(893);
                                    annotationConstantRest(mods, ((AnnotationFieldContext) _localctx).type);
                                }
                                break;
                        }
                        setState(896);
                        match(SEMI);
                    }
                    break;
                case 2:
                    _localctx = new AnnotationTypeContext(_localctx);
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(898);
                        ((AnnotationTypeContext) _localctx).type = typeType(true);
                        setState(899);
                        match(SEMI);
                    }
                    break;
                case 3:
                    _localctx = new AnnotationTypeContext(_localctx);
                    enterOuterAlt(_localctx, 3);
                    {
                        setState(901);
                        classDeclaration(mods);
                        setState(903);
                        _errHandler.sync(this);
                        switch(getInterpreter().adaptivePredict(_input, 95, _ctx)) {
                            case 1:
                                {
                                    setState(902);
                                    match(SEMI);
                                }
                                break;
                        }
                    }
                    break;
                case 4:
                    _localctx = new AnnotationTypeContext(_localctx);
                    enterOuterAlt(_localctx, 4);
                    {
                        setState(905);
                        recordDeclaration(mods);
                        setState(907);
                        _errHandler.sync(this);
                        switch(getInterpreter().adaptivePredict(_input, 96, _ctx)) {
                            case 1:
                                {
                                    setState(906);
                                    match(SEMI);
                                }
                                break;
                        }
                    }
                    break;
                case 5:
                    _localctx = new AnnotationTypeContext(_localctx);
                    enterOuterAlt(_localctx, 5);
                    {
                        setState(909);
                        interfaceDeclaration(mods);
                        setState(911);
                        _errHandler.sync(this);
                        switch(getInterpreter().adaptivePredict(_input, 97, _ctx)) {
                            case 1:
                                {
                                    setState(910);
                                    match(SEMI);
                                }
                                break;
                        }
                    }
                    break;
                case 6:
                    _localctx = new AnnotationTypeContext(_localctx);
                    enterOuterAlt(_localctx, 6);
                    {
                        setState(913);
                        enumDeclaration(mods);
                        setState(915);
                        _errHandler.sync(this);
                        switch(getInterpreter().adaptivePredict(_input, 98, _ctx)) {
                            case 1:
                                {
                                    setState(914);
                                    match(SEMI);
                                }
                                break;
                        }
                    }
                    break;
                case 7:
                    _localctx = new AnnotationTypeContext(_localctx);
                    enterOuterAlt(_localctx, 7);
                    {
                        setState(917);
                        annotationTypeDeclaration(mods);
                        setState(919);
                        _errHandler.sync(this);
                        switch(getInterpreter().adaptivePredict(_input, 99, _ctx)) {
                            case 1:
                                {
                                    setState(918);
                                    match(SEMI);
                                }
                                break;
                        }
                    }
                    break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class AnnotationMethodRestContext extends ParserRuleContext {

        public List<ModifierContext> mods;

        public TypeTypeContext type;

        public ArrayDeclaratorContext arrayDeclarator;

        public List<ArrayDeclaratorContext> cStyleArrDec = new ArrayList<ArrayDeclaratorContext>();

        public IdContext id() {
            return getRuleContext(IdContext.class, 0);
        }

        public TerminalNode LPAREN() {
            return getToken(JavaLanguageParser.LPAREN, 0);
        }

        public TerminalNode RPAREN() {
            return getToken(JavaLanguageParser.RPAREN, 0);
        }

        public DefaultValueContext defaultValue() {
            return getRuleContext(DefaultValueContext.class, 0);
        }

        public List<ArrayDeclaratorContext> arrayDeclarator() {
            return getRuleContexts(ArrayDeclaratorContext.class);
        }

        public ArrayDeclaratorContext arrayDeclarator(int i) {
            return getRuleContext(ArrayDeclaratorContext.class, i);
        }

        public AnnotationMethodRestContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public AnnotationMethodRestContext(ParserRuleContext parent, int invokingState, List<ModifierContext> mods, TypeTypeContext type) {
            super(parent, invokingState);
            this.mods = mods;
            this.type = type;
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_annotationMethodRest;
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitAnnotationMethodRest(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final AnnotationMethodRestContext annotationMethodRest(List<ModifierContext> mods, TypeTypeContext type) throws RecognitionException {
        AnnotationMethodRestContext _localctx = new AnnotationMethodRestContext(_ctx, getState(), mods, type);
        enterRule(_localctx, 142, RULE_annotationMethodRest);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(923);
                id();
                setState(924);
                match(LPAREN);
                setState(925);
                match(RPAREN);
                setState(929);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == LBRACK || _la == AT) {
                    {
                        {
                            setState(926);
                            ((AnnotationMethodRestContext) _localctx).arrayDeclarator = arrayDeclarator();
                            ((AnnotationMethodRestContext) _localctx).cStyleArrDec.add(((AnnotationMethodRestContext) _localctx).arrayDeclarator);
                        }
                    }
                    setState(931);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
                setState(933);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == LITERAL_DEFAULT) {
                    {
                        setState(932);
                        defaultValue();
                    }
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class AnnotationConstantRestContext extends ParserRuleContext {

        public List<ModifierContext> mods;

        public TypeTypeContext type;

        public VariableDeclaratorsContext variableDeclarators() {
            return getRuleContext(VariableDeclaratorsContext.class, 0);
        }

        public AnnotationConstantRestContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public AnnotationConstantRestContext(ParserRuleContext parent, int invokingState, List<ModifierContext> mods, TypeTypeContext type) {
            super(parent, invokingState);
            this.mods = mods;
            this.type = type;
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_annotationConstantRest;
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitAnnotationConstantRest(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final AnnotationConstantRestContext annotationConstantRest(List<ModifierContext> mods, TypeTypeContext type) throws RecognitionException {
        AnnotationConstantRestContext _localctx = new AnnotationConstantRestContext(_ctx, getState(), mods, type);
        enterRule(_localctx, 144, RULE_annotationConstantRest);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(935);
                variableDeclarators(mods, type);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class DefaultValueContext extends ParserRuleContext {

        public TerminalNode LITERAL_DEFAULT() {
            return getToken(JavaLanguageParser.LITERAL_DEFAULT, 0);
        }

        public ElementValueContext elementValue() {
            return getRuleContext(ElementValueContext.class, 0);
        }

        public DefaultValueContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_defaultValue;
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitDefaultValue(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final DefaultValueContext defaultValue() throws RecognitionException {
        DefaultValueContext _localctx = new DefaultValueContext(_ctx, getState());
        enterRule(_localctx, 146, RULE_defaultValue);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(937);
                match(LITERAL_DEFAULT);
                setState(938);
                elementValue();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class ConstructorBlockContext extends ParserRuleContext {

        public TerminalNode LCURLY() {
            return getToken(JavaLanguageParser.LCURLY, 0);
        }

        public TerminalNode RCURLY() {
            return getToken(JavaLanguageParser.RCURLY, 0);
        }

        public ExplicitConstructorInvocationContext explicitConstructorInvocation() {
            return getRuleContext(ExplicitConstructorInvocationContext.class, 0);
        }

        public List<BlockStatementContext> blockStatement() {
            return getRuleContexts(BlockStatementContext.class);
        }

        public BlockStatementContext blockStatement(int i) {
            return getRuleContext(BlockStatementContext.class, i);
        }

        public ConstructorBlockContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_constructorBlock;
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitConstructorBlock(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final ConstructorBlockContext constructorBlock() throws RecognitionException {
        ConstructorBlockContext _localctx = new ConstructorBlockContext(_ctx, getState());
        enterRule(_localctx, 148, RULE_constructorBlock);
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(940);
                match(LCURLY);
                setState(942);
                _errHandler.sync(this);
                switch(getInterpreter().adaptivePredict(_input, 103, _ctx)) {
                    case 1:
                        {
                            setState(941);
                            explicitConstructorInvocation();
                        }
                        break;
                }
                setState(947);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input, 104, _ctx);
                while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                    if (_alt == 1) {
                        {
                            {
                                setState(944);
                                blockStatement();
                            }
                        }
                    }
                    setState(949);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 104, _ctx);
                }
                setState(950);
                match(RCURLY);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class ExplicitConstructorInvocationContext extends ParserRuleContext {

        public ExplicitConstructorInvocationContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_explicitConstructorInvocation;
        }

        public ExplicitConstructorInvocationContext() {
        }

        public void copyFrom(ExplicitConstructorInvocationContext ctx) {
            super.copyFrom(ctx);
        }
    }

    public static class ExplicitCtorCallContext extends ExplicitConstructorInvocationContext {

        public ArgumentsContext arguments() {
            return getRuleContext(ArgumentsContext.class, 0);
        }

        public TerminalNode SEMI() {
            return getToken(JavaLanguageParser.SEMI, 0);
        }

        public TerminalNode LITERAL_THIS() {
            return getToken(JavaLanguageParser.LITERAL_THIS, 0);
        }

        public TerminalNode LITERAL_SUPER() {
            return getToken(JavaLanguageParser.LITERAL_SUPER, 0);
        }

        public TypeArgumentsContext typeArguments() {
            return getRuleContext(TypeArgumentsContext.class, 0);
        }

        public ExplicitCtorCallContext(ExplicitConstructorInvocationContext ctx) {
            copyFrom(ctx);
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitExplicitCtorCall(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public static class PrimaryCtorCallContext extends ExplicitConstructorInvocationContext {

        public ExprContext expr() {
            return getRuleContext(ExprContext.class, 0);
        }

        public TerminalNode DOT() {
            return getToken(JavaLanguageParser.DOT, 0);
        }

        public TerminalNode LITERAL_SUPER() {
            return getToken(JavaLanguageParser.LITERAL_SUPER, 0);
        }

        public ArgumentsContext arguments() {
            return getRuleContext(ArgumentsContext.class, 0);
        }

        public TerminalNode SEMI() {
            return getToken(JavaLanguageParser.SEMI, 0);
        }

        public TypeArgumentsContext typeArguments() {
            return getRuleContext(TypeArgumentsContext.class, 0);
        }

        public PrimaryCtorCallContext(ExplicitConstructorInvocationContext ctx) {
            copyFrom(ctx);
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitPrimaryCtorCall(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final ExplicitConstructorInvocationContext explicitConstructorInvocation() throws RecognitionException {
        ExplicitConstructorInvocationContext _localctx = new ExplicitConstructorInvocationContext(_ctx, getState());
        enterRule(_localctx, 150, RULE_explicitConstructorInvocation);
        int _la;
        try {
            setState(968);
            _errHandler.sync(this);
            switch(getInterpreter().adaptivePredict(_input, 107, _ctx)) {
                case 1:
                    _localctx = new ExplicitCtorCallContext(_localctx);
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(953);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == LT) {
                            {
                                setState(952);
                                typeArguments();
                            }
                        }
                        setState(955);
                        _la = _input.LA(1);
                        if (!(_la == LITERAL_THIS || _la == LITERAL_SUPER)) {
                            _errHandler.recoverInline(this);
                        } else {
                            if (_input.LA(1) == Token.EOF)
                                matchedEOF = true;
                            _errHandler.reportMatch(this);
                            consume();
                        }
                        setState(956);
                        arguments();
                        setState(957);
                        match(SEMI);
                    }
                    break;
                case 2:
                    _localctx = new PrimaryCtorCallContext(_localctx);
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(959);
                        expr(0);
                        setState(960);
                        match(DOT);
                        setState(962);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == LT) {
                            {
                                setState(961);
                                typeArguments();
                            }
                        }
                        setState(964);
                        match(LITERAL_SUPER);
                        setState(965);
                        arguments();
                        setState(966);
                        match(SEMI);
                    }
                    break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class BlockContext extends ParserRuleContext {

        public TerminalNode LCURLY() {
            return getToken(JavaLanguageParser.LCURLY, 0);
        }

        public TerminalNode RCURLY() {
            return getToken(JavaLanguageParser.RCURLY, 0);
        }

        public List<BlockStatementContext> blockStatement() {
            return getRuleContexts(BlockStatementContext.class);
        }

        public BlockStatementContext blockStatement(int i) {
            return getRuleContext(BlockStatementContext.class, i);
        }

        public BlockContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_block;
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitBlock(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final BlockContext block() throws RecognitionException {
        BlockContext _localctx = new BlockContext(_ctx, getState());
        enterRule(_localctx, 152, RULE_block);
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(970);
                match(LCURLY);
                setState(974);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input, 108, _ctx);
                while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                    if (_alt == 1) {
                        {
                            {
                                setState(971);
                                blockStatement();
                            }
                        }
                    }
                    setState(976);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 108, _ctx);
                }
                setState(977);
                match(RCURLY);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class BlockStatementContext extends ParserRuleContext {

        public BlockStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_blockStatement;
        }

        public BlockStatementContext() {
        }

        public void copyFrom(BlockStatementContext ctx) {
            super.copyFrom(ctx);
        }
    }

    public static class StatContext extends BlockStatementContext {

        public StatementContext statement() {
            return getRuleContext(StatementContext.class, 0);
        }

        public StatContext(BlockStatementContext ctx) {
            copyFrom(ctx);
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitStat(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public static class LocalVarContext extends BlockStatementContext {

        public LocalVariableDeclarationContext localVariableDeclaration() {
            return getRuleContext(LocalVariableDeclarationContext.class, 0);
        }

        public TerminalNode SEMI() {
            return getToken(JavaLanguageParser.SEMI, 0);
        }

        public LocalVarContext(BlockStatementContext ctx) {
            copyFrom(ctx);
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitLocalVar(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public static class LocalTypeContext extends BlockStatementContext {

        public LocalTypeDeclarationContext localTypeDeclaration() {
            return getRuleContext(LocalTypeDeclarationContext.class, 0);
        }

        public LocalTypeContext(BlockStatementContext ctx) {
            copyFrom(ctx);
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitLocalType(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final BlockStatementContext blockStatement() throws RecognitionException {
        BlockStatementContext _localctx = new BlockStatementContext(_ctx, getState());
        enterRule(_localctx, 154, RULE_blockStatement);
        try {
            setState(985);
            _errHandler.sync(this);
            switch(getInterpreter().adaptivePredict(_input, 109, _ctx)) {
                case 1:
                    _localctx = new LocalVarContext(_localctx);
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(979);
                        if (!(!isYieldStatement()))
                            throw new FailedPredicateException(this, "!isYieldStatement()");
                        setState(980);
                        localVariableDeclaration();
                        setState(981);
                        match(SEMI);
                    }
                    break;
                case 2:
                    _localctx = new StatContext(_localctx);
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(983);
                        statement();
                    }
                    break;
                case 3:
                    _localctx = new LocalTypeContext(_localctx);
                    enterOuterAlt(_localctx, 3);
                    {
                        setState(984);
                        localTypeDeclaration();
                    }
                    break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class LocalVariableDeclarationContext extends ParserRuleContext {

        public ModifierContext modifier;

        public List<ModifierContext> mods = new ArrayList<ModifierContext>();

        public TypeTypeContext type;

        public VariableDeclaratorsContext variableDeclarators() {
            return getRuleContext(VariableDeclaratorsContext.class, 0);
        }

        public TypeTypeContext typeType() {
            return getRuleContext(TypeTypeContext.class, 0);
        }

        public List<ModifierContext> modifier() {
            return getRuleContexts(ModifierContext.class);
        }

        public ModifierContext modifier(int i) {
            return getRuleContext(ModifierContext.class, i);
        }

        public LocalVariableDeclarationContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_localVariableDeclaration;
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitLocalVariableDeclaration(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final LocalVariableDeclarationContext localVariableDeclaration() throws RecognitionException {
        LocalVariableDeclarationContext _localctx = new LocalVariableDeclarationContext(_ctx, getState());
        enterRule(_localctx, 156, RULE_localVariableDeclaration);
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(990);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input, 110, _ctx);
                while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                    if (_alt == 1) {
                        {
                            {
                                setState(987);
                                ((LocalVariableDeclarationContext) _localctx).modifier = modifier();
                                ((LocalVariableDeclarationContext) _localctx).mods.add(((LocalVariableDeclarationContext) _localctx).modifier);
                            }
                        }
                    }
                    setState(992);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 110, _ctx);
                }
                setState(993);
                ((LocalVariableDeclarationContext) _localctx).type = typeType(true);
                setState(994);
                variableDeclarators(_localctx.mods, _localctx.type);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class LocalTypeDeclarationContext extends ParserRuleContext {

        public ModifierContext modifier;

        public List<ModifierContext> mods = new ArrayList<ModifierContext>();

        public ClassDeclarationContext classDeclaration() {
            return getRuleContext(ClassDeclarationContext.class, 0);
        }

        public EnumDeclarationContext enumDeclaration() {
            return getRuleContext(EnumDeclarationContext.class, 0);
        }

        public InterfaceDeclarationContext interfaceDeclaration() {
            return getRuleContext(InterfaceDeclarationContext.class, 0);
        }

        public RecordDeclarationContext recordDeclaration() {
            return getRuleContext(RecordDeclarationContext.class, 0);
        }

        public List<ModifierContext> modifier() {
            return getRuleContexts(ModifierContext.class);
        }

        public ModifierContext modifier(int i) {
            return getRuleContext(ModifierContext.class, i);
        }

        public TerminalNode SEMI() {
            return getToken(JavaLanguageParser.SEMI, 0);
        }

        public LocalTypeDeclarationContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_localTypeDeclaration;
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitLocalTypeDeclaration(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final LocalTypeDeclarationContext localTypeDeclaration() throws RecognitionException {
        LocalTypeDeclarationContext _localctx = new LocalTypeDeclarationContext(_ctx, getState());
        enterRule(_localctx, 158, RULE_localTypeDeclaration);
        int _la;
        try {
            setState(1009);
            _errHandler.sync(this);
            switch(_input.LA(1)) {
                case FINAL:
                case ABSTRACT:
                case STRICTFP:
                case LITERAL_PRIVATE:
                case LITERAL_PUBLIC:
                case LITERAL_PROTECTED:
                case LITERAL_STATIC:
                case LITERAL_TRANSIENT:
                case LITERAL_NATIVE:
                case LITERAL_SYNCHRONIZED:
                case LITERAL_VOLATILE:
                case LITERAL_CLASS:
                case LITERAL_INTERFACE:
                case LITERAL_DEFAULT:
                case ENUM:
                case AT:
                case LITERAL_RECORD:
                case LITERAL_NON_SEALED:
                case LITERAL_SEALED:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(999);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        while ((((_la - 39)) & ~0x3f) == 0 && ((1L << (_la - 39)) & 36028798088511495L) != 0 || (((_la - 170)) & ~0x3f) == 0 && ((1L << (_la - 170)) & 1649267441665L) != 0) {
                            {
                                {
                                    setState(996);
                                    ((LocalTypeDeclarationContext) _localctx).modifier = modifier();
                                    ((LocalTypeDeclarationContext) _localctx).mods.add(((LocalTypeDeclarationContext) _localctx).modifier);
                                }
                            }
                            setState(1001);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                        }
                        setState(1006);
                        _errHandler.sync(this);
                        switch(_input.LA(1)) {
                            case LITERAL_CLASS:
                                {
                                    setState(1002);
                                    classDeclaration(_localctx.mods);
                                }
                                break;
                            case ENUM:
                                {
                                    setState(1003);
                                    enumDeclaration(_localctx.mods);
                                }
                                break;
                            case LITERAL_INTERFACE:
                                {
                                    setState(1004);
                                    interfaceDeclaration(_localctx.mods);
                                }
                                break;
                            case LITERAL_RECORD:
                                {
                                    setState(1005);
                                    recordDeclaration(_localctx.mods);
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                    }
                    break;
                case SEMI:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(1008);
                        match(SEMI);
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class StatementContext extends ParserRuleContext {

        public StatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_statement;
        }

        public StatementContext() {
        }

        public void copyFrom(StatementContext ctx) {
            super.copyFrom(ctx);
        }
    }

    public static class AssertExpContext extends StatementContext {

        public TerminalNode ASSERT() {
            return getToken(JavaLanguageParser.ASSERT, 0);
        }

        public List<ExpressionContext> expression() {
            return getRuleContexts(ExpressionContext.class);
        }

        public ExpressionContext expression(int i) {
            return getRuleContext(ExpressionContext.class, i);
        }

        public TerminalNode SEMI() {
            return getToken(JavaLanguageParser.SEMI, 0);
        }

        public TerminalNode COLON() {
            return getToken(JavaLanguageParser.COLON, 0);
        }

        public AssertExpContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitAssertExp(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public static class IfStatContext extends StatementContext {

        public TerminalNode LITERAL_IF() {
            return getToken(JavaLanguageParser.LITERAL_IF, 0);
        }

        public ParExpressionContext parExpression() {
            return getRuleContext(ParExpressionContext.class, 0);
        }

        public StatementContext statement() {
            return getRuleContext(StatementContext.class, 0);
        }

        public ElseStatContext elseStat() {
            return getRuleContext(ElseStatContext.class, 0);
        }

        public IfStatContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitIfStat(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public static class BlockStatContext extends StatementContext {

        public BlockContext blockLabel;

        public BlockContext block() {
            return getRuleContext(BlockContext.class, 0);
        }

        public BlockStatContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitBlockStat(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public static class TryWithResourceStatContext extends StatementContext {

        public TerminalNode LITERAL_TRY() {
            return getToken(JavaLanguageParser.LITERAL_TRY, 0);
        }

        public ResourceSpecificationContext resourceSpecification() {
            return getRuleContext(ResourceSpecificationContext.class, 0);
        }

        public BlockContext block() {
            return getRuleContext(BlockContext.class, 0);
        }

        public List<CatchClauseContext> catchClause() {
            return getRuleContexts(CatchClauseContext.class);
        }

        public CatchClauseContext catchClause(int i) {
            return getRuleContext(CatchClauseContext.class, i);
        }

        public FinallyBlockContext finallyBlock() {
            return getRuleContext(FinallyBlockContext.class, 0);
        }

        public TryWithResourceStatContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitTryWithResourceStat(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public static class TryStatContext extends StatementContext {

        public TerminalNode LITERAL_TRY() {
            return getToken(JavaLanguageParser.LITERAL_TRY, 0);
        }

        public BlockContext block() {
            return getRuleContext(BlockContext.class, 0);
        }

        public FinallyBlockContext finallyBlock() {
            return getRuleContext(FinallyBlockContext.class, 0);
        }

        public List<CatchClauseContext> catchClause() {
            return getRuleContexts(CatchClauseContext.class);
        }

        public CatchClauseContext catchClause(int i) {
            return getRuleContext(CatchClauseContext.class, i);
        }

        public TryStatContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitTryStat(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public static class SwitchStatContext extends StatementContext {

        public SwitchExpressionOrStatementContext switchExpressionOrStatement() {
            return getRuleContext(SwitchExpressionOrStatementContext.class, 0);
        }

        public SwitchStatContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitSwitchStat(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public static class SyncStatContext extends StatementContext {

        public TerminalNode LITERAL_SYNCHRONIZED() {
            return getToken(JavaLanguageParser.LITERAL_SYNCHRONIZED, 0);
        }

        public ParExpressionContext parExpression() {
            return getRuleContext(ParExpressionContext.class, 0);
        }

        public BlockContext block() {
            return getRuleContext(BlockContext.class, 0);
        }

        public SyncStatContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitSyncStat(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public static class ContinueStatContext extends StatementContext {

        public TerminalNode LITERAL_CONTINUE() {
            return getToken(JavaLanguageParser.LITERAL_CONTINUE, 0);
        }

        public TerminalNode SEMI() {
            return getToken(JavaLanguageParser.SEMI, 0);
        }

        public IdContext id() {
            return getRuleContext(IdContext.class, 0);
        }

        public ContinueStatContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitContinueStat(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public static class BreakStatContext extends StatementContext {

        public TerminalNode LITERAL_BREAK() {
            return getToken(JavaLanguageParser.LITERAL_BREAK, 0);
        }

        public TerminalNode SEMI() {
            return getToken(JavaLanguageParser.SEMI, 0);
        }

        public IdContext id() {
            return getRuleContext(IdContext.class, 0);
        }

        public BreakStatContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitBreakStat(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public static class ForStatContext extends StatementContext {

        public TerminalNode LITERAL_FOR() {
            return getToken(JavaLanguageParser.LITERAL_FOR, 0);
        }

        public ForControlContext forControl() {
            return getRuleContext(ForControlContext.class, 0);
        }

        public StatementContext statement() {
            return getRuleContext(StatementContext.class, 0);
        }

        public ForStatContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitForStat(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public static class LabelStatContext extends StatementContext {

        public IdContext id() {
            return getRuleContext(IdContext.class, 0);
        }

        public TerminalNode COLON() {
            return getToken(JavaLanguageParser.COLON, 0);
        }

        public StatementContext statement() {
            return getRuleContext(StatementContext.class, 0);
        }

        public LabelStatContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitLabelStat(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public static class DoStatContext extends StatementContext {

        public TerminalNode LITERAL_DO() {
            return getToken(JavaLanguageParser.LITERAL_DO, 0);
        }

        public StatementContext statement() {
            return getRuleContext(StatementContext.class, 0);
        }

        public TerminalNode LITERAL_WHILE() {
            return getToken(JavaLanguageParser.LITERAL_WHILE, 0);
        }

        public ParExpressionContext parExpression() {
            return getRuleContext(ParExpressionContext.class, 0);
        }

        public TerminalNode SEMI() {
            return getToken(JavaLanguageParser.SEMI, 0);
        }

        public DoStatContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitDoStat(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public static class ReturnStatContext extends StatementContext {

        public TerminalNode LITERAL_RETURN() {
            return getToken(JavaLanguageParser.LITERAL_RETURN, 0);
        }

        public TerminalNode SEMI() {
            return getToken(JavaLanguageParser.SEMI, 0);
        }

        public ExpressionContext expression() {
            return getRuleContext(ExpressionContext.class, 0);
        }

        public ReturnStatContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitReturnStat(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public static class ThrowStatContext extends StatementContext {

        public TerminalNode LITERAL_THROW() {
            return getToken(JavaLanguageParser.LITERAL_THROW, 0);
        }

        public ExpressionContext expression() {
            return getRuleContext(ExpressionContext.class, 0);
        }

        public TerminalNode SEMI() {
            return getToken(JavaLanguageParser.SEMI, 0);
        }

        public ThrowStatContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitThrowStat(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public static class YieldStatContext extends StatementContext {

        public TerminalNode LITERAL_YIELD() {
            return getToken(JavaLanguageParser.LITERAL_YIELD, 0);
        }

        public ExpressionContext expression() {
            return getRuleContext(ExpressionContext.class, 0);
        }

        public TerminalNode SEMI() {
            return getToken(JavaLanguageParser.SEMI, 0);
        }

        public YieldStatContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitYieldStat(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public static class EmptyStatContext extends StatementContext {

        public TerminalNode SEMI() {
            return getToken(JavaLanguageParser.SEMI, 0);
        }

        public EmptyStatContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitEmptyStat(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public static class ExpStatContext extends StatementContext {

        public ExpressionContext statementExpression;

        public TerminalNode SEMI() {
            return getToken(JavaLanguageParser.SEMI, 0);
        }

        public ExpressionContext expression() {
            return getRuleContext(ExpressionContext.class, 0);
        }

        public ExpStatContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitExpStat(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public static class WhileStatContext extends StatementContext {

        public TerminalNode LITERAL_WHILE() {
            return getToken(JavaLanguageParser.LITERAL_WHILE, 0);
        }

        public ParExpressionContext parExpression() {
            return getRuleContext(ParExpressionContext.class, 0);
        }

        public StatementContext statement() {
            return getRuleContext(StatementContext.class, 0);
        }

        public WhileStatContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitWhileStat(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final StatementContext statement() throws RecognitionException {
        StatementContext _localctx = new StatementContext(_ctx, getState());
        enterRule(_localctx, 160, RULE_statement);
        int _la;
        try {
            int _alt;
            setState(1101);
            _errHandler.sync(this);
            switch(getInterpreter().adaptivePredict(_input, 124, _ctx)) {
                case 1:
                    _localctx = new BlockStatContext(_localctx);
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(1011);
                        ((BlockStatContext) _localctx).blockLabel = block();
                    }
                    break;
                case 2:
                    _localctx = new AssertExpContext(_localctx);
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(1012);
                        match(ASSERT);
                        setState(1013);
                        expression();
                        setState(1016);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == COLON) {
                            {
                                setState(1014);
                                match(COLON);
                                setState(1015);
                                expression();
                            }
                        }
                        setState(1018);
                        match(SEMI);
                    }
                    break;
                case 3:
                    _localctx = new IfStatContext(_localctx);
                    enterOuterAlt(_localctx, 3);
                    {
                        setState(1020);
                        match(LITERAL_IF);
                        setState(1021);
                        parExpression();
                        setState(1022);
                        statement();
                        setState(1024);
                        _errHandler.sync(this);
                        switch(getInterpreter().adaptivePredict(_input, 115, _ctx)) {
                            case 1:
                                {
                                    setState(1023);
                                    elseStat();
                                }
                                break;
                        }
                    }
                    break;
                case 4:
                    _localctx = new ForStatContext(_localctx);
                    enterOuterAlt(_localctx, 4);
                    {
                        setState(1026);
                        match(LITERAL_FOR);
                        setState(1027);
                        forControl();
                        setState(1028);
                        statement();
                    }
                    break;
                case 5:
                    _localctx = new WhileStatContext(_localctx);
                    enterOuterAlt(_localctx, 5);
                    {
                        setState(1030);
                        match(LITERAL_WHILE);
                        setState(1031);
                        parExpression();
                        setState(1032);
                        statement();
                    }
                    break;
                case 6:
                    _localctx = new DoStatContext(_localctx);
                    enterOuterAlt(_localctx, 6);
                    {
                        setState(1034);
                        match(LITERAL_DO);
                        setState(1035);
                        statement();
                        setState(1036);
                        match(LITERAL_WHILE);
                        setState(1037);
                        parExpression();
                        setState(1038);
                        match(SEMI);
                    }
                    break;
                case 7:
                    _localctx = new TryStatContext(_localctx);
                    enterOuterAlt(_localctx, 7);
                    {
                        setState(1040);
                        match(LITERAL_TRY);
                        setState(1041);
                        block();
                        setState(1051);
                        _errHandler.sync(this);
                        switch(_input.LA(1)) {
                            case LITERAL_CATCH:
                                {
                                    setState(1043);
                                    _errHandler.sync(this);
                                    _alt = 1;
                                    do {
                                        switch(_alt) {
                                            case 1:
                                                {
                                                    {
                                                        setState(1042);
                                                        catchClause();
                                                    }
                                                }
                                                break;
                                            default:
                                                throw new NoViableAltException(this);
                                        }
                                        setState(1045);
                                        _errHandler.sync(this);
                                        _alt = getInterpreter().adaptivePredict(_input, 116, _ctx);
                                    } while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER);
                                    setState(1048);
                                    _errHandler.sync(this);
                                    switch(getInterpreter().adaptivePredict(_input, 117, _ctx)) {
                                        case 1:
                                            {
                                                setState(1047);
                                                finallyBlock();
                                            }
                                            break;
                                    }
                                }
                                break;
                            case LITERAL_FINALLY:
                                {
                                    setState(1050);
                                    finallyBlock();
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                    }
                    break;
                case 8:
                    _localctx = new TryWithResourceStatContext(_localctx);
                    enterOuterAlt(_localctx, 8);
                    {
                        setState(1053);
                        match(LITERAL_TRY);
                        setState(1054);
                        resourceSpecification();
                        setState(1055);
                        block();
                        setState(1059);
                        _errHandler.sync(this);
                        _alt = getInterpreter().adaptivePredict(_input, 119, _ctx);
                        while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                            if (_alt == 1) {
                                {
                                    {
                                        setState(1056);
                                        catchClause();
                                    }
                                }
                            }
                            setState(1061);
                            _errHandler.sync(this);
                            _alt = getInterpreter().adaptivePredict(_input, 119, _ctx);
                        }
                        setState(1063);
                        _errHandler.sync(this);
                        switch(getInterpreter().adaptivePredict(_input, 120, _ctx)) {
                            case 1:
                                {
                                    setState(1062);
                                    finallyBlock();
                                }
                                break;
                        }
                    }
                    break;
                case 9:
                    _localctx = new YieldStatContext(_localctx);
                    enterOuterAlt(_localctx, 9);
                    {
                        setState(1065);
                        match(LITERAL_YIELD);
                        setState(1066);
                        expression();
                        setState(1067);
                        match(SEMI);
                    }
                    break;
                case 10:
                    _localctx = new SwitchStatContext(_localctx);
                    enterOuterAlt(_localctx, 10);
                    {
                        setState(1069);
                        switchExpressionOrStatement();
                    }
                    break;
                case 11:
                    _localctx = new SyncStatContext(_localctx);
                    enterOuterAlt(_localctx, 11);
                    {
                        setState(1070);
                        match(LITERAL_SYNCHRONIZED);
                        setState(1071);
                        parExpression();
                        setState(1072);
                        block();
                    }
                    break;
                case 12:
                    _localctx = new ReturnStatContext(_localctx);
                    enterOuterAlt(_localctx, 12);
                    {
                        setState(1074);
                        match(LITERAL_RETURN);
                        setState(1076);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (((_la) & ~0x3f) == 0 && ((1L << _la) & 575897802350002176L) != 0 || (((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & -2313161358608162803L) != 0 || (((_la - 170)) & ~0x3f) == 0 && ((1L << (_la - 170)) & 17948033811480577L) != 0) {
                            {
                                setState(1075);
                                expression();
                            }
                        }
                        setState(1078);
                        match(SEMI);
                    }
                    break;
                case 13:
                    _localctx = new ThrowStatContext(_localctx);
                    enterOuterAlt(_localctx, 13);
                    {
                        setState(1079);
                        match(LITERAL_THROW);
                        setState(1080);
                        expression();
                        setState(1081);
                        match(SEMI);
                    }
                    break;
                case 14:
                    _localctx = new BreakStatContext(_localctx);
                    enterOuterAlt(_localctx, 14);
                    {
                        setState(1083);
                        match(LITERAL_BREAK);
                        setState(1085);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == IDENT || (((_la - 200)) & ~0x3f) == 0 && ((1L << (_la - 200)) & 3713L) != 0) {
                            {
                                setState(1084);
                                id();
                            }
                        }
                        setState(1087);
                        match(SEMI);
                    }
                    break;
                case 15:
                    _localctx = new ContinueStatContext(_localctx);
                    enterOuterAlt(_localctx, 15);
                    {
                        setState(1088);
                        match(LITERAL_CONTINUE);
                        setState(1090);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == IDENT || (((_la - 200)) & ~0x3f) == 0 && ((1L << (_la - 200)) & 3713L) != 0) {
                            {
                                setState(1089);
                                id();
                            }
                        }
                        setState(1092);
                        match(SEMI);
                    }
                    break;
                case 16:
                    _localctx = new EmptyStatContext(_localctx);
                    enterOuterAlt(_localctx, 16);
                    {
                        setState(1093);
                        match(SEMI);
                    }
                    break;
                case 17:
                    _localctx = new ExpStatContext(_localctx);
                    enterOuterAlt(_localctx, 17);
                    {
                        setState(1094);
                        ((ExpStatContext) _localctx).statementExpression = expression();
                        setState(1095);
                        match(SEMI);
                    }
                    break;
                case 18:
                    _localctx = new LabelStatContext(_localctx);
                    enterOuterAlt(_localctx, 18);
                    {
                        setState(1097);
                        id();
                        setState(1098);
                        match(COLON);
                        setState(1099);
                        statement();
                    }
                    break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class SwitchExpressionOrStatementContext extends ParserRuleContext {

        public TerminalNode LITERAL_SWITCH() {
            return getToken(JavaLanguageParser.LITERAL_SWITCH, 0);
        }

        public ParExpressionContext parExpression() {
            return getRuleContext(ParExpressionContext.class, 0);
        }

        public TerminalNode LCURLY() {
            return getToken(JavaLanguageParser.LCURLY, 0);
        }

        public SwitchBlockContext switchBlock() {
            return getRuleContext(SwitchBlockContext.class, 0);
        }

        public TerminalNode RCURLY() {
            return getToken(JavaLanguageParser.RCURLY, 0);
        }

        public SwitchExpressionOrStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_switchExpressionOrStatement;
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitSwitchExpressionOrStatement(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final SwitchExpressionOrStatementContext switchExpressionOrStatement() throws RecognitionException {
        SwitchExpressionOrStatementContext _localctx = new SwitchExpressionOrStatementContext(_ctx, getState());
        enterRule(_localctx, 162, RULE_switchExpressionOrStatement);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1103);
                match(LITERAL_SWITCH);
                setState(1104);
                parExpression();
                setState(1105);
                match(LCURLY);
                switchBlockDepth++;
                setState(1107);
                switchBlock();
                switchBlockDepth--;
                setState(1109);
                match(RCURLY);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class SwitchBlockContext extends ParserRuleContext {

        public SwitchBlockContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_switchBlock;
        }

        public SwitchBlockContext() {
        }

        public void copyFrom(SwitchBlockContext ctx) {
            super.copyFrom(ctx);
        }
    }

    public static class SwitchRulesContext extends SwitchBlockContext {

        public List<SwitchLabeledRuleContext> switchLabeledRule() {
            return getRuleContexts(SwitchLabeledRuleContext.class);
        }

        public SwitchLabeledRuleContext switchLabeledRule(int i) {
            return getRuleContext(SwitchLabeledRuleContext.class, i);
        }

        public SwitchRulesContext(SwitchBlockContext ctx) {
            copyFrom(ctx);
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitSwitchRules(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public static class SwitchBlocksContext extends SwitchBlockContext {

        public SwitchBlockStatementGroupContext switchBlockStatementGroup;

        public List<SwitchBlockStatementGroupContext> groups = new ArrayList<SwitchBlockStatementGroupContext>();

        public SwitchLabelContext switchLabel;

        public List<SwitchLabelContext> emptyLabels = new ArrayList<SwitchLabelContext>();

        public List<SwitchBlockStatementGroupContext> switchBlockStatementGroup() {
            return getRuleContexts(SwitchBlockStatementGroupContext.class);
        }

        public SwitchBlockStatementGroupContext switchBlockStatementGroup(int i) {
            return getRuleContext(SwitchBlockStatementGroupContext.class, i);
        }

        public List<SwitchLabelContext> switchLabel() {
            return getRuleContexts(SwitchLabelContext.class);
        }

        public SwitchLabelContext switchLabel(int i) {
            return getRuleContext(SwitchLabelContext.class, i);
        }

        public SwitchBlocksContext(SwitchBlockContext ctx) {
            copyFrom(ctx);
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitSwitchBlocks(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final SwitchBlockContext switchBlock() throws RecognitionException {
        SwitchBlockContext _localctx = new SwitchBlockContext(_ctx, getState());
        enterRule(_localctx, 164, RULE_switchBlock);
        int _la;
        try {
            int _alt;
            setState(1128);
            _errHandler.sync(this);
            switch(getInterpreter().adaptivePredict(_input, 128, _ctx)) {
                case 1:
                    _localctx = new SwitchRulesContext(_localctx);
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(1112);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        do {
                            {
                                {
                                    setState(1111);
                                    switchLabeledRule();
                                }
                            }
                            setState(1114);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                        } while (_la == LITERAL_CASE || _la == LITERAL_DEFAULT);
                    }
                    break;
                case 2:
                    _localctx = new SwitchBlocksContext(_localctx);
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(1119);
                        _errHandler.sync(this);
                        _alt = getInterpreter().adaptivePredict(_input, 126, _ctx);
                        while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                            if (_alt == 1) {
                                {
                                    {
                                        setState(1116);
                                        ((SwitchBlocksContext) _localctx).switchBlockStatementGroup = switchBlockStatementGroup();
                                        ((SwitchBlocksContext) _localctx).groups.add(((SwitchBlocksContext) _localctx).switchBlockStatementGroup);
                                    }
                                }
                            }
                            setState(1121);
                            _errHandler.sync(this);
                            _alt = getInterpreter().adaptivePredict(_input, 126, _ctx);
                        }
                        setState(1125);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        while (_la == LITERAL_CASE || _la == LITERAL_DEFAULT) {
                            {
                                {
                                    setState(1122);
                                    ((SwitchBlocksContext) _localctx).switchLabel = switchLabel();
                                    ((SwitchBlocksContext) _localctx).emptyLabels.add(((SwitchBlocksContext) _localctx).switchLabel);
                                }
                            }
                            setState(1127);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                        }
                    }
                    break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class SwitchLabeledRuleContext extends ParserRuleContext {

        public SwitchLabeledExpressionContext switchLabeledExpression() {
            return getRuleContext(SwitchLabeledExpressionContext.class, 0);
        }

        public SwitchLabeledBlockContext switchLabeledBlock() {
            return getRuleContext(SwitchLabeledBlockContext.class, 0);
        }

        public SwitchLabeledThrowContext switchLabeledThrow() {
            return getRuleContext(SwitchLabeledThrowContext.class, 0);
        }

        public SwitchLabeledRuleContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_switchLabeledRule;
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitSwitchLabeledRule(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final SwitchLabeledRuleContext switchLabeledRule() throws RecognitionException {
        SwitchLabeledRuleContext _localctx = new SwitchLabeledRuleContext(_ctx, getState());
        enterRule(_localctx, 166, RULE_switchLabeledRule);
        try {
            setState(1133);
            _errHandler.sync(this);
            switch(getInterpreter().adaptivePredict(_input, 129, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(1130);
                        switchLabeledExpression();
                    }
                    break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(1131);
                        switchLabeledBlock();
                    }
                    break;
                case 3:
                    enterOuterAlt(_localctx, 3);
                    {
                        setState(1132);
                        switchLabeledThrow();
                    }
                    break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class SwitchLabeledExpressionContext extends ParserRuleContext {

        public SwitchLabelContext switchLabel() {
            return getRuleContext(SwitchLabelContext.class, 0);
        }

        public TerminalNode LAMBDA() {
            return getToken(JavaLanguageParser.LAMBDA, 0);
        }

        public ExpressionContext expression() {
            return getRuleContext(ExpressionContext.class, 0);
        }

        public TerminalNode SEMI() {
            return getToken(JavaLanguageParser.SEMI, 0);
        }

        public SwitchLabeledExpressionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_switchLabeledExpression;
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitSwitchLabeledExpression(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final SwitchLabeledExpressionContext switchLabeledExpression() throws RecognitionException {
        SwitchLabeledExpressionContext _localctx = new SwitchLabeledExpressionContext(_ctx, getState());
        enterRule(_localctx, 168, RULE_switchLabeledExpression);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1135);
                switchLabel();
                setState(1136);
                match(LAMBDA);
                setState(1137);
                expression();
                setState(1138);
                match(SEMI);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class SwitchLabeledBlockContext extends ParserRuleContext {

        public SwitchLabelContext switchLabel() {
            return getRuleContext(SwitchLabelContext.class, 0);
        }

        public TerminalNode LAMBDA() {
            return getToken(JavaLanguageParser.LAMBDA, 0);
        }

        public BlockContext block() {
            return getRuleContext(BlockContext.class, 0);
        }

        public SwitchLabeledBlockContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_switchLabeledBlock;
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitSwitchLabeledBlock(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final SwitchLabeledBlockContext switchLabeledBlock() throws RecognitionException {
        SwitchLabeledBlockContext _localctx = new SwitchLabeledBlockContext(_ctx, getState());
        enterRule(_localctx, 170, RULE_switchLabeledBlock);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1140);
                switchLabel();
                setState(1141);
                match(LAMBDA);
                setState(1142);
                block();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class SwitchLabeledThrowContext extends ParserRuleContext {

        public SwitchLabelContext switchLabel() {
            return getRuleContext(SwitchLabelContext.class, 0);
        }

        public TerminalNode LAMBDA() {
            return getToken(JavaLanguageParser.LAMBDA, 0);
        }

        public TerminalNode LITERAL_THROW() {
            return getToken(JavaLanguageParser.LITERAL_THROW, 0);
        }

        public ExpressionContext expression() {
            return getRuleContext(ExpressionContext.class, 0);
        }

        public TerminalNode SEMI() {
            return getToken(JavaLanguageParser.SEMI, 0);
        }

        public SwitchLabeledThrowContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_switchLabeledThrow;
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitSwitchLabeledThrow(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final SwitchLabeledThrowContext switchLabeledThrow() throws RecognitionException {
        SwitchLabeledThrowContext _localctx = new SwitchLabeledThrowContext(_ctx, getState());
        enterRule(_localctx, 172, RULE_switchLabeledThrow);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1144);
                switchLabel();
                setState(1145);
                match(LAMBDA);
                setState(1146);
                match(LITERAL_THROW);
                setState(1147);
                expression();
                setState(1148);
                match(SEMI);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class ElseStatContext extends ParserRuleContext {

        public TerminalNode LITERAL_ELSE() {
            return getToken(JavaLanguageParser.LITERAL_ELSE, 0);
        }

        public StatementContext statement() {
            return getRuleContext(StatementContext.class, 0);
        }

        public ElseStatContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_elseStat;
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitElseStat(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final ElseStatContext elseStat() throws RecognitionException {
        ElseStatContext _localctx = new ElseStatContext(_ctx, getState());
        enterRule(_localctx, 174, RULE_elseStat);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1150);
                match(LITERAL_ELSE);
                setState(1151);
                statement();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class CatchClauseContext extends ParserRuleContext {

        public TerminalNode LITERAL_CATCH() {
            return getToken(JavaLanguageParser.LITERAL_CATCH, 0);
        }

        public TerminalNode LPAREN() {
            return getToken(JavaLanguageParser.LPAREN, 0);
        }

        public CatchParameterContext catchParameter() {
            return getRuleContext(CatchParameterContext.class, 0);
        }

        public TerminalNode RPAREN() {
            return getToken(JavaLanguageParser.RPAREN, 0);
        }

        public BlockContext block() {
            return getRuleContext(BlockContext.class, 0);
        }

        public CatchClauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_catchClause;
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitCatchClause(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final CatchClauseContext catchClause() throws RecognitionException {
        CatchClauseContext _localctx = new CatchClauseContext(_ctx, getState());
        enterRule(_localctx, 176, RULE_catchClause);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1153);
                match(LITERAL_CATCH);
                setState(1154);
                match(LPAREN);
                setState(1155);
                catchParameter();
                setState(1156);
                match(RPAREN);
                setState(1157);
                block();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class CatchParameterContext extends ParserRuleContext {

        public VariableModifierContext variableModifier;

        public List<VariableModifierContext> mods = new ArrayList<VariableModifierContext>();

        public CatchTypeContext catchType() {
            return getRuleContext(CatchTypeContext.class, 0);
        }

        public IdContext id() {
            return getRuleContext(IdContext.class, 0);
        }

        public List<VariableModifierContext> variableModifier() {
            return getRuleContexts(VariableModifierContext.class);
        }

        public VariableModifierContext variableModifier(int i) {
            return getRuleContext(VariableModifierContext.class, i);
        }

        public CatchParameterContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_catchParameter;
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitCatchParameter(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final CatchParameterContext catchParameter() throws RecognitionException {
        CatchParameterContext _localctx = new CatchParameterContext(_ctx, getState());
        enterRule(_localctx, 178, RULE_catchParameter);
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(1162);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input, 130, _ctx);
                while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                    if (_alt == 1) {
                        {
                            {
                                setState(1159);
                                ((CatchParameterContext) _localctx).variableModifier = variableModifier();
                                ((CatchParameterContext) _localctx).mods.add(((CatchParameterContext) _localctx).variableModifier);
                            }
                        }
                    }
                    setState(1164);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 130, _ctx);
                }
                setState(1165);
                catchType();
                setState(1166);
                id();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class CatchTypeContext extends ParserRuleContext {

        public List<ClassOrInterfaceTypeContext> classOrInterfaceType() {
            return getRuleContexts(ClassOrInterfaceTypeContext.class);
        }

        public ClassOrInterfaceTypeContext classOrInterfaceType(int i) {
            return getRuleContext(ClassOrInterfaceTypeContext.class, i);
        }

        public List<TerminalNode> BOR() {
            return getTokens(JavaLanguageParser.BOR);
        }

        public TerminalNode BOR(int i) {
            return getToken(JavaLanguageParser.BOR, i);
        }

        public CatchTypeContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_catchType;
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitCatchType(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final CatchTypeContext catchType() throws RecognitionException {
        CatchTypeContext _localctx = new CatchTypeContext(_ctx, getState());
        enterRule(_localctx, 180, RULE_catchType);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1168);
                classOrInterfaceType(false);
                setState(1173);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == BOR) {
                    {
                        {
                            setState(1169);
                            match(BOR);
                            setState(1170);
                            classOrInterfaceType(false);
                        }
                    }
                    setState(1175);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class FinallyBlockContext extends ParserRuleContext {

        public TerminalNode LITERAL_FINALLY() {
            return getToken(JavaLanguageParser.LITERAL_FINALLY, 0);
        }

        public BlockContext block() {
            return getRuleContext(BlockContext.class, 0);
        }

        public FinallyBlockContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_finallyBlock;
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitFinallyBlock(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final FinallyBlockContext finallyBlock() throws RecognitionException {
        FinallyBlockContext _localctx = new FinallyBlockContext(_ctx, getState());
        enterRule(_localctx, 182, RULE_finallyBlock);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1176);
                match(LITERAL_FINALLY);
                setState(1177);
                block();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class ResourceSpecificationContext extends ParserRuleContext {

        public TerminalNode LPAREN() {
            return getToken(JavaLanguageParser.LPAREN, 0);
        }

        public ResourcesContext resources() {
            return getRuleContext(ResourcesContext.class, 0);
        }

        public TerminalNode RPAREN() {
            return getToken(JavaLanguageParser.RPAREN, 0);
        }

        public TerminalNode SEMI() {
            return getToken(JavaLanguageParser.SEMI, 0);
        }

        public ResourceSpecificationContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_resourceSpecification;
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitResourceSpecification(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final ResourceSpecificationContext resourceSpecification() throws RecognitionException {
        ResourceSpecificationContext _localctx = new ResourceSpecificationContext(_ctx, getState());
        enterRule(_localctx, 184, RULE_resourceSpecification);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1179);
                match(LPAREN);
                setState(1180);
                resources();
                setState(1182);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == SEMI) {
                    {
                        setState(1181);
                        match(SEMI);
                    }
                }
                setState(1184);
                match(RPAREN);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class ResourcesContext extends ParserRuleContext {

        public List<ResourceContext> resource() {
            return getRuleContexts(ResourceContext.class);
        }

        public ResourceContext resource(int i) {
            return getRuleContext(ResourceContext.class, i);
        }

        public List<TerminalNode> SEMI() {
            return getTokens(JavaLanguageParser.SEMI);
        }

        public TerminalNode SEMI(int i) {
            return getToken(JavaLanguageParser.SEMI, i);
        }

        public ResourcesContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_resources;
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitResources(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final ResourcesContext resources() throws RecognitionException {
        ResourcesContext _localctx = new ResourcesContext(_ctx, getState());
        enterRule(_localctx, 186, RULE_resources);
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(1186);
                resource();
                setState(1191);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input, 133, _ctx);
                while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                    if (_alt == 1) {
                        {
                            {
                                setState(1187);
                                match(SEMI);
                                setState(1188);
                                resource();
                            }
                        }
                    }
                    setState(1193);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 133, _ctx);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class ResourceContext extends ParserRuleContext {

        public ResourceDeclarationContext resourceDeclaration() {
            return getRuleContext(ResourceDeclarationContext.class, 0);
        }

        public VariableAccessContext variableAccess() {
            return getRuleContext(VariableAccessContext.class, 0);
        }

        public ResourceContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_resource;
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitResource(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final ResourceContext resource() throws RecognitionException {
        ResourceContext _localctx = new ResourceContext(_ctx, getState());
        enterRule(_localctx, 188, RULE_resource);
        try {
            setState(1196);
            _errHandler.sync(this);
            switch(getInterpreter().adaptivePredict(_input, 134, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(1194);
                        resourceDeclaration();
                    }
                    break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(1195);
                        variableAccess();
                    }
                    break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class ResourceDeclarationContext extends ParserRuleContext {

        public VariableModifierContext variableModifier;

        public List<VariableModifierContext> mods = new ArrayList<VariableModifierContext>();

        public ClassOrInterfaceTypeContext type;

        public VariableDeclaratorIdContext variableDeclaratorId() {
            return getRuleContext(VariableDeclaratorIdContext.class, 0);
        }

        public TerminalNode ASSIGN() {
            return getToken(JavaLanguageParser.ASSIGN, 0);
        }

        public ExpressionContext expression() {
            return getRuleContext(ExpressionContext.class, 0);
        }

        public ClassOrInterfaceTypeContext classOrInterfaceType() {
            return getRuleContext(ClassOrInterfaceTypeContext.class, 0);
        }

        public List<VariableModifierContext> variableModifier() {
            return getRuleContexts(VariableModifierContext.class);
        }

        public VariableModifierContext variableModifier(int i) {
            return getRuleContext(VariableModifierContext.class, i);
        }

        public ResourceDeclarationContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_resourceDeclaration;
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitResourceDeclaration(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final ResourceDeclarationContext resourceDeclaration() throws RecognitionException {
        ResourceDeclarationContext _localctx = new ResourceDeclarationContext(_ctx, getState());
        enterRule(_localctx, 190, RULE_resourceDeclaration);
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(1201);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input, 135, _ctx);
                while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                    if (_alt == 1) {
                        {
                            {
                                setState(1198);
                                ((ResourceDeclarationContext) _localctx).variableModifier = variableModifier();
                                ((ResourceDeclarationContext) _localctx).mods.add(((ResourceDeclarationContext) _localctx).variableModifier);
                            }
                        }
                    }
                    setState(1203);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 135, _ctx);
                }
                setState(1204);
                ((ResourceDeclarationContext) _localctx).type = classOrInterfaceType(true);
                setState(1205);
                variableDeclaratorId(_localctx.mods, _localctx.type);
                setState(1206);
                match(ASSIGN);
                setState(1207);
                expression();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class VariableAccessContext extends ParserRuleContext {

        public FieldAccessNoIdentContext fieldAccessNoIdent;

        public List<FieldAccessNoIdentContext> accessList = new ArrayList<FieldAccessNoIdentContext>();

        public IdContext id() {
            return getRuleContext(IdContext.class, 0);
        }

        public TerminalNode LITERAL_THIS() {
            return getToken(JavaLanguageParser.LITERAL_THIS, 0);
        }

        public List<FieldAccessNoIdentContext> fieldAccessNoIdent() {
            return getRuleContexts(FieldAccessNoIdentContext.class);
        }

        public FieldAccessNoIdentContext fieldAccessNoIdent(int i) {
            return getRuleContext(FieldAccessNoIdentContext.class, i);
        }

        public VariableAccessContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_variableAccess;
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitVariableAccess(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final VariableAccessContext variableAccess() throws RecognitionException {
        VariableAccessContext _localctx = new VariableAccessContext(_ctx, getState());
        enterRule(_localctx, 192, RULE_variableAccess);
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(1212);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input, 136, _ctx);
                while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                    if (_alt == 1) {
                        {
                            {
                                setState(1209);
                                ((VariableAccessContext) _localctx).fieldAccessNoIdent = fieldAccessNoIdent();
                                ((VariableAccessContext) _localctx).accessList.add(((VariableAccessContext) _localctx).fieldAccessNoIdent);
                            }
                        }
                    }
                    setState(1214);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 136, _ctx);
                }
                setState(1217);
                _errHandler.sync(this);
                switch(_input.LA(1)) {
                    case IDENT:
                    case LITERAL_RECORD:
                    case LITERAL_YIELD:
                    case LITERAL_NON_SEALED:
                    case LITERAL_SEALED:
                    case LITERAL_PERMITS:
                        {
                            setState(1215);
                            id();
                        }
                        break;
                    case LITERAL_THIS:
                        {
                            setState(1216);
                            match(LITERAL_THIS);
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class FieldAccessNoIdentContext extends ParserRuleContext {

        public ExprContext expr() {
            return getRuleContext(ExprContext.class, 0);
        }

        public TerminalNode DOT() {
            return getToken(JavaLanguageParser.DOT, 0);
        }

        public FieldAccessNoIdentContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_fieldAccessNoIdent;
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitFieldAccessNoIdent(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final FieldAccessNoIdentContext fieldAccessNoIdent() throws RecognitionException {
        FieldAccessNoIdentContext _localctx = new FieldAccessNoIdentContext(_ctx, getState());
        enterRule(_localctx, 194, RULE_fieldAccessNoIdent);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1219);
                expr(0);
                setState(1220);
                match(DOT);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class SwitchBlockStatementGroupContext extends ParserRuleContext {

        public BlockStatementContext blockStatement;

        public List<BlockStatementContext> slists = new ArrayList<BlockStatementContext>();

        public List<SwitchLabelContext> switchLabel() {
            return getRuleContexts(SwitchLabelContext.class);
        }

        public SwitchLabelContext switchLabel(int i) {
            return getRuleContext(SwitchLabelContext.class, i);
        }

        public List<BlockStatementContext> blockStatement() {
            return getRuleContexts(BlockStatementContext.class);
        }

        public BlockStatementContext blockStatement(int i) {
            return getRuleContext(BlockStatementContext.class, i);
        }

        public SwitchBlockStatementGroupContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_switchBlockStatementGroup;
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitSwitchBlockStatementGroup(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final SwitchBlockStatementGroupContext switchBlockStatementGroup() throws RecognitionException {
        SwitchBlockStatementGroupContext _localctx = new SwitchBlockStatementGroupContext(_ctx, getState());
        enterRule(_localctx, 196, RULE_switchBlockStatementGroup);
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(1223);
                _errHandler.sync(this);
                _alt = 1;
                do {
                    switch(_alt) {
                        case 1:
                            {
                                {
                                    setState(1222);
                                    switchLabel();
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    setState(1225);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 138, _ctx);
                } while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER);
                setState(1228);
                _errHandler.sync(this);
                _alt = 1;
                do {
                    switch(_alt) {
                        case 1:
                            {
                                {
                                    setState(1227);
                                    ((SwitchBlockStatementGroupContext) _localctx).blockStatement = blockStatement();
                                    ((SwitchBlockStatementGroupContext) _localctx).slists.add(((SwitchBlockStatementGroupContext) _localctx).blockStatement);
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    setState(1230);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 139, _ctx);
                } while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class SwitchLabelContext extends ParserRuleContext {

        public SwitchLabelContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_switchLabel;
        }

        public SwitchLabelContext() {
        }

        public void copyFrom(SwitchLabelContext ctx) {
            super.copyFrom(ctx);
        }
    }

    public static class DefaultLabelContext extends SwitchLabelContext {

        public TerminalNode LITERAL_DEFAULT() {
            return getToken(JavaLanguageParser.LITERAL_DEFAULT, 0);
        }

        public TerminalNode COLON() {
            return getToken(JavaLanguageParser.COLON, 0);
        }

        public DefaultLabelContext(SwitchLabelContext ctx) {
            copyFrom(ctx);
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitDefaultLabel(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public static class CaseLabelContext extends SwitchLabelContext {

        public TerminalNode LITERAL_CASE() {
            return getToken(JavaLanguageParser.LITERAL_CASE, 0);
        }

        public CaseConstantsContext caseConstants() {
            return getRuleContext(CaseConstantsContext.class, 0);
        }

        public TerminalNode COLON() {
            return getToken(JavaLanguageParser.COLON, 0);
        }

        public CaseLabelContext(SwitchLabelContext ctx) {
            copyFrom(ctx);
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitCaseLabel(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final SwitchLabelContext switchLabel() throws RecognitionException {
        SwitchLabelContext _localctx = new SwitchLabelContext(_ctx, getState());
        enterRule(_localctx, 198, RULE_switchLabel);
        try {
            setState(1241);
            _errHandler.sync(this);
            switch(_input.LA(1)) {
                case LITERAL_CASE:
                    _localctx = new CaseLabelContext(_localctx);
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(1232);
                        match(LITERAL_CASE);
                        setState(1233);
                        caseConstants();
                        setState(1235);
                        _errHandler.sync(this);
                        switch(getInterpreter().adaptivePredict(_input, 140, _ctx)) {
                            case 1:
                                {
                                    setState(1234);
                                    match(COLON);
                                }
                                break;
                        }
                    }
                    break;
                case LITERAL_DEFAULT:
                    _localctx = new DefaultLabelContext(_localctx);
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(1237);
                        match(LITERAL_DEFAULT);
                        setState(1239);
                        _errHandler.sync(this);
                        switch(getInterpreter().adaptivePredict(_input, 141, _ctx)) {
                            case 1:
                                {
                                    setState(1238);
                                    match(COLON);
                                }
                                break;
                        }
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class CaseConstantsContext extends ParserRuleContext {

        public List<CaseConstantContext> caseConstant() {
            return getRuleContexts(CaseConstantContext.class);
        }

        public CaseConstantContext caseConstant(int i) {
            return getRuleContext(CaseConstantContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(JavaLanguageParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(JavaLanguageParser.COMMA, i);
        }

        public CaseConstantsContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_caseConstants;
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitCaseConstants(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final CaseConstantsContext caseConstants() throws RecognitionException {
        CaseConstantsContext _localctx = new CaseConstantsContext(_ctx, getState());
        enterRule(_localctx, 200, RULE_caseConstants);
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(1243);
                caseConstant();
                setState(1248);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input, 143, _ctx);
                while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                    if (_alt == 1) {
                        {
                            {
                                setState(1244);
                                match(COMMA);
                                setState(1245);
                                caseConstant();
                            }
                        }
                    }
                    setState(1250);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 143, _ctx);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class CaseConstantContext extends ParserRuleContext {

        public PatternContext pattern() {
            return getRuleContext(PatternContext.class, 0);
        }

        public ExpressionContext expression() {
            return getRuleContext(ExpressionContext.class, 0);
        }

        public TerminalNode LITERAL_DEFAULT() {
            return getToken(JavaLanguageParser.LITERAL_DEFAULT, 0);
        }

        public CaseConstantContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_caseConstant;
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitCaseConstant(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final CaseConstantContext caseConstant() throws RecognitionException {
        CaseConstantContext _localctx = new CaseConstantContext(_ctx, getState());
        enterRule(_localctx, 202, RULE_caseConstant);
        try {
            setState(1254);
            _errHandler.sync(this);
            switch(getInterpreter().adaptivePredict(_input, 144, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(1251);
                        pattern();
                    }
                    break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(1252);
                        expression();
                    }
                    break;
                case 3:
                    enterOuterAlt(_localctx, 3);
                    {
                        setState(1253);
                        match(LITERAL_DEFAULT);
                    }
                    break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class ForControlContext extends ParserRuleContext {

        public ForControlContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_forControl;
        }

        public ForControlContext() {
        }

        public void copyFrom(ForControlContext ctx) {
            super.copyFrom(ctx);
        }
    }

    public static class EnhancedForContext extends ForControlContext {

        public TerminalNode LPAREN() {
            return getToken(JavaLanguageParser.LPAREN, 0);
        }

        public EnhancedForControlContext enhancedForControl() {
            return getRuleContext(EnhancedForControlContext.class, 0);
        }

        public TerminalNode RPAREN() {
            return getToken(JavaLanguageParser.RPAREN, 0);
        }

        public EnhancedForContext(ForControlContext ctx) {
            copyFrom(ctx);
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitEnhancedFor(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public static class ForForContext extends ForControlContext {

        public ExpressionContext forCond;

        public ExpressionListContext forUpdate;

        public TerminalNode LPAREN() {
            return getToken(JavaLanguageParser.LPAREN, 0);
        }

        public List<TerminalNode> SEMI() {
            return getTokens(JavaLanguageParser.SEMI);
        }

        public TerminalNode SEMI(int i) {
            return getToken(JavaLanguageParser.SEMI, i);
        }

        public TerminalNode RPAREN() {
            return getToken(JavaLanguageParser.RPAREN, 0);
        }

        public ForInitContext forInit() {
            return getRuleContext(ForInitContext.class, 0);
        }

        public ExpressionContext expression() {
            return getRuleContext(ExpressionContext.class, 0);
        }

        public ExpressionListContext expressionList() {
            return getRuleContext(ExpressionListContext.class, 0);
        }

        public ForForContext(ForControlContext ctx) {
            copyFrom(ctx);
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitForFor(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final ForControlContext forControl() throws RecognitionException {
        ForControlContext _localctx = new ForControlContext(_ctx, getState());
        enterRule(_localctx, 204, RULE_forControl);
        int _la;
        try {
            setState(1273);
            _errHandler.sync(this);
            switch(getInterpreter().adaptivePredict(_input, 148, _ctx)) {
                case 1:
                    _localctx = new EnhancedForContext(_localctx);
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(1256);
                        match(LPAREN);
                        setState(1257);
                        enhancedForControl();
                        setState(1258);
                        match(RPAREN);
                    }
                    break;
                case 2:
                    _localctx = new ForForContext(_localctx);
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(1260);
                        match(LPAREN);
                        setState(1262);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if ((((_la - 39)) & ~0x3f) == 0 && ((1L << (_la - 39)) & 37156484702796807L) != 0 || (((_la - 125)) & ~0x3f) == 0 && ((1L << (_la - 125)) & 35184372117491L) != 0 || (((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & 4279144719L) != 0) {
                            {
                                setState(1261);
                                forInit();
                            }
                        }
                        setState(1264);
                        match(SEMI);
                        setState(1266);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (((_la) & ~0x3f) == 0 && ((1L << _la) & 575897802350002176L) != 0 || (((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & -2313161358608162803L) != 0 || (((_la - 170)) & ~0x3f) == 0 && ((1L << (_la - 170)) & 17948033811480577L) != 0) {
                            {
                                setState(1265);
                                ((ForForContext) _localctx).forCond = expression();
                            }
                        }
                        setState(1268);
                        match(SEMI);
                        setState(1270);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (((_la) & ~0x3f) == 0 && ((1L << _la) & 575897802350002176L) != 0 || (((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & -2313161358608162803L) != 0 || (((_la - 170)) & ~0x3f) == 0 && ((1L << (_la - 170)) & 17948033811480577L) != 0) {
                            {
                                setState(1269);
                                ((ForForContext) _localctx).forUpdate = expressionList();
                            }
                        }
                        setState(1272);
                        match(RPAREN);
                    }
                    break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class ForInitContext extends ParserRuleContext {

        public LocalVariableDeclarationContext localVariableDeclaration() {
            return getRuleContext(LocalVariableDeclarationContext.class, 0);
        }

        public ExpressionListContext expressionList() {
            return getRuleContext(ExpressionListContext.class, 0);
        }

        public ForInitContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_forInit;
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitForInit(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final ForInitContext forInit() throws RecognitionException {
        ForInitContext _localctx = new ForInitContext(_ctx, getState());
        enterRule(_localctx, 206, RULE_forInit);
        try {
            setState(1277);
            _errHandler.sync(this);
            switch(getInterpreter().adaptivePredict(_input, 149, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(1275);
                        localVariableDeclaration();
                    }
                    break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(1276);
                        expressionList();
                    }
                    break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class EnhancedForControlContext extends ParserRuleContext {

        public VariableModifierContext variableModifier;

        public List<VariableModifierContext> mods = new ArrayList<VariableModifierContext>();

        public TypeTypeContext type;

        public VariableDeclaratorIdContext variableDeclaratorId() {
            return getRuleContext(VariableDeclaratorIdContext.class, 0);
        }

        public TerminalNode COLON() {
            return getToken(JavaLanguageParser.COLON, 0);
        }

        public ExpressionContext expression() {
            return getRuleContext(ExpressionContext.class, 0);
        }

        public TypeTypeContext typeType() {
            return getRuleContext(TypeTypeContext.class, 0);
        }

        public List<VariableModifierContext> variableModifier() {
            return getRuleContexts(VariableModifierContext.class);
        }

        public VariableModifierContext variableModifier(int i) {
            return getRuleContext(VariableModifierContext.class, i);
        }

        public EnhancedForControlContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_enhancedForControl;
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitEnhancedForControl(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final EnhancedForControlContext enhancedForControl() throws RecognitionException {
        EnhancedForControlContext _localctx = new EnhancedForControlContext(_ctx, getState());
        enterRule(_localctx, 208, RULE_enhancedForControl);
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(1282);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input, 150, _ctx);
                while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                    if (_alt == 1) {
                        {
                            {
                                setState(1279);
                                ((EnhancedForControlContext) _localctx).variableModifier = variableModifier();
                                ((EnhancedForControlContext) _localctx).mods.add(((EnhancedForControlContext) _localctx).variableModifier);
                            }
                        }
                    }
                    setState(1284);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 150, _ctx);
                }
                setState(1285);
                ((EnhancedForControlContext) _localctx).type = typeType(true);
                setState(1286);
                variableDeclaratorId(_localctx.mods, _localctx.type);
                setState(1287);
                match(COLON);
                setState(1288);
                expression();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class ParExpressionContext extends ParserRuleContext {

        public TerminalNode LPAREN() {
            return getToken(JavaLanguageParser.LPAREN, 0);
        }

        public ExpressionContext expression() {
            return getRuleContext(ExpressionContext.class, 0);
        }

        public TerminalNode RPAREN() {
            return getToken(JavaLanguageParser.RPAREN, 0);
        }

        public ParExpressionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_parExpression;
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitParExpression(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final ParExpressionContext parExpression() throws RecognitionException {
        ParExpressionContext _localctx = new ParExpressionContext(_ctx, getState());
        enterRule(_localctx, 210, RULE_parExpression);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1290);
                match(LPAREN);
                setState(1291);
                expression();
                setState(1292);
                match(RPAREN);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class ExpressionListContext extends ParserRuleContext {

        public ExpressionContext startExp;

        public List<ExpressionContext> expression() {
            return getRuleContexts(ExpressionContext.class);
        }

        public ExpressionContext expression(int i) {
            return getRuleContext(ExpressionContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(JavaLanguageParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(JavaLanguageParser.COMMA, i);
        }

        public ExpressionListContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_expressionList;
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitExpressionList(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final ExpressionListContext expressionList() throws RecognitionException {
        ExpressionListContext _localctx = new ExpressionListContext(_ctx, getState());
        enterRule(_localctx, 212, RULE_expressionList);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1294);
                ((ExpressionListContext) _localctx).startExp = expression();
                setState(1299);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == COMMA) {
                    {
                        {
                            setState(1295);
                            match(COMMA);
                            setState(1296);
                            expression();
                        }
                    }
                    setState(1301);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class ExpressionContext extends ParserRuleContext {

        public ExprContext expr() {
            return getRuleContext(ExprContext.class, 0);
        }

        public ExpressionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_expression;
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitExpression(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final ExpressionContext expression() throws RecognitionException {
        ExpressionContext _localctx = new ExpressionContext(_ctx, getState());
        enterRule(_localctx, 214, RULE_expression);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1302);
                expr(0);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class ExprContext extends ParserRuleContext {

        public ExprContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_expr;
        }

        public ExprContext() {
        }

        public void copyFrom(ExprContext ctx) {
            super.copyFrom(ctx);
        }
    }

    public static class RefOpContext extends ExprContext {

        public Token bop;

        public ExprContext expr() {
            return getRuleContext(ExprContext.class, 0);
        }

        public IdContext id() {
            return getRuleContext(IdContext.class, 0);
        }

        public TerminalNode DOT() {
            return getToken(JavaLanguageParser.DOT, 0);
        }

        public RefOpContext(ExprContext ctx) {
            copyFrom(ctx);
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitRefOp(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public static class SuperExpContext extends ExprContext {

        public Token bop;

        public ExprContext expr() {
            return getRuleContext(ExprContext.class, 0);
        }

        public TerminalNode LITERAL_SUPER() {
            return getToken(JavaLanguageParser.LITERAL_SUPER, 0);
        }

        public TerminalNode DOT() {
            return getToken(JavaLanguageParser.DOT, 0);
        }

        public NonWildcardTypeArgumentsContext nonWildcardTypeArguments() {
            return getRuleContext(NonWildcardTypeArgumentsContext.class, 0);
        }

        public SuperSuffixContext superSuffix() {
            return getRuleContext(SuperSuffixContext.class, 0);
        }

        public SuperExpContext(ExprContext ctx) {
            copyFrom(ctx);
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitSuperExp(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public static class InstanceOfExpContext extends ExprContext {

        public Token bop;

        public ExprContext expr() {
            return getRuleContext(ExprContext.class, 0);
        }

        public TerminalNode LITERAL_INSTANCEOF() {
            return getToken(JavaLanguageParser.LITERAL_INSTANCEOF, 0);
        }

        public PrimaryPatternContext primaryPattern() {
            return getRuleContext(PrimaryPatternContext.class, 0);
        }

        public TypeTypeContext typeType() {
            return getRuleContext(TypeTypeContext.class, 0);
        }

        public InstanceOfExpContext(ExprContext ctx) {
            copyFrom(ctx);
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitInstanceOfExp(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public static class BitShiftContext extends ExprContext {

        public List<ExprContext> expr() {
            return getRuleContexts(ExprContext.class);
        }

        public ExprContext expr(int i) {
            return getRuleContext(ExprContext.class, i);
        }

        public List<TerminalNode> LT() {
            return getTokens(JavaLanguageParser.LT);
        }

        public TerminalNode LT(int i) {
            return getToken(JavaLanguageParser.LT, i);
        }

        public List<TerminalNode> GT() {
            return getTokens(JavaLanguageParser.GT);
        }

        public TerminalNode GT(int i) {
            return getToken(JavaLanguageParser.GT, i);
        }

        public BitShiftContext(ExprContext ctx) {
            copyFrom(ctx);
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitBitShift(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public static class NewExpContext extends ExprContext {

        public TerminalNode LITERAL_NEW() {
            return getToken(JavaLanguageParser.LITERAL_NEW, 0);
        }

        public CreatorContext creator() {
            return getRuleContext(CreatorContext.class, 0);
        }

        public NewExpContext(ExprContext ctx) {
            copyFrom(ctx);
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitNewExp(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public static class PrefixContext extends ExprContext {

        public Token prefix;

        public ExprContext expr() {
            return getRuleContext(ExprContext.class, 0);
        }

        public TerminalNode PLUS() {
            return getToken(JavaLanguageParser.PLUS, 0);
        }

        public TerminalNode MINUS() {
            return getToken(JavaLanguageParser.MINUS, 0);
        }

        public TerminalNode INC() {
            return getToken(JavaLanguageParser.INC, 0);
        }

        public TerminalNode DEC() {
            return getToken(JavaLanguageParser.DEC, 0);
        }

        public TerminalNode BNOT() {
            return getToken(JavaLanguageParser.BNOT, 0);
        }

        public TerminalNode LNOT() {
            return getToken(JavaLanguageParser.LNOT, 0);
        }

        public PrefixContext(ExprContext ctx) {
            copyFrom(ctx);
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitPrefix(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public static class CastExpContext extends ExprContext {

        public TerminalNode LPAREN() {
            return getToken(JavaLanguageParser.LPAREN, 0);
        }

        public TypeCastParametersContext typeCastParameters() {
            return getRuleContext(TypeCastParametersContext.class, 0);
        }

        public TerminalNode RPAREN() {
            return getToken(JavaLanguageParser.RPAREN, 0);
        }

        public ExprContext expr() {
            return getRuleContext(ExprContext.class, 0);
        }

        public CastExpContext(ExprContext ctx) {
            copyFrom(ctx);
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitCastExp(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public static class IndexOpContext extends ExprContext {

        public List<ExprContext> expr() {
            return getRuleContexts(ExprContext.class);
        }

        public ExprContext expr(int i) {
            return getRuleContext(ExprContext.class, i);
        }

        public TerminalNode LBRACK() {
            return getToken(JavaLanguageParser.LBRACK, 0);
        }

        public TerminalNode RBRACK() {
            return getToken(JavaLanguageParser.RBRACK, 0);
        }

        public IndexOpContext(ExprContext ctx) {
            copyFrom(ctx);
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitIndexOp(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public static class InvOpContext extends ExprContext {

        public Token bop;

        public ExprContext expr() {
            return getRuleContext(ExprContext.class, 0);
        }

        public NonWildcardTypeArgumentsContext nonWildcardTypeArguments() {
            return getRuleContext(NonWildcardTypeArgumentsContext.class, 0);
        }

        public IdContext id() {
            return getRuleContext(IdContext.class, 0);
        }

        public TerminalNode LPAREN() {
            return getToken(JavaLanguageParser.LPAREN, 0);
        }

        public TerminalNode RPAREN() {
            return getToken(JavaLanguageParser.RPAREN, 0);
        }

        public TerminalNode DOT() {
            return getToken(JavaLanguageParser.DOT, 0);
        }

        public ExpressionListContext expressionList() {
            return getRuleContext(ExpressionListContext.class, 0);
        }

        public InvOpContext(ExprContext ctx) {
            copyFrom(ctx);
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitInvOp(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public static class InitExpContext extends ExprContext {

        public Token bop;

        public ExprContext expr() {
            return getRuleContext(ExprContext.class, 0);
        }

        public TerminalNode LITERAL_NEW() {
            return getToken(JavaLanguageParser.LITERAL_NEW, 0);
        }

        public InnerCreatorContext innerCreator() {
            return getRuleContext(InnerCreatorContext.class, 0);
        }

        public TerminalNode DOT() {
            return getToken(JavaLanguageParser.DOT, 0);
        }

        public NonWildcardTypeArgumentsContext nonWildcardTypeArguments() {
            return getRuleContext(NonWildcardTypeArgumentsContext.class, 0);
        }

        public InitExpContext(ExprContext ctx) {
            copyFrom(ctx);
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitInitExp(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public static class SimpleMethodCallContext extends ExprContext {

        public IdContext id() {
            return getRuleContext(IdContext.class, 0);
        }

        public TerminalNode LPAREN() {
            return getToken(JavaLanguageParser.LPAREN, 0);
        }

        public TerminalNode RPAREN() {
            return getToken(JavaLanguageParser.RPAREN, 0);
        }

        public ExpressionListContext expressionList() {
            return getRuleContext(ExpressionListContext.class, 0);
        }

        public SimpleMethodCallContext(ExprContext ctx) {
            copyFrom(ctx);
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitSimpleMethodCall(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public static class LambdaExpContext extends ExprContext {

        public LambdaExpressionContext lambdaExpression() {
            return getRuleContext(LambdaExpressionContext.class, 0);
        }

        public LambdaExpContext(ExprContext ctx) {
            copyFrom(ctx);
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitLambdaExp(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public static class ThisExpContext extends ExprContext {

        public Token bop;

        public ExprContext expr() {
            return getRuleContext(ExprContext.class, 0);
        }

        public TerminalNode LITERAL_THIS() {
            return getToken(JavaLanguageParser.LITERAL_THIS, 0);
        }

        public TerminalNode DOT() {
            return getToken(JavaLanguageParser.DOT, 0);
        }

        public ThisExpContext(ExprContext ctx) {
            copyFrom(ctx);
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitThisExp(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public static class PrimaryExpContext extends ExprContext {

        public PrimaryContext primary() {
            return getRuleContext(PrimaryContext.class, 0);
        }

        public PrimaryExpContext(ExprContext ctx) {
            copyFrom(ctx);
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitPrimaryExp(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public static class PostfixContext extends ExprContext {

        public Token postfix;

        public ExprContext expr() {
            return getRuleContext(ExprContext.class, 0);
        }

        public TerminalNode INC() {
            return getToken(JavaLanguageParser.INC, 0);
        }

        public TerminalNode DEC() {
            return getToken(JavaLanguageParser.DEC, 0);
        }

        public PostfixContext(ExprContext ctx) {
            copyFrom(ctx);
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitPostfix(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public static class MethodRefContext extends ExprContext {

        public TypeTypeContext typeType() {
            return getRuleContext(TypeTypeContext.class, 0);
        }

        public TerminalNode DOUBLE_COLON() {
            return getToken(JavaLanguageParser.DOUBLE_COLON, 0);
        }

        public IdContext id() {
            return getRuleContext(IdContext.class, 0);
        }

        public TerminalNode LITERAL_NEW() {
            return getToken(JavaLanguageParser.LITERAL_NEW, 0);
        }

        public TypeArgumentsContext typeArguments() {
            return getRuleContext(TypeArgumentsContext.class, 0);
        }

        public ClassTypeContext classType() {
            return getRuleContext(ClassTypeContext.class, 0);
        }

        public ExprContext expr() {
            return getRuleContext(ExprContext.class, 0);
        }

        public MethodRefContext(ExprContext ctx) {
            copyFrom(ctx);
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitMethodRef(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public static class TernaryOpContext extends ExprContext {

        public Token bop;

        public List<ExprContext> expr() {
            return getRuleContexts(ExprContext.class);
        }

        public ExprContext expr(int i) {
            return getRuleContext(ExprContext.class, i);
        }

        public TerminalNode COLON() {
            return getToken(JavaLanguageParser.COLON, 0);
        }

        public TerminalNode QUESTION() {
            return getToken(JavaLanguageParser.QUESTION, 0);
        }

        public TernaryOpContext(ExprContext ctx) {
            copyFrom(ctx);
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitTernaryOp(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public static class BinOpContext extends ExprContext {

        public Token bop;

        public List<ExprContext> expr() {
            return getRuleContexts(ExprContext.class);
        }

        public ExprContext expr(int i) {
            return getRuleContext(ExprContext.class, i);
        }

        public TerminalNode STAR() {
            return getToken(JavaLanguageParser.STAR, 0);
        }

        public TerminalNode DIV() {
            return getToken(JavaLanguageParser.DIV, 0);
        }

        public TerminalNode MOD() {
            return getToken(JavaLanguageParser.MOD, 0);
        }

        public TerminalNode PLUS() {
            return getToken(JavaLanguageParser.PLUS, 0);
        }

        public TerminalNode MINUS() {
            return getToken(JavaLanguageParser.MINUS, 0);
        }

        public TerminalNode LE() {
            return getToken(JavaLanguageParser.LE, 0);
        }

        public TerminalNode GE() {
            return getToken(JavaLanguageParser.GE, 0);
        }

        public TerminalNode GT() {
            return getToken(JavaLanguageParser.GT, 0);
        }

        public TerminalNode LT() {
            return getToken(JavaLanguageParser.LT, 0);
        }

        public TerminalNode EQUAL() {
            return getToken(JavaLanguageParser.EQUAL, 0);
        }

        public TerminalNode NOT_EQUAL() {
            return getToken(JavaLanguageParser.NOT_EQUAL, 0);
        }

        public TerminalNode BAND() {
            return getToken(JavaLanguageParser.BAND, 0);
        }

        public TerminalNode BXOR() {
            return getToken(JavaLanguageParser.BXOR, 0);
        }

        public TerminalNode BOR() {
            return getToken(JavaLanguageParser.BOR, 0);
        }

        public TerminalNode LAND() {
            return getToken(JavaLanguageParser.LAND, 0);
        }

        public TerminalNode LOR() {
            return getToken(JavaLanguageParser.LOR, 0);
        }

        public TerminalNode ASSIGN() {
            return getToken(JavaLanguageParser.ASSIGN, 0);
        }

        public TerminalNode PLUS_ASSIGN() {
            return getToken(JavaLanguageParser.PLUS_ASSIGN, 0);
        }

        public TerminalNode MINUS_ASSIGN() {
            return getToken(JavaLanguageParser.MINUS_ASSIGN, 0);
        }

        public TerminalNode STAR_ASSIGN() {
            return getToken(JavaLanguageParser.STAR_ASSIGN, 0);
        }

        public TerminalNode DIV_ASSIGN() {
            return getToken(JavaLanguageParser.DIV_ASSIGN, 0);
        }

        public TerminalNode BAND_ASSIGN() {
            return getToken(JavaLanguageParser.BAND_ASSIGN, 0);
        }

        public TerminalNode BOR_ASSIGN() {
            return getToken(JavaLanguageParser.BOR_ASSIGN, 0);
        }

        public TerminalNode BXOR_ASSIGN() {
            return getToken(JavaLanguageParser.BXOR_ASSIGN, 0);
        }

        public TerminalNode SR_ASSIGN() {
            return getToken(JavaLanguageParser.SR_ASSIGN, 0);
        }

        public TerminalNode BSR_ASSIGN() {
            return getToken(JavaLanguageParser.BSR_ASSIGN, 0);
        }

        public TerminalNode SL_ASSIGN() {
            return getToken(JavaLanguageParser.SL_ASSIGN, 0);
        }

        public TerminalNode MOD_ASSIGN() {
            return getToken(JavaLanguageParser.MOD_ASSIGN, 0);
        }

        public BinOpContext(ExprContext ctx) {
            copyFrom(ctx);
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitBinOp(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public static class MethodCallContext extends ExprContext {

        public Token bop;

        public ExprContext expr() {
            return getRuleContext(ExprContext.class, 0);
        }

        public IdContext id() {
            return getRuleContext(IdContext.class, 0);
        }

        public TerminalNode LPAREN() {
            return getToken(JavaLanguageParser.LPAREN, 0);
        }

        public TerminalNode RPAREN() {
            return getToken(JavaLanguageParser.RPAREN, 0);
        }

        public TerminalNode DOT() {
            return getToken(JavaLanguageParser.DOT, 0);
        }

        public ExpressionListContext expressionList() {
            return getRuleContext(ExpressionListContext.class, 0);
        }

        public MethodCallContext(ExprContext ctx) {
            copyFrom(ctx);
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitMethodCall(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final ExprContext expr() throws RecognitionException {
        return expr(0);
    }

    private ExprContext expr(int _p) throws RecognitionException {
        ParserRuleContext _parentctx = _ctx;
        int _parentState = getState();
        ExprContext _localctx = new ExprContext(_ctx, _parentState);
        ExprContext _prevctx = _localctx;
        int _startState = 216;
        enterRecursionRule(_localctx, 216, RULE_expr, _p);
        int _la;
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(1341);
                _errHandler.sync(this);
                switch(getInterpreter().adaptivePredict(_input, 156, _ctx)) {
                    case 1:
                        {
                            _localctx = new PrimaryExpContext(_localctx);
                            _ctx = _localctx;
                            _prevctx = _localctx;
                            setState(1305);
                            primary();
                        }
                        break;
                    case 2:
                        {
                            _localctx = new SimpleMethodCallContext(_localctx);
                            _ctx = _localctx;
                            _prevctx = _localctx;
                            setState(1306);
                            id();
                            setState(1307);
                            match(LPAREN);
                            setState(1309);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                            if (((_la) & ~0x3f) == 0 && ((1L << _la) & 575897802350002176L) != 0 || (((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & -2313161358608162803L) != 0 || (((_la - 170)) & ~0x3f) == 0 && ((1L << (_la - 170)) & 17948033811480577L) != 0) {
                                {
                                    setState(1308);
                                    expressionList();
                                }
                            }
                            setState(1311);
                            match(RPAREN);
                        }
                        break;
                    case 3:
                        {
                            _localctx = new NewExpContext(_localctx);
                            _ctx = _localctx;
                            _prevctx = _localctx;
                            setState(1313);
                            match(LITERAL_NEW);
                            setState(1314);
                            creator();
                        }
                        break;
                    case 4:
                        {
                            _localctx = new PrefixContext(_localctx);
                            _ctx = _localctx;
                            _prevctx = _localctx;
                            setState(1315);
                            ((PrefixContext) _localctx).prefix = _input.LT(1);
                            _la = _input.LA(1);
                            if (!((((_la - 125)) & ~0x3f) == 0 && ((1L << (_la - 125)) & 51L) != 0)) {
                                ((PrefixContext) _localctx).prefix = (Token) _errHandler.recoverInline(this);
                            } else {
                                if (_input.LA(1) == Token.EOF)
                                    matchedEOF = true;
                                _errHandler.reportMatch(this);
                                consume();
                            }
                            setState(1316);
                            expr(20);
                        }
                        break;
                    case 5:
                        {
                            _localctx = new PrefixContext(_localctx);
                            _ctx = _localctx;
                            _prevctx = _localctx;
                            setState(1317);
                            ((PrefixContext) _localctx).prefix = _input.LT(1);
                            _la = _input.LA(1);
                            if (!(_la == BNOT || _la == LNOT)) {
                                ((PrefixContext) _localctx).prefix = (Token) _errHandler.recoverInline(this);
                            } else {
                                if (_input.LA(1) == Token.EOF)
                                    matchedEOF = true;
                                _errHandler.reportMatch(this);
                                consume();
                            }
                            setState(1318);
                            expr(19);
                        }
                        break;
                    case 6:
                        {
                            _localctx = new MethodRefContext(_localctx);
                            _ctx = _localctx;
                            _prevctx = _localctx;
                            setState(1319);
                            typeType(false);
                            setState(1320);
                            match(DOUBLE_COLON);
                            setState(1322);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                            if (_la == LT) {
                                {
                                    setState(1321);
                                    typeArguments();
                                }
                            }
                            setState(1326);
                            _errHandler.sync(this);
                            switch(_input.LA(1)) {
                                case IDENT:
                                case LITERAL_RECORD:
                                case LITERAL_YIELD:
                                case LITERAL_NON_SEALED:
                                case LITERAL_SEALED:
                                case LITERAL_PERMITS:
                                    {
                                        setState(1324);
                                        id();
                                    }
                                    break;
                                case LITERAL_NEW:
                                    {
                                        setState(1325);
                                        match(LITERAL_NEW);
                                    }
                                    break;
                                default:
                                    throw new NoViableAltException(this);
                            }
                        }
                        break;
                    case 7:
                        {
                            _localctx = new MethodRefContext(_localctx);
                            _ctx = _localctx;
                            _prevctx = _localctx;
                            setState(1328);
                            classType();
                            setState(1329);
                            match(DOUBLE_COLON);
                            setState(1331);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                            if (_la == LT) {
                                {
                                    setState(1330);
                                    typeArguments();
                                }
                            }
                            setState(1333);
                            match(LITERAL_NEW);
                        }
                        break;
                    case 8:
                        {
                            _localctx = new CastExpContext(_localctx);
                            _ctx = _localctx;
                            _prevctx = _localctx;
                            setState(1335);
                            match(LPAREN);
                            setState(1336);
                            typeCastParameters();
                            setState(1337);
                            match(RPAREN);
                            setState(1338);
                            expr(15);
                        }
                        break;
                    case 9:
                        {
                            _localctx = new LambdaExpContext(_localctx);
                            _ctx = _localctx;
                            _prevctx = _localctx;
                            setState(1340);
                            lambdaExpression();
                        }
                        break;
                }
                _ctx.stop = _input.LT(-1);
                setState(1455);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input, 167, _ctx);
                while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                    if (_alt == 1) {
                        if (_parseListeners != null)
                            triggerExitRuleEvent();
                        _prevctx = _localctx;
                        {
                            setState(1453);
                            _errHandler.sync(this);
                            switch(getInterpreter().adaptivePredict(_input, 166, _ctx)) {
                                case 1:
                                    {
                                        _localctx = new BinOpContext(new ExprContext(_parentctx, _parentState));
                                        pushNewRecursionContext(_localctx, _startState, RULE_expr);
                                        setState(1343);
                                        if (!(precpred(_ctx, 14)))
                                            throw new FailedPredicateException(this, "precpred(_ctx, 14)");
                                        setState(1344);
                                        ((BinOpContext) _localctx).bop = _input.LT(1);
                                        _la = _input.LA(1);
                                        if (!(_la == STAR || _la == DIV || _la == MOD)) {
                                            ((BinOpContext) _localctx).bop = (Token) _errHandler.recoverInline(this);
                                        } else {
                                            if (_input.LA(1) == Token.EOF)
                                                matchedEOF = true;
                                            _errHandler.reportMatch(this);
                                            consume();
                                        }
                                        setState(1345);
                                        expr(15);
                                    }
                                    break;
                                case 2:
                                    {
                                        _localctx = new BinOpContext(new ExprContext(_parentctx, _parentState));
                                        pushNewRecursionContext(_localctx, _startState, RULE_expr);
                                        setState(1346);
                                        if (!(precpred(_ctx, 13)))
                                            throw new FailedPredicateException(this, "precpred(_ctx, 13)");
                                        setState(1347);
                                        ((BinOpContext) _localctx).bop = _input.LT(1);
                                        _la = _input.LA(1);
                                        if (!(_la == PLUS || _la == MINUS)) {
                                            ((BinOpContext) _localctx).bop = (Token) _errHandler.recoverInline(this);
                                        } else {
                                            if (_input.LA(1) == Token.EOF)
                                                matchedEOF = true;
                                            _errHandler.reportMatch(this);
                                            consume();
                                        }
                                        setState(1348);
                                        expr(14);
                                    }
                                    break;
                                case 3:
                                    {
                                        _localctx = new BitShiftContext(new ExprContext(_parentctx, _parentState));
                                        pushNewRecursionContext(_localctx, _startState, RULE_expr);
                                        setState(1349);
                                        if (!(precpred(_ctx, 12)))
                                            throw new FailedPredicateException(this, "precpred(_ctx, 12)");
                                        setState(1357);
                                        _errHandler.sync(this);
                                        switch(getInterpreter().adaptivePredict(_input, 157, _ctx)) {
                                            case 1:
                                                {
                                                    setState(1350);
                                                    match(LT);
                                                    setState(1351);
                                                    match(LT);
                                                }
                                                break;
                                            case 2:
                                                {
                                                    setState(1352);
                                                    match(GT);
                                                    setState(1353);
                                                    match(GT);
                                                    setState(1354);
                                                    match(GT);
                                                }
                                                break;
                                            case 3:
                                                {
                                                    setState(1355);
                                                    match(GT);
                                                    setState(1356);
                                                    match(GT);
                                                }
                                                break;
                                        }
                                        setState(1359);
                                        expr(13);
                                    }
                                    break;
                                case 4:
                                    {
                                        _localctx = new BinOpContext(new ExprContext(_parentctx, _parentState));
                                        pushNewRecursionContext(_localctx, _startState, RULE_expr);
                                        setState(1360);
                                        if (!(precpred(_ctx, 10)))
                                            throw new FailedPredicateException(this, "precpred(_ctx, 10)");
                                        setState(1361);
                                        ((BinOpContext) _localctx).bop = _input.LT(1);
                                        _la = _input.LA(1);
                                        if (!((((_la - 117)) & ~0x3f) == 0 && ((1L << (_la - 117)) & 15L) != 0)) {
                                            ((BinOpContext) _localctx).bop = (Token) _errHandler.recoverInline(this);
                                        } else {
                                            if (_input.LA(1) == Token.EOF)
                                                matchedEOF = true;
                                            _errHandler.reportMatch(this);
                                            consume();
                                        }
                                        setState(1362);
                                        expr(11);
                                    }
                                    break;
                                case 5:
                                    {
                                        _localctx = new BinOpContext(new ExprContext(_parentctx, _parentState));
                                        pushNewRecursionContext(_localctx, _startState, RULE_expr);
                                        setState(1363);
                                        if (!(precpred(_ctx, 9)))
                                            throw new FailedPredicateException(this, "precpred(_ctx, 9)");
                                        setState(1364);
                                        ((BinOpContext) _localctx).bop = _input.LT(1);
                                        _la = _input.LA(1);
                                        if (!(_la == NOT_EQUAL || _la == EQUAL)) {
                                            ((BinOpContext) _localctx).bop = (Token) _errHandler.recoverInline(this);
                                        } else {
                                            if (_input.LA(1) == Token.EOF)
                                                matchedEOF = true;
                                            _errHandler.reportMatch(this);
                                            consume();
                                        }
                                        setState(1365);
                                        expr(10);
                                    }
                                    break;
                                case 6:
                                    {
                                        _localctx = new BinOpContext(new ExprContext(_parentctx, _parentState));
                                        pushNewRecursionContext(_localctx, _startState, RULE_expr);
                                        setState(1366);
                                        if (!(precpred(_ctx, 8)))
                                            throw new FailedPredicateException(this, "precpred(_ctx, 8)");
                                        setState(1367);
                                        ((BinOpContext) _localctx).bop = match(BAND);
                                        setState(1368);
                                        expr(9);
                                    }
                                    break;
                                case 7:
                                    {
                                        _localctx = new BinOpContext(new ExprContext(_parentctx, _parentState));
                                        pushNewRecursionContext(_localctx, _startState, RULE_expr);
                                        setState(1369);
                                        if (!(precpred(_ctx, 7)))
                                            throw new FailedPredicateException(this, "precpred(_ctx, 7)");
                                        setState(1370);
                                        ((BinOpContext) _localctx).bop = match(BXOR);
                                        setState(1371);
                                        expr(8);
                                    }
                                    break;
                                case 8:
                                    {
                                        _localctx = new BinOpContext(new ExprContext(_parentctx, _parentState));
                                        pushNewRecursionContext(_localctx, _startState, RULE_expr);
                                        setState(1372);
                                        if (!(precpred(_ctx, 6)))
                                            throw new FailedPredicateException(this, "precpred(_ctx, 6)");
                                        setState(1373);
                                        ((BinOpContext) _localctx).bop = match(BOR);
                                        setState(1374);
                                        expr(7);
                                    }
                                    break;
                                case 9:
                                    {
                                        _localctx = new BinOpContext(new ExprContext(_parentctx, _parentState));
                                        pushNewRecursionContext(_localctx, _startState, RULE_expr);
                                        setState(1375);
                                        if (!(precpred(_ctx, 5)))
                                            throw new FailedPredicateException(this, "precpred(_ctx, 5)");
                                        setState(1376);
                                        ((BinOpContext) _localctx).bop = match(LAND);
                                        setState(1377);
                                        expr(6);
                                    }
                                    break;
                                case 10:
                                    {
                                        _localctx = new BinOpContext(new ExprContext(_parentctx, _parentState));
                                        pushNewRecursionContext(_localctx, _startState, RULE_expr);
                                        setState(1378);
                                        if (!(precpred(_ctx, 4)))
                                            throw new FailedPredicateException(this, "precpred(_ctx, 4)");
                                        setState(1379);
                                        ((BinOpContext) _localctx).bop = match(LOR);
                                        setState(1380);
                                        expr(5);
                                    }
                                    break;
                                case 11:
                                    {
                                        _localctx = new TernaryOpContext(new ExprContext(_parentctx, _parentState));
                                        pushNewRecursionContext(_localctx, _startState, RULE_expr);
                                        setState(1381);
                                        if (!(precpred(_ctx, 3)))
                                            throw new FailedPredicateException(this, "precpred(_ctx, 3)");
                                        setState(1382);
                                        ((TernaryOpContext) _localctx).bop = match(QUESTION);
                                        setState(1383);
                                        expr(0);
                                        setState(1384);
                                        match(COLON);
                                        setState(1385);
                                        expr(3);
                                    }
                                    break;
                                case 12:
                                    {
                                        _localctx = new BinOpContext(new ExprContext(_parentctx, _parentState));
                                        pushNewRecursionContext(_localctx, _startState, RULE_expr);
                                        setState(1387);
                                        if (!(precpred(_ctx, 2)))
                                            throw new FailedPredicateException(this, "precpred(_ctx, 2)");
                                        setState(1388);
                                        ((BinOpContext) _localctx).bop = _input.LT(1);
                                        _la = _input.LA(1);
                                        if (!((((_la - 80)) & ~0x3f) == 0 && ((1L << (_la - 80)) & 536608769L) != 0)) {
                                            ((BinOpContext) _localctx).bop = (Token) _errHandler.recoverInline(this);
                                        } else {
                                            if (_input.LA(1) == Token.EOF)
                                                matchedEOF = true;
                                            _errHandler.reportMatch(this);
                                            consume();
                                        }
                                        setState(1389);
                                        expr(2);
                                    }
                                    break;
                                case 13:
                                    {
                                        _localctx = new RefOpContext(new ExprContext(_parentctx, _parentState));
                                        pushNewRecursionContext(_localctx, _startState, RULE_expr);
                                        setState(1390);
                                        if (!(precpred(_ctx, 30)))
                                            throw new FailedPredicateException(this, "precpred(_ctx, 30)");
                                        setState(1391);
                                        ((RefOpContext) _localctx).bop = match(DOT);
                                        setState(1392);
                                        id();
                                    }
                                    break;
                                case 14:
                                    {
                                        _localctx = new MethodCallContext(new ExprContext(_parentctx, _parentState));
                                        pushNewRecursionContext(_localctx, _startState, RULE_expr);
                                        setState(1393);
                                        if (!(precpred(_ctx, 29)))
                                            throw new FailedPredicateException(this, "precpred(_ctx, 29)");
                                        setState(1394);
                                        ((MethodCallContext) _localctx).bop = match(DOT);
                                        setState(1395);
                                        id();
                                        setState(1396);
                                        match(LPAREN);
                                        setState(1398);
                                        _errHandler.sync(this);
                                        _la = _input.LA(1);
                                        if (((_la) & ~0x3f) == 0 && ((1L << _la) & 575897802350002176L) != 0 || (((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & -2313161358608162803L) != 0 || (((_la - 170)) & ~0x3f) == 0 && ((1L << (_la - 170)) & 17948033811480577L) != 0) {
                                            {
                                                setState(1397);
                                                expressionList();
                                            }
                                        }
                                        setState(1400);
                                        match(RPAREN);
                                    }
                                    break;
                                case 15:
                                    {
                                        _localctx = new ThisExpContext(new ExprContext(_parentctx, _parentState));
                                        pushNewRecursionContext(_localctx, _startState, RULE_expr);
                                        setState(1402);
                                        if (!(precpred(_ctx, 28)))
                                            throw new FailedPredicateException(this, "precpred(_ctx, 28)");
                                        setState(1403);
                                        ((ThisExpContext) _localctx).bop = match(DOT);
                                        setState(1404);
                                        match(LITERAL_THIS);
                                    }
                                    break;
                                case 16:
                                    {
                                        _localctx = new InitExpContext(new ExprContext(_parentctx, _parentState));
                                        pushNewRecursionContext(_localctx, _startState, RULE_expr);
                                        setState(1405);
                                        if (!(precpred(_ctx, 27)))
                                            throw new FailedPredicateException(this, "precpred(_ctx, 27)");
                                        setState(1406);
                                        ((InitExpContext) _localctx).bop = match(DOT);
                                        setState(1407);
                                        match(LITERAL_NEW);
                                        setState(1409);
                                        _errHandler.sync(this);
                                        _la = _input.LA(1);
                                        if (_la == LT) {
                                            {
                                                setState(1408);
                                                nonWildcardTypeArguments();
                                            }
                                        }
                                        setState(1411);
                                        innerCreator();
                                    }
                                    break;
                                case 17:
                                    {
                                        _localctx = new SuperExpContext(new ExprContext(_parentctx, _parentState));
                                        pushNewRecursionContext(_localctx, _startState, RULE_expr);
                                        setState(1412);
                                        if (!(precpred(_ctx, 26)))
                                            throw new FailedPredicateException(this, "precpred(_ctx, 26)");
                                        setState(1413);
                                        ((SuperExpContext) _localctx).bop = match(DOT);
                                        setState(1415);
                                        _errHandler.sync(this);
                                        _la = _input.LA(1);
                                        if (_la == LT) {
                                            {
                                                setState(1414);
                                                nonWildcardTypeArguments();
                                            }
                                        }
                                        setState(1417);
                                        match(LITERAL_SUPER);
                                        setState(1419);
                                        _errHandler.sync(this);
                                        switch(getInterpreter().adaptivePredict(_input, 161, _ctx)) {
                                            case 1:
                                                {
                                                    setState(1418);
                                                    superSuffix();
                                                }
                                                break;
                                        }
                                    }
                                    break;
                                case 18:
                                    {
                                        _localctx = new InvOpContext(new ExprContext(_parentctx, _parentState));
                                        pushNewRecursionContext(_localctx, _startState, RULE_expr);
                                        setState(1421);
                                        if (!(precpred(_ctx, 25)))
                                            throw new FailedPredicateException(this, "precpred(_ctx, 25)");
                                        setState(1422);
                                        ((InvOpContext) _localctx).bop = match(DOT);
                                        setState(1423);
                                        nonWildcardTypeArguments();
                                        setState(1424);
                                        id();
                                        setState(1425);
                                        match(LPAREN);
                                        setState(1427);
                                        _errHandler.sync(this);
                                        _la = _input.LA(1);
                                        if (((_la) & ~0x3f) == 0 && ((1L << _la) & 575897802350002176L) != 0 || (((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & -2313161358608162803L) != 0 || (((_la - 170)) & ~0x3f) == 0 && ((1L << (_la - 170)) & 17948033811480577L) != 0) {
                                            {
                                                setState(1426);
                                                expressionList();
                                            }
                                        }
                                        setState(1429);
                                        match(RPAREN);
                                    }
                                    break;
                                case 19:
                                    {
                                        _localctx = new IndexOpContext(new ExprContext(_parentctx, _parentState));
                                        pushNewRecursionContext(_localctx, _startState, RULE_expr);
                                        setState(1431);
                                        if (!(precpred(_ctx, 24)))
                                            throw new FailedPredicateException(this, "precpred(_ctx, 24)");
                                        setState(1432);
                                        match(LBRACK);
                                        setState(1433);
                                        expr(0);
                                        setState(1434);
                                        match(RBRACK);
                                    }
                                    break;
                                case 20:
                                    {
                                        _localctx = new PostfixContext(new ExprContext(_parentctx, _parentState));
                                        pushNewRecursionContext(_localctx, _startState, RULE_expr);
                                        setState(1436);
                                        if (!(precpred(_ctx, 21)))
                                            throw new FailedPredicateException(this, "precpred(_ctx, 21)");
                                        setState(1437);
                                        ((PostfixContext) _localctx).postfix = _input.LT(1);
                                        _la = _input.LA(1);
                                        if (!(_la == INC || _la == DEC)) {
                                            ((PostfixContext) _localctx).postfix = (Token) _errHandler.recoverInline(this);
                                        } else {
                                            if (_input.LA(1) == Token.EOF)
                                                matchedEOF = true;
                                            _errHandler.reportMatch(this);
                                            consume();
                                        }
                                    }
                                    break;
                                case 21:
                                    {
                                        _localctx = new MethodRefContext(new ExprContext(_parentctx, _parentState));
                                        pushNewRecursionContext(_localctx, _startState, RULE_expr);
                                        setState(1438);
                                        if (!(precpred(_ctx, 18)))
                                            throw new FailedPredicateException(this, "precpred(_ctx, 18)");
                                        setState(1439);
                                        match(DOUBLE_COLON);
                                        setState(1441);
                                        _errHandler.sync(this);
                                        _la = _input.LA(1);
                                        if (_la == LT) {
                                            {
                                                setState(1440);
                                                typeArguments();
                                            }
                                        }
                                        setState(1445);
                                        _errHandler.sync(this);
                                        switch(_input.LA(1)) {
                                            case IDENT:
                                            case LITERAL_RECORD:
                                            case LITERAL_YIELD:
                                            case LITERAL_NON_SEALED:
                                            case LITERAL_SEALED:
                                            case LITERAL_PERMITS:
                                                {
                                                    setState(1443);
                                                    id();
                                                }
                                                break;
                                            case LITERAL_NEW:
                                                {
                                                    setState(1444);
                                                    match(LITERAL_NEW);
                                                }
                                                break;
                                            default:
                                                throw new NoViableAltException(this);
                                        }
                                    }
                                    break;
                                case 22:
                                    {
                                        _localctx = new InstanceOfExpContext(new ExprContext(_parentctx, _parentState));
                                        pushNewRecursionContext(_localctx, _startState, RULE_expr);
                                        setState(1447);
                                        if (!(precpred(_ctx, 11)))
                                            throw new FailedPredicateException(this, "precpred(_ctx, 11)");
                                        setState(1448);
                                        ((InstanceOfExpContext) _localctx).bop = match(LITERAL_INSTANCEOF);
                                        setState(1451);
                                        _errHandler.sync(this);
                                        switch(getInterpreter().adaptivePredict(_input, 165, _ctx)) {
                                            case 1:
                                                {
                                                    setState(1449);
                                                    primaryPattern();
                                                }
                                                break;
                                            case 2:
                                                {
                                                    setState(1450);
                                                    typeType(true);
                                                }
                                                break;
                                        }
                                    }
                                    break;
                            }
                        }
                    }
                    setState(1457);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 167, _ctx);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            unrollRecursionContexts(_parentctx);
        }
        return _localctx;
    }

    public static class TypeCastParametersContext extends ParserRuleContext {

        public List<TypeTypeContext> typeType() {
            return getRuleContexts(TypeTypeContext.class);
        }

        public TypeTypeContext typeType(int i) {
            return getRuleContext(TypeTypeContext.class, i);
        }

        public List<TerminalNode> BAND() {
            return getTokens(JavaLanguageParser.BAND);
        }

        public TerminalNode BAND(int i) {
            return getToken(JavaLanguageParser.BAND, i);
        }

        public TypeCastParametersContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_typeCastParameters;
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitTypeCastParameters(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final TypeCastParametersContext typeCastParameters() throws RecognitionException {
        TypeCastParametersContext _localctx = new TypeCastParametersContext(_ctx, getState());
        enterRule(_localctx, 218, RULE_typeCastParameters);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1458);
                typeType(true);
                setState(1463);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == BAND) {
                    {
                        {
                            setState(1459);
                            match(BAND);
                            setState(1460);
                            typeType(true);
                        }
                    }
                    setState(1465);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class LambdaExpressionContext extends ParserRuleContext {

        public LambdaParametersContext lambdaParameters() {
            return getRuleContext(LambdaParametersContext.class, 0);
        }

        public TerminalNode LAMBDA() {
            return getToken(JavaLanguageParser.LAMBDA, 0);
        }

        public LambdaBodyContext lambdaBody() {
            return getRuleContext(LambdaBodyContext.class, 0);
        }

        public LambdaExpressionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_lambdaExpression;
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitLambdaExpression(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final LambdaExpressionContext lambdaExpression() throws RecognitionException {
        LambdaExpressionContext _localctx = new LambdaExpressionContext(_ctx, getState());
        enterRule(_localctx, 220, RULE_lambdaExpression);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1466);
                lambdaParameters();
                setState(1467);
                match(LAMBDA);
                setState(1468);
                lambdaBody();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class LambdaParametersContext extends ParserRuleContext {

        public LambdaParametersContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_lambdaParameters;
        }

        public LambdaParametersContext() {
        }

        public void copyFrom(LambdaParametersContext ctx) {
            super.copyFrom(ctx);
        }
    }

    public static class SingleLambdaParamContext extends LambdaParametersContext {

        public IdContext id() {
            return getRuleContext(IdContext.class, 0);
        }

        public SingleLambdaParamContext(LambdaParametersContext ctx) {
            copyFrom(ctx);
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitSingleLambdaParam(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public static class MultiLambdaParamContext extends LambdaParametersContext {

        public TerminalNode LPAREN() {
            return getToken(JavaLanguageParser.LPAREN, 0);
        }

        public MultiLambdaParamsContext multiLambdaParams() {
            return getRuleContext(MultiLambdaParamsContext.class, 0);
        }

        public TerminalNode RPAREN() {
            return getToken(JavaLanguageParser.RPAREN, 0);
        }

        public MultiLambdaParamContext(LambdaParametersContext ctx) {
            copyFrom(ctx);
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitMultiLambdaParam(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public static class FormalLambdaParamContext extends LambdaParametersContext {

        public TerminalNode LPAREN() {
            return getToken(JavaLanguageParser.LPAREN, 0);
        }

        public TerminalNode RPAREN() {
            return getToken(JavaLanguageParser.RPAREN, 0);
        }

        public FormalParameterListContext formalParameterList() {
            return getRuleContext(FormalParameterListContext.class, 0);
        }

        public FormalLambdaParamContext(LambdaParametersContext ctx) {
            copyFrom(ctx);
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitFormalLambdaParam(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final LambdaParametersContext lambdaParameters() throws RecognitionException {
        LambdaParametersContext _localctx = new LambdaParametersContext(_ctx, getState());
        enterRule(_localctx, 222, RULE_lambdaParameters);
        int _la;
        try {
            setState(1480);
            _errHandler.sync(this);
            switch(getInterpreter().adaptivePredict(_input, 170, _ctx)) {
                case 1:
                    _localctx = new SingleLambdaParamContext(_localctx);
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(1470);
                        id();
                    }
                    break;
                case 2:
                    _localctx = new FormalLambdaParamContext(_localctx);
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(1471);
                        match(LPAREN);
                        setState(1473);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (((_la) & ~0x3f) == 0 && ((1L << _la) & 575898352105816064L) != 0 || (((_la - 170)) & ~0x3f) == 0 && ((1L << (_la - 170)) & 3986803392513L) != 0) {
                            {
                                setState(1472);
                                formalParameterList();
                            }
                        }
                        setState(1475);
                        match(RPAREN);
                    }
                    break;
                case 3:
                    _localctx = new MultiLambdaParamContext(_localctx);
                    enterOuterAlt(_localctx, 3);
                    {
                        setState(1476);
                        match(LPAREN);
                        setState(1477);
                        multiLambdaParams();
                        setState(1478);
                        match(RPAREN);
                    }
                    break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class MultiLambdaParamsContext extends ParserRuleContext {

        public List<IdContext> id() {
            return getRuleContexts(IdContext.class);
        }

        public IdContext id(int i) {
            return getRuleContext(IdContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(JavaLanguageParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(JavaLanguageParser.COMMA, i);
        }

        public MultiLambdaParamsContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_multiLambdaParams;
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitMultiLambdaParams(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final MultiLambdaParamsContext multiLambdaParams() throws RecognitionException {
        MultiLambdaParamsContext _localctx = new MultiLambdaParamsContext(_ctx, getState());
        enterRule(_localctx, 224, RULE_multiLambdaParams);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1482);
                id();
                setState(1487);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == COMMA) {
                    {
                        {
                            setState(1483);
                            match(COMMA);
                            setState(1484);
                            id();
                        }
                    }
                    setState(1489);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class LambdaBodyContext extends ParserRuleContext {

        public ExpressionContext expression() {
            return getRuleContext(ExpressionContext.class, 0);
        }

        public BlockContext block() {
            return getRuleContext(BlockContext.class, 0);
        }

        public LambdaBodyContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_lambdaBody;
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitLambdaBody(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final LambdaBodyContext lambdaBody() throws RecognitionException {
        LambdaBodyContext _localctx = new LambdaBodyContext(_ctx, getState());
        enterRule(_localctx, 226, RULE_lambdaBody);
        try {
            setState(1492);
            _errHandler.sync(this);
            switch(_input.LA(1)) {
                case LITERAL_VOID:
                case LITERAL_BOOLEAN:
                case LITERAL_BYTE:
                case LITERAL_CHAR:
                case LITERAL_SHORT:
                case LITERAL_INT:
                case LITERAL_FLOAT:
                case LITERAL_LONG:
                case LITERAL_DOUBLE:
                case IDENT:
                case LPAREN:
                case LITERAL_THIS:
                case LITERAL_SUPER:
                case LITERAL_SWITCH:
                case PLUS:
                case MINUS:
                case INC:
                case DEC:
                case BNOT:
                case LNOT:
                case LITERAL_TRUE:
                case LITERAL_FALSE:
                case LITERAL_NULL:
                case LITERAL_NEW:
                case CHAR_LITERAL:
                case STRING_LITERAL:
                case AT:
                case FLOAT_LITERAL:
                case DOUBLE_LITERAL:
                case HEX_FLOAT_LITERAL:
                case HEX_DOUBLE_LITERAL:
                case LITERAL_RECORD:
                case TEXT_BLOCK_LITERAL_BEGIN:
                case LITERAL_YIELD:
                case LITERAL_NON_SEALED:
                case LITERAL_SEALED:
                case LITERAL_PERMITS:
                case DECIMAL_LITERAL_LONG:
                case DECIMAL_LITERAL:
                case HEX_LITERAL_LONG:
                case HEX_LITERAL:
                case OCT_LITERAL_LONG:
                case OCT_LITERAL:
                case BINARY_LITERAL_LONG:
                case BINARY_LITERAL:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(1490);
                        expression();
                    }
                    break;
                case LCURLY:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(1491);
                        block();
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class PrimaryContext extends ParserRuleContext {

        public PrimaryContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_primary;
        }

        public PrimaryContext() {
        }

        public void copyFrom(PrimaryContext ctx) {
            super.copyFrom(ctx);
        }
    }

    public static class ParenPrimaryContext extends PrimaryContext {

        public TerminalNode LPAREN() {
            return getToken(JavaLanguageParser.LPAREN, 0);
        }

        public ExprContext expr() {
            return getRuleContext(ExprContext.class, 0);
        }

        public TerminalNode RPAREN() {
            return getToken(JavaLanguageParser.RPAREN, 0);
        }

        public ParenPrimaryContext(PrimaryContext ctx) {
            copyFrom(ctx);
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitParenPrimary(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public static class SwitchPrimaryContext extends PrimaryContext {

        public SwitchExpressionOrStatementContext switchExpressionOrStatement() {
            return getRuleContext(SwitchExpressionOrStatementContext.class, 0);
        }

        public SwitchPrimaryContext(PrimaryContext ctx) {
            copyFrom(ctx);
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitSwitchPrimary(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public static class PrimitivePrimaryContext extends PrimaryContext {

        public PrimitiveTypeContext type;

        public TerminalNode DOT() {
            return getToken(JavaLanguageParser.DOT, 0);
        }

        public TerminalNode LITERAL_CLASS() {
            return getToken(JavaLanguageParser.LITERAL_CLASS, 0);
        }

        public PrimitiveTypeContext primitiveType() {
            return getRuleContext(PrimitiveTypeContext.class, 0);
        }

        public List<ArrayDeclaratorContext> arrayDeclarator() {
            return getRuleContexts(ArrayDeclaratorContext.class);
        }

        public ArrayDeclaratorContext arrayDeclarator(int i) {
            return getRuleContext(ArrayDeclaratorContext.class, i);
        }

        public PrimitivePrimaryContext(PrimaryContext ctx) {
            copyFrom(ctx);
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitPrimitivePrimary(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public static class TokenPrimaryContext extends PrimaryContext {

        public TerminalNode LITERAL_THIS() {
            return getToken(JavaLanguageParser.LITERAL_THIS, 0);
        }

        public TerminalNode LITERAL_SUPER() {
            return getToken(JavaLanguageParser.LITERAL_SUPER, 0);
        }

        public IdContext id() {
            return getRuleContext(IdContext.class, 0);
        }

        public TokenPrimaryContext(PrimaryContext ctx) {
            copyFrom(ctx);
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitTokenPrimary(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public static class ClassRefPrimaryContext extends PrimaryContext {

        public ClassOrInterfaceTypeContext type;

        public TerminalNode DOT() {
            return getToken(JavaLanguageParser.DOT, 0);
        }

        public TerminalNode LITERAL_CLASS() {
            return getToken(JavaLanguageParser.LITERAL_CLASS, 0);
        }

        public ClassOrInterfaceTypeContext classOrInterfaceType() {
            return getRuleContext(ClassOrInterfaceTypeContext.class, 0);
        }

        public List<ArrayDeclaratorContext> arrayDeclarator() {
            return getRuleContexts(ArrayDeclaratorContext.class);
        }

        public ArrayDeclaratorContext arrayDeclarator(int i) {
            return getRuleContext(ArrayDeclaratorContext.class, i);
        }

        public ClassRefPrimaryContext(PrimaryContext ctx) {
            copyFrom(ctx);
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitClassRefPrimary(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public static class LiteralPrimaryContext extends PrimaryContext {

        public LiteralContext literal() {
            return getRuleContext(LiteralContext.class, 0);
        }

        public LiteralPrimaryContext(PrimaryContext ctx) {
            copyFrom(ctx);
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitLiteralPrimary(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final PrimaryContext primary() throws RecognitionException {
        PrimaryContext _localctx = new PrimaryContext(_ctx, getState());
        enterRule(_localctx, 228, RULE_primary);
        int _la;
        try {
            setState(1523);
            _errHandler.sync(this);
            switch(getInterpreter().adaptivePredict(_input, 175, _ctx)) {
                case 1:
                    _localctx = new SwitchPrimaryContext(_localctx);
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(1494);
                        switchExpressionOrStatement();
                    }
                    break;
                case 2:
                    _localctx = new ParenPrimaryContext(_localctx);
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(1495);
                        match(LPAREN);
                        setState(1496);
                        expr(0);
                        setState(1497);
                        match(RPAREN);
                    }
                    break;
                case 3:
                    _localctx = new TokenPrimaryContext(_localctx);
                    enterOuterAlt(_localctx, 3);
                    {
                        setState(1499);
                        match(LITERAL_THIS);
                    }
                    break;
                case 4:
                    _localctx = new TokenPrimaryContext(_localctx);
                    enterOuterAlt(_localctx, 4);
                    {
                        setState(1500);
                        match(LITERAL_SUPER);
                    }
                    break;
                case 5:
                    _localctx = new LiteralPrimaryContext(_localctx);
                    enterOuterAlt(_localctx, 5);
                    {
                        setState(1501);
                        literal();
                    }
                    break;
                case 6:
                    _localctx = new TokenPrimaryContext(_localctx);
                    enterOuterAlt(_localctx, 6);
                    {
                        setState(1502);
                        id();
                    }
                    break;
                case 7:
                    _localctx = new ClassRefPrimaryContext(_localctx);
                    enterOuterAlt(_localctx, 7);
                    {
                        setState(1503);
                        ((ClassRefPrimaryContext) _localctx).type = classOrInterfaceType(false);
                        setState(1507);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        while (_la == LBRACK || _la == AT) {
                            {
                                {
                                    setState(1504);
                                    arrayDeclarator();
                                }
                            }
                            setState(1509);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                        }
                        setState(1510);
                        match(DOT);
                        setState(1511);
                        match(LITERAL_CLASS);
                    }
                    break;
                case 8:
                    _localctx = new PrimitivePrimaryContext(_localctx);
                    enterOuterAlt(_localctx, 8);
                    {
                        setState(1513);
                        ((PrimitivePrimaryContext) _localctx).type = primitiveType();
                        setState(1517);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        while (_la == LBRACK || _la == AT) {
                            {
                                {
                                    setState(1514);
                                    arrayDeclarator();
                                }
                            }
                            setState(1519);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                        }
                        setState(1520);
                        match(DOT);
                        setState(1521);
                        match(LITERAL_CLASS);
                    }
                    break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class ClassTypeContext extends ParserRuleContext {

        public AnnotationsContext annotations() {
            return getRuleContext(AnnotationsContext.class, 0);
        }

        public IdContext id() {
            return getRuleContext(IdContext.class, 0);
        }

        public ClassOrInterfaceTypeContext classOrInterfaceType() {
            return getRuleContext(ClassOrInterfaceTypeContext.class, 0);
        }

        public TerminalNode DOT() {
            return getToken(JavaLanguageParser.DOT, 0);
        }

        public TypeArgumentsContext typeArguments() {
            return getRuleContext(TypeArgumentsContext.class, 0);
        }

        public ClassTypeContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_classType;
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitClassType(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final ClassTypeContext classType() throws RecognitionException {
        ClassTypeContext _localctx = new ClassTypeContext(_ctx, getState());
        enterRule(_localctx, 230, RULE_classType);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1528);
                _errHandler.sync(this);
                switch(getInterpreter().adaptivePredict(_input, 176, _ctx)) {
                    case 1:
                        {
                            setState(1525);
                            classOrInterfaceType(false);
                            setState(1526);
                            match(DOT);
                        }
                        break;
                }
                setState(1530);
                annotations(false);
                setState(1531);
                id();
                setState(1533);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == LT) {
                    {
                        setState(1532);
                        typeArguments();
                    }
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class CreatorContext extends ParserRuleContext {

        public NonWildcardTypeArgumentsContext nonWildcardTypeArguments() {
            return getRuleContext(NonWildcardTypeArgumentsContext.class, 0);
        }

        public CreatedNameContext createdName() {
            return getRuleContext(CreatedNameContext.class, 0);
        }

        public ClassCreatorRestContext classCreatorRest() {
            return getRuleContext(ClassCreatorRestContext.class, 0);
        }

        public List<AnnotationsContext> annotations() {
            return getRuleContexts(AnnotationsContext.class);
        }

        public AnnotationsContext annotations(int i) {
            return getRuleContext(AnnotationsContext.class, i);
        }

        public ArrayCreatorRestContext arrayCreatorRest() {
            return getRuleContext(ArrayCreatorRestContext.class, 0);
        }

        public CreatorContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_creator;
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitCreator(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final CreatorContext creator() throws RecognitionException {
        CreatorContext _localctx = new CreatorContext(_ctx, getState());
        enterRule(_localctx, 232, RULE_creator);
        try {
            setState(1547);
            _errHandler.sync(this);
            switch(_input.LA(1)) {
                case LT:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(1535);
                        nonWildcardTypeArguments();
                        setState(1536);
                        createdName();
                        setState(1537);
                        classCreatorRest();
                    }
                    break;
                case LITERAL_VOID:
                case LITERAL_BOOLEAN:
                case LITERAL_BYTE:
                case LITERAL_CHAR:
                case LITERAL_SHORT:
                case LITERAL_INT:
                case LITERAL_FLOAT:
                case LITERAL_LONG:
                case LITERAL_DOUBLE:
                case IDENT:
                case AT:
                case LITERAL_RECORD:
                case LITERAL_YIELD:
                case LITERAL_NON_SEALED:
                case LITERAL_SEALED:
                case LITERAL_PERMITS:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(1539);
                        annotations(false);
                        setState(1540);
                        createdName();
                        setState(1545);
                        _errHandler.sync(this);
                        switch(_input.LA(1)) {
                            case LBRACK:
                            case AT:
                                {
                                    setState(1541);
                                    annotations(false);
                                    setState(1542);
                                    arrayCreatorRest();
                                }
                                break;
                            case LPAREN:
                                {
                                    setState(1544);
                                    classCreatorRest();
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class CreatedNameContext extends ParserRuleContext {

        public CreatedNameContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_createdName;
        }

        public CreatedNameContext() {
        }

        public void copyFrom(CreatedNameContext ctx) {
            super.copyFrom(ctx);
        }
    }

    public static class CreatedNamePrimitiveContext extends CreatedNameContext {

        public PrimitiveTypeContext primitiveType() {
            return getRuleContext(PrimitiveTypeContext.class, 0);
        }

        public CreatedNamePrimitiveContext(CreatedNameContext ctx) {
            copyFrom(ctx);
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitCreatedNamePrimitive(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public static class CreatedNameObjectContext extends CreatedNameContext {

        public CreatedNameExtendedContext createdNameExtended;

        public List<CreatedNameExtendedContext> extended = new ArrayList<CreatedNameExtendedContext>();

        public AnnotationsContext annotations() {
            return getRuleContext(AnnotationsContext.class, 0);
        }

        public IdContext id() {
            return getRuleContext(IdContext.class, 0);
        }

        public TypeArgumentsOrDiamondContext typeArgumentsOrDiamond() {
            return getRuleContext(TypeArgumentsOrDiamondContext.class, 0);
        }

        public List<CreatedNameExtendedContext> createdNameExtended() {
            return getRuleContexts(CreatedNameExtendedContext.class);
        }

        public CreatedNameExtendedContext createdNameExtended(int i) {
            return getRuleContext(CreatedNameExtendedContext.class, i);
        }

        public CreatedNameObjectContext(CreatedNameContext ctx) {
            copyFrom(ctx);
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitCreatedNameObject(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final CreatedNameContext createdName() throws RecognitionException {
        CreatedNameContext _localctx = new CreatedNameContext(_ctx, getState());
        enterRule(_localctx, 234, RULE_createdName);
        int _la;
        try {
            setState(1561);
            _errHandler.sync(this);
            switch(_input.LA(1)) {
                case IDENT:
                case AT:
                case LITERAL_RECORD:
                case LITERAL_YIELD:
                case LITERAL_NON_SEALED:
                case LITERAL_SEALED:
                case LITERAL_PERMITS:
                    _localctx = new CreatedNameObjectContext(_localctx);
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(1549);
                        annotations(false);
                        setState(1550);
                        id();
                        setState(1552);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == LT) {
                            {
                                setState(1551);
                                typeArgumentsOrDiamond();
                            }
                        }
                        setState(1557);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        while (_la == DOT) {
                            {
                                {
                                    setState(1554);
                                    ((CreatedNameObjectContext) _localctx).createdNameExtended = createdNameExtended();
                                    ((CreatedNameObjectContext) _localctx).extended.add(((CreatedNameObjectContext) _localctx).createdNameExtended);
                                }
                            }
                            setState(1559);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                        }
                    }
                    break;
                case LITERAL_VOID:
                case LITERAL_BOOLEAN:
                case LITERAL_BYTE:
                case LITERAL_CHAR:
                case LITERAL_SHORT:
                case LITERAL_INT:
                case LITERAL_FLOAT:
                case LITERAL_LONG:
                case LITERAL_DOUBLE:
                    _localctx = new CreatedNamePrimitiveContext(_localctx);
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(1560);
                        primitiveType();
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class CreatedNameExtendedContext extends ParserRuleContext {

        public TerminalNode DOT() {
            return getToken(JavaLanguageParser.DOT, 0);
        }

        public AnnotationsContext annotations() {
            return getRuleContext(AnnotationsContext.class, 0);
        }

        public IdContext id() {
            return getRuleContext(IdContext.class, 0);
        }

        public TypeArgumentsOrDiamondContext typeArgumentsOrDiamond() {
            return getRuleContext(TypeArgumentsOrDiamondContext.class, 0);
        }

        public CreatedNameExtendedContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_createdNameExtended;
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitCreatedNameExtended(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final CreatedNameExtendedContext createdNameExtended() throws RecognitionException {
        CreatedNameExtendedContext _localctx = new CreatedNameExtendedContext(_ctx, getState());
        enterRule(_localctx, 236, RULE_createdNameExtended);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1563);
                match(DOT);
                setState(1564);
                annotations(false);
                setState(1565);
                id();
                setState(1567);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == LT) {
                    {
                        setState(1566);
                        typeArgumentsOrDiamond();
                    }
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class InnerCreatorContext extends ParserRuleContext {

        public AnnotationsContext annotations() {
            return getRuleContext(AnnotationsContext.class, 0);
        }

        public IdContext id() {
            return getRuleContext(IdContext.class, 0);
        }

        public ClassCreatorRestContext classCreatorRest() {
            return getRuleContext(ClassCreatorRestContext.class, 0);
        }

        public NonWildcardTypeArgumentsOrDiamondContext nonWildcardTypeArgumentsOrDiamond() {
            return getRuleContext(NonWildcardTypeArgumentsOrDiamondContext.class, 0);
        }

        public InnerCreatorContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_innerCreator;
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitInnerCreator(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final InnerCreatorContext innerCreator() throws RecognitionException {
        InnerCreatorContext _localctx = new InnerCreatorContext(_ctx, getState());
        enterRule(_localctx, 238, RULE_innerCreator);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1569);
                annotations(false);
                setState(1570);
                id();
                setState(1572);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == LT) {
                    {
                        setState(1571);
                        nonWildcardTypeArgumentsOrDiamond();
                    }
                }
                setState(1574);
                classCreatorRest();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class ArrayCreatorRestContext extends ParserRuleContext {

        public TerminalNode LBRACK() {
            return getToken(JavaLanguageParser.LBRACK, 0);
        }

        public TerminalNode RBRACK() {
            return getToken(JavaLanguageParser.RBRACK, 0);
        }

        public ArrayInitializerContext arrayInitializer() {
            return getRuleContext(ArrayInitializerContext.class, 0);
        }

        public ExpressionContext expression() {
            return getRuleContext(ExpressionContext.class, 0);
        }

        public List<ArrayDeclaratorContext> arrayDeclarator() {
            return getRuleContexts(ArrayDeclaratorContext.class);
        }

        public ArrayDeclaratorContext arrayDeclarator(int i) {
            return getRuleContext(ArrayDeclaratorContext.class, i);
        }

        public List<BracketsWithExpContext> bracketsWithExp() {
            return getRuleContexts(BracketsWithExpContext.class);
        }

        public BracketsWithExpContext bracketsWithExp(int i) {
            return getRuleContext(BracketsWithExpContext.class, i);
        }

        public ArrayCreatorRestContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_arrayCreatorRest;
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitArrayCreatorRest(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final ArrayCreatorRestContext arrayCreatorRest() throws RecognitionException {
        ArrayCreatorRestContext _localctx = new ArrayCreatorRestContext(_ctx, getState());
        enterRule(_localctx, 240, RULE_arrayCreatorRest);
        int _la;
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(1576);
                match(LBRACK);
                setState(1599);
                _errHandler.sync(this);
                switch(_input.LA(1)) {
                    case RBRACK:
                        {
                            setState(1577);
                            match(RBRACK);
                            setState(1581);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                            while (_la == LBRACK || _la == AT) {
                                {
                                    {
                                        setState(1578);
                                        arrayDeclarator();
                                    }
                                }
                                setState(1583);
                                _errHandler.sync(this);
                                _la = _input.LA(1);
                            }
                            setState(1584);
                            arrayInitializer();
                        }
                        break;
                    case LITERAL_VOID:
                    case LITERAL_BOOLEAN:
                    case LITERAL_BYTE:
                    case LITERAL_CHAR:
                    case LITERAL_SHORT:
                    case LITERAL_INT:
                    case LITERAL_FLOAT:
                    case LITERAL_LONG:
                    case LITERAL_DOUBLE:
                    case IDENT:
                    case LPAREN:
                    case LITERAL_THIS:
                    case LITERAL_SUPER:
                    case LITERAL_SWITCH:
                    case PLUS:
                    case MINUS:
                    case INC:
                    case DEC:
                    case BNOT:
                    case LNOT:
                    case LITERAL_TRUE:
                    case LITERAL_FALSE:
                    case LITERAL_NULL:
                    case LITERAL_NEW:
                    case CHAR_LITERAL:
                    case STRING_LITERAL:
                    case AT:
                    case FLOAT_LITERAL:
                    case DOUBLE_LITERAL:
                    case HEX_FLOAT_LITERAL:
                    case HEX_DOUBLE_LITERAL:
                    case LITERAL_RECORD:
                    case TEXT_BLOCK_LITERAL_BEGIN:
                    case LITERAL_YIELD:
                    case LITERAL_NON_SEALED:
                    case LITERAL_SEALED:
                    case LITERAL_PERMITS:
                    case DECIMAL_LITERAL_LONG:
                    case DECIMAL_LITERAL:
                    case HEX_LITERAL_LONG:
                    case HEX_LITERAL:
                    case OCT_LITERAL_LONG:
                    case OCT_LITERAL:
                    case BINARY_LITERAL_LONG:
                    case BINARY_LITERAL:
                        {
                            setState(1585);
                            expression();
                            setState(1586);
                            match(RBRACK);
                            setState(1590);
                            _errHandler.sync(this);
                            _alt = getInterpreter().adaptivePredict(_input, 186, _ctx);
                            while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                                if (_alt == 1) {
                                    {
                                        {
                                            setState(1587);
                                            bracketsWithExp();
                                        }
                                    }
                                }
                                setState(1592);
                                _errHandler.sync(this);
                                _alt = getInterpreter().adaptivePredict(_input, 186, _ctx);
                            }
                            setState(1596);
                            _errHandler.sync(this);
                            _alt = getInterpreter().adaptivePredict(_input, 187, _ctx);
                            while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                                if (_alt == 1) {
                                    {
                                        {
                                            setState(1593);
                                            arrayDeclarator();
                                        }
                                    }
                                }
                                setState(1598);
                                _errHandler.sync(this);
                                _alt = getInterpreter().adaptivePredict(_input, 187, _ctx);
                            }
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class BracketsWithExpContext extends ParserRuleContext {

        public AnnotationsContext annotations() {
            return getRuleContext(AnnotationsContext.class, 0);
        }

        public TerminalNode LBRACK() {
            return getToken(JavaLanguageParser.LBRACK, 0);
        }

        public ExpressionContext expression() {
            return getRuleContext(ExpressionContext.class, 0);
        }

        public TerminalNode RBRACK() {
            return getToken(JavaLanguageParser.RBRACK, 0);
        }

        public BracketsWithExpContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_bracketsWithExp;
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitBracketsWithExp(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final BracketsWithExpContext bracketsWithExp() throws RecognitionException {
        BracketsWithExpContext _localctx = new BracketsWithExpContext(_ctx, getState());
        enterRule(_localctx, 242, RULE_bracketsWithExp);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1601);
                annotations(false);
                setState(1602);
                match(LBRACK);
                setState(1603);
                expression();
                setState(1604);
                match(RBRACK);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class ClassCreatorRestContext extends ParserRuleContext {

        public ArgumentsContext arguments() {
            return getRuleContext(ArgumentsContext.class, 0);
        }

        public ClassBodyContext classBody() {
            return getRuleContext(ClassBodyContext.class, 0);
        }

        public ClassCreatorRestContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_classCreatorRest;
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitClassCreatorRest(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final ClassCreatorRestContext classCreatorRest() throws RecognitionException {
        ClassCreatorRestContext _localctx = new ClassCreatorRestContext(_ctx, getState());
        enterRule(_localctx, 244, RULE_classCreatorRest);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1606);
                arguments();
                setState(1608);
                _errHandler.sync(this);
                switch(getInterpreter().adaptivePredict(_input, 189, _ctx)) {
                    case 1:
                        {
                            setState(1607);
                            classBody();
                        }
                        break;
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class TypeArgumentsOrDiamondContext extends ParserRuleContext {

        public TypeArgumentsOrDiamondContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_typeArgumentsOrDiamond;
        }

        public TypeArgumentsOrDiamondContext() {
        }

        public void copyFrom(TypeArgumentsOrDiamondContext ctx) {
            super.copyFrom(ctx);
        }
    }

    public static class TypeArgsContext extends TypeArgumentsOrDiamondContext {

        public TypeArgumentsContext typeArguments() {
            return getRuleContext(TypeArgumentsContext.class, 0);
        }

        public TypeArgsContext(TypeArgumentsOrDiamondContext ctx) {
            copyFrom(ctx);
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitTypeArgs(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public static class DiamondContext extends TypeArgumentsOrDiamondContext {

        public TerminalNode LT() {
            return getToken(JavaLanguageParser.LT, 0);
        }

        public TerminalNode GT() {
            return getToken(JavaLanguageParser.GT, 0);
        }

        public DiamondContext(TypeArgumentsOrDiamondContext ctx) {
            copyFrom(ctx);
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitDiamond(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final TypeArgumentsOrDiamondContext typeArgumentsOrDiamond() throws RecognitionException {
        TypeArgumentsOrDiamondContext _localctx = new TypeArgumentsOrDiamondContext(_ctx, getState());
        enterRule(_localctx, 246, RULE_typeArgumentsOrDiamond);
        try {
            setState(1613);
            _errHandler.sync(this);
            switch(getInterpreter().adaptivePredict(_input, 190, _ctx)) {
                case 1:
                    _localctx = new DiamondContext(_localctx);
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(1610);
                        match(LT);
                        setState(1611);
                        match(GT);
                    }
                    break;
                case 2:
                    _localctx = new TypeArgsContext(_localctx);
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(1612);
                        typeArguments();
                    }
                    break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class NonWildcardTypeArgumentsOrDiamondContext extends ParserRuleContext {

        public NonWildcardTypeArgumentsOrDiamondContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_nonWildcardTypeArgumentsOrDiamond;
        }

        public NonWildcardTypeArgumentsOrDiamondContext() {
        }

        public void copyFrom(NonWildcardTypeArgumentsOrDiamondContext ctx) {
            super.copyFrom(ctx);
        }
    }

    public static class NonWildcardDiamondContext extends NonWildcardTypeArgumentsOrDiamondContext {

        public TerminalNode LT() {
            return getToken(JavaLanguageParser.LT, 0);
        }

        public TerminalNode GT() {
            return getToken(JavaLanguageParser.GT, 0);
        }

        public NonWildcardDiamondContext(NonWildcardTypeArgumentsOrDiamondContext ctx) {
            copyFrom(ctx);
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitNonWildcardDiamond(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public static class NonWildcardTypeArgsContext extends NonWildcardTypeArgumentsOrDiamondContext {

        public NonWildcardTypeArgumentsContext nonWildcardTypeArguments() {
            return getRuleContext(NonWildcardTypeArgumentsContext.class, 0);
        }

        public NonWildcardTypeArgsContext(NonWildcardTypeArgumentsOrDiamondContext ctx) {
            copyFrom(ctx);
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitNonWildcardTypeArgs(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final NonWildcardTypeArgumentsOrDiamondContext nonWildcardTypeArgumentsOrDiamond() throws RecognitionException {
        NonWildcardTypeArgumentsOrDiamondContext _localctx = new NonWildcardTypeArgumentsOrDiamondContext(_ctx, getState());
        enterRule(_localctx, 248, RULE_nonWildcardTypeArgumentsOrDiamond);
        try {
            setState(1618);
            _errHandler.sync(this);
            switch(getInterpreter().adaptivePredict(_input, 191, _ctx)) {
                case 1:
                    _localctx = new NonWildcardDiamondContext(_localctx);
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(1615);
                        match(LT);
                        setState(1616);
                        match(GT);
                    }
                    break;
                case 2:
                    _localctx = new NonWildcardTypeArgsContext(_localctx);
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(1617);
                        nonWildcardTypeArguments();
                    }
                    break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class NonWildcardTypeArgumentsContext extends ParserRuleContext {

        public TerminalNode LT() {
            return getToken(JavaLanguageParser.LT, 0);
        }

        public TypeArgumentsTypeListContext typeArgumentsTypeList() {
            return getRuleContext(TypeArgumentsTypeListContext.class, 0);
        }

        public TerminalNode GT() {
            return getToken(JavaLanguageParser.GT, 0);
        }

        public NonWildcardTypeArgumentsContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_nonWildcardTypeArguments;
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitNonWildcardTypeArguments(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final NonWildcardTypeArgumentsContext nonWildcardTypeArguments() throws RecognitionException {
        NonWildcardTypeArgumentsContext _localctx = new NonWildcardTypeArgumentsContext(_ctx, getState());
        enterRule(_localctx, 250, RULE_nonWildcardTypeArguments);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1620);
                match(LT);
                setState(1621);
                typeArgumentsTypeList();
                setState(1622);
                match(GT);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class TypeArgumentsTypeListContext extends ParserRuleContext {

        public List<TypeTypeContext> typeType() {
            return getRuleContexts(TypeTypeContext.class);
        }

        public TypeTypeContext typeType(int i) {
            return getRuleContext(TypeTypeContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(JavaLanguageParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(JavaLanguageParser.COMMA, i);
        }

        public TypeArgumentsTypeListContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_typeArgumentsTypeList;
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitTypeArgumentsTypeList(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final TypeArgumentsTypeListContext typeArgumentsTypeList() throws RecognitionException {
        TypeArgumentsTypeListContext _localctx = new TypeArgumentsTypeListContext(_ctx, getState());
        enterRule(_localctx, 252, RULE_typeArgumentsTypeList);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1624);
                typeType(false);
                setState(1629);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == COMMA) {
                    {
                        {
                            setState(1625);
                            match(COMMA);
                            setState(1626);
                            typeType(false);
                        }
                    }
                    setState(1631);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class TypeListContext extends ParserRuleContext {

        public List<TypeTypeContext> typeType() {
            return getRuleContexts(TypeTypeContext.class);
        }

        public TypeTypeContext typeType(int i) {
            return getRuleContext(TypeTypeContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(JavaLanguageParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(JavaLanguageParser.COMMA, i);
        }

        public TypeListContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_typeList;
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitTypeList(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final TypeListContext typeList() throws RecognitionException {
        TypeListContext _localctx = new TypeListContext(_ctx, getState());
        enterRule(_localctx, 254, RULE_typeList);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1632);
                typeType(false);
                setState(1637);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == COMMA) {
                    {
                        {
                            setState(1633);
                            match(COMMA);
                            setState(1634);
                            typeType(false);
                        }
                    }
                    setState(1639);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class TypeTypeContext extends ParserRuleContext {

        public boolean createImaginaryNode;

        public AnnotationsContext annotations() {
            return getRuleContext(AnnotationsContext.class, 0);
        }

        public ClassOrInterfaceOrPrimitiveTypeContext classOrInterfaceOrPrimitiveType() {
            return getRuleContext(ClassOrInterfaceOrPrimitiveTypeContext.class, 0);
        }

        public List<ArrayDeclaratorContext> arrayDeclarator() {
            return getRuleContexts(ArrayDeclaratorContext.class);
        }

        public ArrayDeclaratorContext arrayDeclarator(int i) {
            return getRuleContext(ArrayDeclaratorContext.class, i);
        }

        public TypeTypeContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TypeTypeContext(ParserRuleContext parent, int invokingState, boolean createImaginaryNode) {
            super(parent, invokingState);
            this.createImaginaryNode = createImaginaryNode;
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_typeType;
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitTypeType(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final TypeTypeContext typeType(boolean createImaginaryNode) throws RecognitionException {
        TypeTypeContext _localctx = new TypeTypeContext(_ctx, getState(), createImaginaryNode);
        enterRule(_localctx, 256, RULE_typeType);
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(1640);
                annotations(false);
                setState(1641);
                classOrInterfaceOrPrimitiveType();
                setState(1645);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input, 194, _ctx);
                while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                    if (_alt == 1) {
                        {
                            {
                                setState(1642);
                                arrayDeclarator();
                            }
                        }
                    }
                    setState(1647);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 194, _ctx);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class ClassOrInterfaceOrPrimitiveTypeContext extends ParserRuleContext {

        public ClassOrInterfaceTypeContext classOrInterfaceType() {
            return getRuleContext(ClassOrInterfaceTypeContext.class, 0);
        }

        public PrimitiveTypeContext primitiveType() {
            return getRuleContext(PrimitiveTypeContext.class, 0);
        }

        public ClassOrInterfaceOrPrimitiveTypeContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_classOrInterfaceOrPrimitiveType;
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitClassOrInterfaceOrPrimitiveType(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final ClassOrInterfaceOrPrimitiveTypeContext classOrInterfaceOrPrimitiveType() throws RecognitionException {
        ClassOrInterfaceOrPrimitiveTypeContext _localctx = new ClassOrInterfaceOrPrimitiveTypeContext(_ctx, getState());
        enterRule(_localctx, 258, RULE_classOrInterfaceOrPrimitiveType);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1650);
                _errHandler.sync(this);
                switch(_input.LA(1)) {
                    case IDENT:
                    case AT:
                    case LITERAL_RECORD:
                    case LITERAL_YIELD:
                    case LITERAL_NON_SEALED:
                    case LITERAL_SEALED:
                    case LITERAL_PERMITS:
                        {
                            setState(1648);
                            classOrInterfaceType(false);
                        }
                        break;
                    case LITERAL_VOID:
                    case LITERAL_BOOLEAN:
                    case LITERAL_BYTE:
                    case LITERAL_CHAR:
                    case LITERAL_SHORT:
                    case LITERAL_INT:
                    case LITERAL_FLOAT:
                    case LITERAL_LONG:
                    case LITERAL_DOUBLE:
                        {
                            setState(1649);
                            primitiveType();
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class ArrayDeclaratorContext extends ParserRuleContext {

        public AnnotationsContext anno;

        public TerminalNode LBRACK() {
            return getToken(JavaLanguageParser.LBRACK, 0);
        }

        public TerminalNode RBRACK() {
            return getToken(JavaLanguageParser.RBRACK, 0);
        }

        public AnnotationsContext annotations() {
            return getRuleContext(AnnotationsContext.class, 0);
        }

        public ArrayDeclaratorContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_arrayDeclarator;
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitArrayDeclarator(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final ArrayDeclaratorContext arrayDeclarator() throws RecognitionException {
        ArrayDeclaratorContext _localctx = new ArrayDeclaratorContext(_ctx, getState());
        enterRule(_localctx, 260, RULE_arrayDeclarator);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1652);
                ((ArrayDeclaratorContext) _localctx).anno = annotations(false);
                setState(1653);
                match(LBRACK);
                setState(1654);
                match(RBRACK);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class PrimitiveTypeContext extends ParserRuleContext {

        public TerminalNode LITERAL_BOOLEAN() {
            return getToken(JavaLanguageParser.LITERAL_BOOLEAN, 0);
        }

        public TerminalNode LITERAL_CHAR() {
            return getToken(JavaLanguageParser.LITERAL_CHAR, 0);
        }

        public TerminalNode LITERAL_BYTE() {
            return getToken(JavaLanguageParser.LITERAL_BYTE, 0);
        }

        public TerminalNode LITERAL_SHORT() {
            return getToken(JavaLanguageParser.LITERAL_SHORT, 0);
        }

        public TerminalNode LITERAL_INT() {
            return getToken(JavaLanguageParser.LITERAL_INT, 0);
        }

        public TerminalNode LITERAL_LONG() {
            return getToken(JavaLanguageParser.LITERAL_LONG, 0);
        }

        public TerminalNode LITERAL_FLOAT() {
            return getToken(JavaLanguageParser.LITERAL_FLOAT, 0);
        }

        public TerminalNode LITERAL_DOUBLE() {
            return getToken(JavaLanguageParser.LITERAL_DOUBLE, 0);
        }

        public TerminalNode LITERAL_VOID() {
            return getToken(JavaLanguageParser.LITERAL_VOID, 0);
        }

        public PrimitiveTypeContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_primitiveType;
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitPrimitiveType(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final PrimitiveTypeContext primitiveType() throws RecognitionException {
        PrimitiveTypeContext _localctx = new PrimitiveTypeContext(_ctx, getState());
        enterRule(_localctx, 262, RULE_primitiveType);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1656);
                _la = _input.LA(1);
                if (!(((_la) & ~0x3f) == 0 && ((1L << _la) & 287667426198290432L) != 0)) {
                    _errHandler.recoverInline(this);
                } else {
                    if (_input.LA(1) == Token.EOF)
                        matchedEOF = true;
                    _errHandler.reportMatch(this);
                    consume();
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class TypeArgumentsContext extends ParserRuleContext {

        public TerminalNode LT() {
            return getToken(JavaLanguageParser.LT, 0);
        }

        public List<TypeArgumentContext> typeArgument() {
            return getRuleContexts(TypeArgumentContext.class);
        }

        public TypeArgumentContext typeArgument(int i) {
            return getRuleContext(TypeArgumentContext.class, i);
        }

        public TerminalNode GT() {
            return getToken(JavaLanguageParser.GT, 0);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(JavaLanguageParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(JavaLanguageParser.COMMA, i);
        }

        public TypeArgumentsContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_typeArguments;
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitTypeArguments(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final TypeArgumentsContext typeArguments() throws RecognitionException {
        TypeArgumentsContext _localctx = new TypeArgumentsContext(_ctx, getState());
        enterRule(_localctx, 264, RULE_typeArguments);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1658);
                match(LT);
                setState(1659);
                typeArgument();
                setState(1664);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == COMMA) {
                    {
                        {
                            setState(1660);
                            match(COMMA);
                            setState(1661);
                            typeArgument();
                        }
                    }
                    setState(1666);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
                setState(1667);
                match(GT);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class SuperSuffixContext extends ParserRuleContext {

        public SuperSuffixContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_superSuffix;
        }

        public SuperSuffixContext() {
        }

        public void copyFrom(SuperSuffixContext ctx) {
            super.copyFrom(ctx);
        }
    }

    public static class SuperSuffixDotContext extends SuperSuffixContext {

        public TerminalNode DOT() {
            return getToken(JavaLanguageParser.DOT, 0);
        }

        public IdContext id() {
            return getRuleContext(IdContext.class, 0);
        }

        public TerminalNode LPAREN() {
            return getToken(JavaLanguageParser.LPAREN, 0);
        }

        public TerminalNode RPAREN() {
            return getToken(JavaLanguageParser.RPAREN, 0);
        }

        public ExpressionListContext expressionList() {
            return getRuleContext(ExpressionListContext.class, 0);
        }

        public SuperSuffixDotContext(SuperSuffixContext ctx) {
            copyFrom(ctx);
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitSuperSuffixDot(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public static class SuperSuffixSimpleContext extends SuperSuffixContext {

        public TerminalNode LPAREN() {
            return getToken(JavaLanguageParser.LPAREN, 0);
        }

        public TerminalNode RPAREN() {
            return getToken(JavaLanguageParser.RPAREN, 0);
        }

        public ExpressionListContext expressionList() {
            return getRuleContext(ExpressionListContext.class, 0);
        }

        public SuperSuffixSimpleContext(SuperSuffixContext ctx) {
            copyFrom(ctx);
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitSuperSuffixSimple(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final SuperSuffixContext superSuffix() throws RecognitionException {
        SuperSuffixContext _localctx = new SuperSuffixContext(_ctx, getState());
        enterRule(_localctx, 266, RULE_superSuffix);
        int _la;
        try {
            setState(1683);
            _errHandler.sync(this);
            switch(_input.LA(1)) {
                case LPAREN:
                    _localctx = new SuperSuffixSimpleContext(_localctx);
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(1669);
                        match(LPAREN);
                        setState(1671);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (((_la) & ~0x3f) == 0 && ((1L << _la) & 575897802350002176L) != 0 || (((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & -2313161358608162803L) != 0 || (((_la - 170)) & ~0x3f) == 0 && ((1L << (_la - 170)) & 17948033811480577L) != 0) {
                            {
                                setState(1670);
                                expressionList();
                            }
                        }
                        setState(1673);
                        match(RPAREN);
                    }
                    break;
                case DOT:
                    _localctx = new SuperSuffixDotContext(_localctx);
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(1674);
                        match(DOT);
                        setState(1675);
                        id();
                        setState(1681);
                        _errHandler.sync(this);
                        switch(getInterpreter().adaptivePredict(_input, 199, _ctx)) {
                            case 1:
                                {
                                    setState(1676);
                                    match(LPAREN);
                                    setState(1678);
                                    _errHandler.sync(this);
                                    _la = _input.LA(1);
                                    if (((_la) & ~0x3f) == 0 && ((1L << _la) & 575897802350002176L) != 0 || (((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & -2313161358608162803L) != 0 || (((_la - 170)) & ~0x3f) == 0 && ((1L << (_la - 170)) & 17948033811480577L) != 0) {
                                        {
                                            setState(1677);
                                            expressionList();
                                        }
                                    }
                                    setState(1680);
                                    match(RPAREN);
                                }
                                break;
                        }
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class ArgumentsContext extends ParserRuleContext {

        public TerminalNode LPAREN() {
            return getToken(JavaLanguageParser.LPAREN, 0);
        }

        public TerminalNode RPAREN() {
            return getToken(JavaLanguageParser.RPAREN, 0);
        }

        public ExpressionListContext expressionList() {
            return getRuleContext(ExpressionListContext.class, 0);
        }

        public ArgumentsContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_arguments;
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitArguments(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final ArgumentsContext arguments() throws RecognitionException {
        ArgumentsContext _localctx = new ArgumentsContext(_ctx, getState());
        enterRule(_localctx, 268, RULE_arguments);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1685);
                match(LPAREN);
                setState(1687);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (((_la) & ~0x3f) == 0 && ((1L << _la) & 575897802350002176L) != 0 || (((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & -2313161358608162803L) != 0 || (((_la - 170)) & ~0x3f) == 0 && ((1L << (_la - 170)) & 17948033811480577L) != 0) {
                    {
                        setState(1686);
                        expressionList();
                    }
                }
                setState(1689);
                match(RPAREN);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class PatternContext extends ParserRuleContext {

        public GuardedPatternContext guardedPattern() {
            return getRuleContext(GuardedPatternContext.class, 0);
        }

        public PrimaryPatternContext primaryPattern() {
            return getRuleContext(PrimaryPatternContext.class, 0);
        }

        public PatternContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_pattern;
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitPattern(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final PatternContext pattern() throws RecognitionException {
        PatternContext _localctx = new PatternContext(_ctx, getState());
        enterRule(_localctx, 270, RULE_pattern);
        try {
            setState(1693);
            _errHandler.sync(this);
            switch(getInterpreter().adaptivePredict(_input, 202, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(1691);
                        guardedPattern();
                    }
                    break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(1692);
                        primaryPattern();
                    }
                    break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class GuardedPatternContext extends ParserRuleContext {

        public PrimaryPatternContext primaryPattern() {
            return getRuleContext(PrimaryPatternContext.class, 0);
        }

        public TerminalNode LAND() {
            return getToken(JavaLanguageParser.LAND, 0);
        }

        public ExprContext expr() {
            return getRuleContext(ExprContext.class, 0);
        }

        public GuardedPatternContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_guardedPattern;
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitGuardedPattern(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final GuardedPatternContext guardedPattern() throws RecognitionException {
        GuardedPatternContext _localctx = new GuardedPatternContext(_ctx, getState());
        enterRule(_localctx, 272, RULE_guardedPattern);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1695);
                primaryPattern();
                setState(1696);
                match(LAND);
                setState(1697);
                expr(0);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class PrimaryPatternContext extends ParserRuleContext {

        public PrimaryPatternContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_primaryPattern;
        }

        public PrimaryPatternContext() {
        }

        public void copyFrom(PrimaryPatternContext ctx) {
            super.copyFrom(ctx);
        }
    }

    public static class PatternVariableDefContext extends PrimaryPatternContext {

        public TypePatternContext typePattern() {
            return getRuleContext(TypePatternContext.class, 0);
        }

        public PatternVariableDefContext(PrimaryPatternContext ctx) {
            copyFrom(ctx);
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitPatternVariableDef(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public static class ParenPatternContext extends PrimaryPatternContext {

        public TerminalNode LPAREN() {
            return getToken(JavaLanguageParser.LPAREN, 0);
        }

        public TerminalNode RPAREN() {
            return getToken(JavaLanguageParser.RPAREN, 0);
        }

        public GuardedPatternContext guardedPattern() {
            return getRuleContext(GuardedPatternContext.class, 0);
        }

        public PrimaryPatternContext primaryPattern() {
            return getRuleContext(PrimaryPatternContext.class, 0);
        }

        public ParenPatternContext(PrimaryPatternContext ctx) {
            copyFrom(ctx);
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitParenPattern(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final PrimaryPatternContext primaryPattern() throws RecognitionException {
        PrimaryPatternContext _localctx = new PrimaryPatternContext(_ctx, getState());
        enterRule(_localctx, 274, RULE_primaryPattern);
        try {
            setState(1707);
            _errHandler.sync(this);
            switch(_input.LA(1)) {
                case FINAL:
                case ABSTRACT:
                case STRICTFP:
                case LITERAL_VOID:
                case LITERAL_BOOLEAN:
                case LITERAL_BYTE:
                case LITERAL_CHAR:
                case LITERAL_SHORT:
                case LITERAL_INT:
                case LITERAL_FLOAT:
                case LITERAL_LONG:
                case LITERAL_DOUBLE:
                case IDENT:
                case LITERAL_PRIVATE:
                case LITERAL_PUBLIC:
                case LITERAL_PROTECTED:
                case LITERAL_STATIC:
                case LITERAL_TRANSIENT:
                case LITERAL_NATIVE:
                case LITERAL_SYNCHRONIZED:
                case LITERAL_VOLATILE:
                case LITERAL_DEFAULT:
                case AT:
                case LITERAL_RECORD:
                case LITERAL_YIELD:
                case LITERAL_NON_SEALED:
                case LITERAL_SEALED:
                case LITERAL_PERMITS:
                    _localctx = new PatternVariableDefContext(_localctx);
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(1699);
                        typePattern();
                    }
                    break;
                case LPAREN:
                    _localctx = new ParenPatternContext(_localctx);
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(1700);
                        match(LPAREN);
                        setState(1703);
                        _errHandler.sync(this);
                        switch(getInterpreter().adaptivePredict(_input, 203, _ctx)) {
                            case 1:
                                {
                                    setState(1701);
                                    guardedPattern();
                                }
                                break;
                            case 2:
                                {
                                    setState(1702);
                                    primaryPattern();
                                }
                                break;
                        }
                        setState(1705);
                        match(RPAREN);
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class TypePatternContext extends ParserRuleContext {

        public ModifierContext modifier;

        public List<ModifierContext> mods = new ArrayList<ModifierContext>();

        public TypeTypeContext type;

        public IdContext id() {
            return getRuleContext(IdContext.class, 0);
        }

        public TypeTypeContext typeType() {
            return getRuleContext(TypeTypeContext.class, 0);
        }

        public List<ModifierContext> modifier() {
            return getRuleContexts(ModifierContext.class);
        }

        public ModifierContext modifier(int i) {
            return getRuleContext(ModifierContext.class, i);
        }

        public TypePatternContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_typePattern;
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitTypePattern(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final TypePatternContext typePattern() throws RecognitionException {
        TypePatternContext _localctx = new TypePatternContext(_ctx, getState());
        enterRule(_localctx, 276, RULE_typePattern);
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(1712);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input, 205, _ctx);
                while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                    if (_alt == 1) {
                        {
                            {
                                setState(1709);
                                ((TypePatternContext) _localctx).modifier = modifier();
                                ((TypePatternContext) _localctx).mods.add(((TypePatternContext) _localctx).modifier);
                            }
                        }
                    }
                    setState(1714);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 205, _ctx);
                }
                setState(1715);
                ((TypePatternContext) _localctx).type = typeType(true);
                setState(1716);
                id();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class PermittedSubclassesAndInterfacesContext extends ParserRuleContext {

        public TerminalNode LITERAL_PERMITS() {
            return getToken(JavaLanguageParser.LITERAL_PERMITS, 0);
        }

        public List<ClassOrInterfaceTypeContext> classOrInterfaceType() {
            return getRuleContexts(ClassOrInterfaceTypeContext.class);
        }

        public ClassOrInterfaceTypeContext classOrInterfaceType(int i) {
            return getRuleContext(ClassOrInterfaceTypeContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(JavaLanguageParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(JavaLanguageParser.COMMA, i);
        }

        public PermittedSubclassesAndInterfacesContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_permittedSubclassesAndInterfaces;
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitPermittedSubclassesAndInterfaces(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final PermittedSubclassesAndInterfacesContext permittedSubclassesAndInterfaces() throws RecognitionException {
        PermittedSubclassesAndInterfacesContext _localctx = new PermittedSubclassesAndInterfacesContext(_ctx, getState());
        enterRule(_localctx, 278, RULE_permittedSubclassesAndInterfaces);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1718);
                match(LITERAL_PERMITS);
                setState(1719);
                classOrInterfaceType(false);
                setState(1724);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == COMMA) {
                    {
                        {
                            setState(1720);
                            match(COMMA);
                            setState(1721);
                            classOrInterfaceType(false);
                        }
                    }
                    setState(1726);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class IdContext extends ParserRuleContext {

        public TerminalNode LITERAL_RECORD() {
            return getToken(JavaLanguageParser.LITERAL_RECORD, 0);
        }

        public TerminalNode LITERAL_YIELD() {
            return getToken(JavaLanguageParser.LITERAL_YIELD, 0);
        }

        public TerminalNode LITERAL_NON_SEALED() {
            return getToken(JavaLanguageParser.LITERAL_NON_SEALED, 0);
        }

        public TerminalNode LITERAL_SEALED() {
            return getToken(JavaLanguageParser.LITERAL_SEALED, 0);
        }

        public TerminalNode LITERAL_PERMITS() {
            return getToken(JavaLanguageParser.LITERAL_PERMITS, 0);
        }

        public TerminalNode IDENT() {
            return getToken(JavaLanguageParser.IDENT, 0);
        }

        public IdContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @org.checkerframework.dataflow.qual.Pure
        public int getRuleIndex() {
            return RULE_id;
        }

        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof JavaLanguageParserVisitor)
                return ((JavaLanguageParserVisitor<? extends T>) visitor).visitId(this);
            else
                return visitor.visitChildren(this);
        }
    }

    public final IdContext id() throws RecognitionException {
        IdContext _localctx = new IdContext(_ctx, getState());
        enterRule(_localctx, 280, RULE_id);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1727);
                _la = _input.LA(1);
                if (!(_la == IDENT || (((_la - 200)) & ~0x3f) == 0 && ((1L << (_la - 200)) & 3713L) != 0)) {
                    _errHandler.recoverInline(this);
                } else {
                    if (_input.LA(1) == Token.EOF)
                        matchedEOF = true;
                    _errHandler.reportMatch(this);
                    consume();
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public boolean sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
        switch(ruleIndex) {
            case 77:
                return blockStatement_sempred((BlockStatementContext) _localctx, predIndex);
            case 108:
                return expr_sempred((ExprContext) _localctx, predIndex);
        }
        return true;
    }

    private boolean blockStatement_sempred(BlockStatementContext _localctx, int predIndex) {
        switch(predIndex) {
            case 0:
                return !isYieldStatement();
        }
        return true;
    }

    private boolean expr_sempred(ExprContext _localctx, int predIndex) {
        switch(predIndex) {
            case 1:
                return precpred(_ctx, 14);
            case 2:
                return precpred(_ctx, 13);
            case 3:
                return precpred(_ctx, 12);
            case 4:
                return precpred(_ctx, 10);
            case 5:
                return precpred(_ctx, 9);
            case 6:
                return precpred(_ctx, 8);
            case 7:
                return precpred(_ctx, 7);
            case 8:
                return precpred(_ctx, 6);
            case 9:
                return precpred(_ctx, 5);
            case 10:
                return precpred(_ctx, 4);
            case 11:
                return precpred(_ctx, 3);
            case 12:
                return precpred(_ctx, 2);
            case 13:
                return precpred(_ctx, 30);
            case 14:
                return precpred(_ctx, 29);
            case 15:
                return precpred(_ctx, 28);
            case 16:
                return precpred(_ctx, 27);
            case 17:
                return precpred(_ctx, 26);
            case 18:
                return precpred(_ctx, 25);
            case 19:
                return precpred(_ctx, 24);
            case 20:
                return precpred(_ctx, 21);
            case 21:
                return precpred(_ctx, 18);
            case 22:
                return precpred(_ctx, 11);
        }
        return true;
    }

    public static final String _serializedATN = "\u0004\u0001\u00df\u06c2\u0002\u0000\u0007\u0000\u0002\u0001\u0007\u0001\u0002\u0002\u0007\u0002\u0002\u0003\u0007\u0003\u0002\u0004\u0007\u0004\u0002\u0005\u0007\u0005\u0002\u0006\u0007\u0006\u0002\u0007\u0007\u0007\u0002\b\u0007\b\u0002\t\u0007\t\u0002\n\u0007\n\u0002\u000b\u0007\u000b\u0002\f\u0007\f\u0002\r\u0007\r\u0002\u000e\u0007\u000e\u0002\u000f\u0007\u000f\u0002\u0010\u0007\u0010\u0002\u0011\u0007\u0011\u0002\u0012\u0007\u0012\u0002\u0013\u0007\u0013\u0002\u0014\u0007\u0014\u0002\u0015\u0007\u0015\u0002\u0016\u0007\u0016\u0002\u0017\u0007\u0017\u0002\u0018\u0007\u0018\u0002\u0019\u0007\u0019\u0002\u001a\u0007\u001a\u0002\u001b\u0007\u001b\u0002\u001c\u0007\u001c\u0002\u001d\u0007\u001d\u0002\u001e\u0007\u001e\u0002\u001f\u0007\u001f\u0002 \u0007 \u0002!\u0007!\u0002\"\u0007\"\u0002#\u0007#\u0002$\u0007$\u0002%\u0007%\u0002&\u0007&\u0002\'\u0007\'\u0002(\u0007(\u0002)\u0007)\u0002*\u0007*\u0002+\u0007+\u0002,\u0007,\u0002-\u0007-\u0002.\u0007.\u0002/\u0007/\u00020\u00070\u00021\u00071\u00022\u00072\u00023\u00073\u00024\u00074\u00025\u00075\u00026\u00076\u00027\u00077\u00028\u00078\u00029\u00079\u0002:\u0007:\u0002;\u0007;\u0002<\u0007<\u0002=\u0007=\u0002>\u0007>\u0002?\u0007?\u0002@\u0007@\u0002A\u0007A\u0002B\u0007B\u0002C\u0007C\u0002D\u0007D\u0002E\u0007E\u0002F\u0007F\u0002G\u0007G\u0002H\u0007H\u0002I\u0007I\u0002J\u0007J\u0002K\u0007K\u0002L\u0007L\u0002M\u0007M\u0002N\u0007N\u0002O\u0007O\u0002P\u0007P\u0002Q\u0007Q\u0002R\u0007R\u0002S\u0007S\u0002T\u0007T\u0002U\u0007U\u0002V\u0007V\u0002W\u0007W\u0002X\u0007X\u0002Y\u0007Y\u0002Z\u0007Z\u0002[\u0007[\u0002\\\u0007\\\u0002]\u0007]\u0002^\u0007^\u0002_\u0007_\u0002`\u0007`\u0002a\u0007a\u0002b\u0007b\u0002c\u0007c\u0002d\u0007d\u0002e\u0007e\u0002f\u0007f\u0002g\u0007g\u0002h\u0007h\u0002i\u0007i\u0002j\u0007j\u0002k\u0007k\u0002l\u0007l\u0002m\u0007m\u0002n\u0007n\u0002o\u0007o\u0002p\u0007p\u0002q\u0007q\u0002r\u0007r\u0002s\u0007s\u0002t\u0007t\u0002u\u0007u\u0002v\u0007v\u0002w\u0007w\u0002x\u0007x\u0002y\u0007y\u0002z\u0007z\u0002{\u0007{\u0002|\u0007|\u0002}\u0007}\u0002~\u0007~\u0002\u007f\u0007\u007f\u0002\u0080\u0007\u0080\u0002\u0081\u0007\u0081\u0002\u0082\u0007\u0082\u0002\u0083\u0007\u0083\u0002\u0084\u0007\u0084\u0002\u0085\u0007\u0085\u0002\u0086\u0007\u0086\u0002\u0087\u0007\u0087\u0002\u0088\u0007\u0088\u0002\u0089\u0007\u0089\u0002\u008a\u0007\u008a\u0002\u008b\u0007\u008b\u0002\u008c\u0007\u008c\u0001\u0000\u0003\u0000\u011c\b\u0000\u0001\u0000\u0005\u0000\u011f\b\u0000\n\u0000\f\u0000\u0122\t\u0000\u0001\u0000\u0005\u0000\u0125\b\u0000\n\u0000\f\u0000\u0128\t\u0000\u0001\u0000\u0001\u0000\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0002\u0001\u0002\u0003\u0002\u0133\b\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0003\u0002\u0138\b\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0003\u0002\u013d\b\u0002\u0001\u0003\u0005\u0003\u0140\b\u0003\n\u0003\f\u0003\u0143\t\u0003\u0001\u0003\u0001\u0003\u0004\u0003\u0147\b\u0003\u000b\u0003\f\u0003\u0148\u0003\u0003\u014b\b\u0003\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0003\u0004\u0152\b\u0004\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0003\u0005\u0163\b\u0005\u0001\u0006\u0001\u0006\u0003\u0006\u0167\b\u0006\u0001\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u016c\b\u0007\u0001\u0007\u0003\u0007\u016f\b\u0007\u0001\u0007\u0003\u0007\u0172\b\u0007\u0001\u0007\u0003\u0007\u0175\b\u0007\u0001\u0007\u0001\u0007\u0001\b\u0001\b\u0001\b\u0003\b\u017c\b\b\u0001\b\u0001\b\u0003\b\u0180\b\b\u0001\b\u0001\b\u0001\t\u0001\t\u0003\t\u0186\b\t\u0001\t\u0001\t\u0001\n\u0001\n\u0001\n\u0005\n\u018d\b\n\n\n\f\n\u0190\t\n\u0001\n\u0001\n\u0003\n\u0194\b\n\u0001\n\u0003\n\u0197\b\n\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001\f\u0001\f\u0001\f\u0001\f\u0001\f\u0001\r\u0001\r\u0005\r\u01a4\b\r\n\r\f\r\u01a7\t\r\u0001\r\u0001\r\u0001\u000e\u0001\u000e\u0003\u000e\u01ad\b\u000e\u0001\u000f\u0005\u000f\u01b0\b\u000f\n\u000f\f\u000f\u01b3\t\u000f\u0001\u000f\u0001\u000f\u0001\u000f\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0011\u0001\u0011\u0001\u0011\u0001\u0012\u0001\u0012\u0001\u0012\u0001\u0012\u0005\u0012\u01c2\b\u0012\n\u0012\f\u0012\u01c5\t\u0012\u0001\u0012\u0001\u0012\u0001\u0013\u0001\u0013\u0001\u0013\u0003\u0013\u01cc\b\u0013\u0001\u0014\u0001\u0014\u0001\u0014\u0001\u0014\u0001\u0015\u0001\u0015\u0001\u0015\u0005\u0015\u01d5\b\u0015\n\u0015\f\u0015\u01d8\t\u0015\u0001\u0016\u0001\u0016\u0001\u0016\u0005\u0016\u01dd\b\u0016\n\u0016\f\u0016\u01e0\t\u0016\u0001\u0017\u0001\u0017\u0001\u0017\u0003\u0017\u01e5\b\u0017\u0001\u0017\u0001\u0017\u0001\u0018\u0001\u0018\u0003\u0018\u01eb\b\u0018\u0001\u0018\u0003\u0018\u01ee\b\u0018\u0001\u0018\u0003\u0018\u01f1\b\u0018\u0001\u0018\u0001\u0018\u0001\u0019\u0001\u0019\u0001\u0019\u0005\u0019\u01f8\b\u0019\n\u0019\f\u0019\u01fb\t\u0019\u0001\u001a\u0001\u001a\u0001\u001a\u0003\u001a\u0200\b\u001a\u0001\u001a\u0003\u001a\u0203\b\u001a\u0001\u001b\u0001\u001b\u0005\u001b\u0207\b\u001b\n\u001b\f\u001b\u020a\t\u001b\u0001\u001c\u0001\u001c\u0001\u001c\u0003\u001c\u020f\b\u001c\u0001\u001c\u0003\u001c\u0212\b\u001c\u0001\u001c\u0003\u001c\u0215\b\u001c\u0001\u001c\u0001\u001c\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001e\u0001\u001e\u0005\u001e\u021e\b\u001e\n\u001e\f\u001e\u0221\t\u001e\u0001\u001e\u0001\u001e\u0001\u001f\u0001\u001f\u0005\u001f\u0227\b\u001f\n\u001f\f\u001f\u022a\t\u001f\u0001\u001f\u0001\u001f\u0001 \u0001 \u0003 \u0230\b \u0001 \u0001 \u0005 \u0234\b \n \f \u0237\t \u0001 \u0003 \u023a\b \u0001!\u0001!\u0001!\u0001!\u0001!\u0001!\u0001!\u0001!\u0003!\u0244\b!\u0001\"\u0003\"\u0247\b\"\u0001\"\u0001\"\u0001\"\u0001\"\u0005\"\u024d\b\"\n\"\f\"\u0250\t\"\u0001\"\u0003\"\u0253\b\"\u0001\"\u0001\"\u0001#\u0001#\u0003#\u0259\b#\u0001$\u0001$\u0001$\u0001%\u0003%\u025f\b%\u0001%\u0001%\u0001%\u0003%\u0264\b%\u0001%\u0001%\u0001&\u0001&\u0001&\u0001&\u0001\'\u0005\'\u026d\b\'\n\'\f\'\u0270\t\'\u0001\'\u0001\'\u0003\'\u0274\b\'\u0001(\u0001(\u0001(\u0001(\u0001(\u0001(\u0001(\u0003(\u027d\b(\u0001)\u0003)\u0280\b)\u0001)\u0001)\u0001)\u0001)\u0005)\u0286\b)\n)\f)\u0289\t)\u0001)\u0003)\u028c\b)\u0001)\u0001)\u0001*\u0001*\u0001*\u0005*\u0293\b*\n*\f*\u0296\t*\u0001+\u0001+\u0005+\u029a\b+\n+\f+\u029d\t+\u0001+\u0001+\u0003+\u02a1\b+\u0001,\u0001,\u0001,\u0001,\u0003,\u02a7\b,\u0003,\u02a9\b,\u0001,\u0005,\u02ac\b,\n,\f,\u02af\t,\u0001-\u0001-\u0003-\u02b3\b-\u0001.\u0001.\u0001.\u0001.\u0005.\u02b9\b.\n.\f.\u02bc\t.\u0003.\u02be\b.\u0001.\u0003.\u02c1\b.\u0001.\u0001.\u0001/\u0001/\u0001/\u0003/\u02c8\b/\u0001/\u0005/\u02cb\b/\n/\f/\u02ce\t/\u00010\u00010\u00010\u00010\u00030\u02d4\b0\u00011\u00011\u00011\u00011\u00011\u00031\u02db\b1\u00011\u00031\u02de\b1\u00031\u02e0\b1\u00012\u00012\u00012\u00012\u00012\u00012\u00052\u02e8\b2\n2\f2\u02eb\t2\u00013\u00013\u00033\u02ef\b3\u00013\u00013\u00014\u00014\u00014\u00054\u02f6\b4\n4\f4\u02f9\t4\u00014\u00014\u00034\u02fd\b4\u00014\u00034\u0300\b4\u00015\u00055\u0303\b5\n5\f5\u0306\t5\u00015\u00015\u00015\u00016\u00056\u030c\b6\n6\f6\u030f\t6\u00016\u00016\u00016\u00016\u00016\u00017\u00017\u00057\u0318\b7\n7\f7\u031b\t7\u00018\u00018\u00018\u00018\u00019\u00019\u00019\u00019\u00019\u00019\u00019\u00019\u00039\u0329\b9\u0001:\u0001:\u0001;\u0001;\u0001<\u0001<\u0001<\u0001<\u0001=\u0005=\u0334\b=\n=\f=\u0337\t=\u0001>\u0001>\u0001>\u0001>\u0001>\u0003>\u033e\b>\u0001>\u0003>\u0341\b>\u0001?\u0001?\u0001?\u0005?\u0346\b?\n?\f?\u0349\t?\u0001@\u0001@\u0001@\u0001@\u0001A\u0001A\u0001A\u0003A\u0352\bA\u0001B\u0001B\u0001B\u0001B\u0005B\u0358\bB\nB\fB\u035b\tB\u0003B\u035d\bB\u0001B\u0003B\u0360\bB\u0001B\u0001B\u0001C\u0001C\u0001C\u0001C\u0001C\u0001D\u0001D\u0005D\u036b\bD\nD\fD\u036e\tD\u0001D\u0001D\u0001E\u0005E\u0373\bE\nE\fE\u0376\tE\u0001E\u0001E\u0003E\u037a\bE\u0001F\u0001F\u0001F\u0003F\u037f\bF\u0001F\u0001F\u0001F\u0001F\u0001F\u0001F\u0001F\u0003F\u0388\bF\u0001F\u0001F\u0003F\u038c\bF\u0001F\u0001F\u0003F\u0390\bF\u0001F\u0001F\u0003F\u0394\bF\u0001F\u0001F\u0003F\u0398\bF\u0003F\u039a\bF\u0001G\u0001G\u0001G\u0001G\u0005G\u03a0\bG\nG\fG\u03a3\tG\u0001G\u0003G\u03a6\bG\u0001H\u0001H\u0001I\u0001I\u0001I\u0001J\u0001J\u0003J\u03af\bJ\u0001J\u0005J\u03b2\bJ\nJ\fJ\u03b5\tJ\u0001J\u0001J\u0001K\u0003K\u03ba\bK\u0001K\u0001K\u0001K\u0001K\u0001K\u0001K\u0001K\u0003K\u03c3\bK\u0001K\u0001K\u0001K\u0001K\u0003K\u03c9\bK\u0001L\u0001L\u0005L\u03cd\bL\nL\fL\u03d0\tL\u0001L\u0001L\u0001M\u0001M\u0001M\u0001M\u0001M\u0001M\u0003M\u03da\bM\u0001N\u0005N\u03dd\bN\nN\fN\u03e0\tN\u0001N\u0001N\u0001N\u0001O\u0005O\u03e6\bO\nO\fO\u03e9\tO\u0001O\u0001O\u0001O\u0001O\u0003O\u03ef\bO\u0001O\u0003O\u03f2\bO\u0001P\u0001P\u0001P\u0001P\u0001P\u0003P\u03f9\bP\u0001P\u0001P\u0001P\u0001P\u0001P\u0001P\u0003P\u0401\bP\u0001P\u0001P\u0001P\u0001P\u0001P\u0001P\u0001P\u0001P\u0001P\u0001P\u0001P\u0001P\u0001P\u0001P\u0001P\u0001P\u0001P\u0004P\u0414\bP\u000bP\fP\u0415\u0001P\u0003P\u0419\bP\u0001P\u0003P\u041c\bP\u0001P\u0001P\u0001P\u0001P\u0005P\u0422\bP\nP\fP\u0425\tP\u0001P\u0003P\u0428\bP\u0001P\u0001P\u0001P\u0001P\u0001P\u0001P\u0001P\u0001P\u0001P\u0001P\u0001P\u0003P\u0435\bP\u0001P\u0001P\u0001P\u0001P\u0001P\u0001P\u0001P\u0003P\u043e\bP\u0001P\u0001P\u0001P\u0003P\u0443\bP\u0001P\u0001P\u0001P\u0001P\u0001P\u0001P\u0001P\u0001P\u0001P\u0003P\u044e\bP\u0001Q\u0001Q\u0001Q\u0001Q\u0001Q\u0001Q\u0001Q\u0001Q\u0001R\u0004R\u0459\bR\u000bR\fR\u045a\u0001R\u0005R\u045e\bR\nR\fR\u0461\tR\u0001R\u0005R\u0464\bR\nR\fR\u0467\tR\u0003R\u0469\bR\u0001S\u0001S\u0001S\u0003S\u046e\bS\u0001T\u0001T\u0001T\u0001T\u0001T\u0001U\u0001U\u0001U\u0001U\u0001V\u0001V\u0001V\u0001V\u0001V\u0001V\u0001W\u0001W\u0001W\u0001X\u0001X\u0001X\u0001X\u0001X\u0001X\u0001Y\u0005Y\u0489\bY\nY\fY\u048c\tY\u0001Y\u0001Y\u0001Y\u0001Z\u0001Z\u0001Z\u0005Z\u0494\bZ\nZ\fZ\u0497\tZ\u0001[\u0001[\u0001[\u0001\\\u0001\\\u0001\\\u0003\\\u049f\b\\\u0001\\\u0001\\\u0001]\u0001]\u0001]\u0005]\u04a6\b]\n]\f]\u04a9\t]\u0001^\u0001^\u0003^\u04ad\b^\u0001_\u0005_\u04b0\b_\n_\f_\u04b3\t_\u0001_\u0001_\u0001_\u0001_\u0001_\u0001`\u0005`\u04bb\b`\n`\f`\u04be\t`\u0001`\u0001`\u0003`\u04c2\b`\u0001a\u0001a\u0001a\u0001b\u0004b\u04c8\bb\u000bb\fb\u04c9\u0001b\u0004b\u04cd\bb\u000bb\fb\u04ce\u0001c\u0001c\u0001c\u0003c\u04d4\bc\u0001c\u0001c\u0003c\u04d8\bc\u0003c\u04da\bc\u0001d\u0001d\u0001d\u0005d\u04df\bd\nd\fd\u04e2\td\u0001e\u0001e\u0001e\u0003e\u04e7\be\u0001f\u0001f\u0001f\u0001f\u0001f\u0001f\u0003f\u04ef\bf\u0001f\u0001f\u0003f\u04f3\bf\u0001f\u0001f\u0003f\u04f7\bf\u0001f\u0003f\u04fa\bf\u0001g\u0001g\u0003g\u04fe\bg\u0001h\u0005h\u0501\bh\nh\fh\u0504\th\u0001h\u0001h\u0001h\u0001h\u0001h\u0001i\u0001i\u0001i\u0001i\u0001j\u0001j\u0001j\u0005j\u0512\bj\nj\fj\u0515\tj\u0001k\u0001k\u0001l\u0001l\u0001l\u0001l\u0001l\u0003l\u051e\bl\u0001l\u0001l\u0001l\u0001l\u0001l\u0001l\u0001l\u0001l\u0001l\u0001l\u0001l\u0003l\u052b\bl\u0001l\u0001l\u0003l\u052f\bl\u0001l\u0001l\u0001l\u0003l\u0534\bl\u0001l\u0001l\u0001l\u0001l\u0001l\u0001l\u0001l\u0001l\u0003l\u053e\bl\u0001l\u0001l\u0001l\u0001l\u0001l\u0001l\u0001l\u0001l\u0001l\u0001l\u0001l\u0001l\u0001l\u0001l\u0003l\u054e\bl\u0001l\u0001l\u0001l\u0001l\u0001l\u0001l\u0001l\u0001l\u0001l\u0001l\u0001l\u0001l\u0001l\u0001l\u0001l\u0001l\u0001l\u0001l\u0001l\u0001l\u0001l\u0001l\u0001l\u0001l\u0001l\u0001l\u0001l\u0001l\u0001l\u0001l\u0001l\u0001l\u0001l\u0001l\u0001l\u0001l\u0001l\u0001l\u0001l\u0003l\u0577\bl\u0001l\u0001l\u0001l\u0001l\u0001l\u0001l\u0001l\u0001l\u0001l\u0003l\u0582\bl\u0001l\u0001l\u0001l\u0001l\u0003l\u0588\bl\u0001l\u0001l\u0003l\u058c\bl\u0001l\u0001l\u0001l\u0001l\u0001l\u0001l\u0003l\u0594\bl\u0001l\u0001l\u0001l\u0001l\u0001l\u0001l\u0001l\u0001l\u0001l\u0001l\u0001l\u0001l\u0003l\u05a2\bl\u0001l\u0001l\u0003l\u05a6\bl\u0001l\u0001l\u0001l\u0001l\u0003l\u05ac\bl\u0005l\u05ae\bl\nl\fl\u05b1\tl\u0001m\u0001m\u0001m\u0005m\u05b6\bm\nm\fm\u05b9\tm\u0001n\u0001n\u0001n\u0001n\u0001o\u0001o\u0001o\u0003o\u05c2\bo\u0001o\u0001o\u0001o\u0001o\u0001o\u0003o\u05c9\bo\u0001p\u0001p\u0001p\u0005p\u05ce\bp\np\fp\u05d1\tp\u0001q\u0001q\u0003q\u05d5\bq\u0001r\u0001r\u0001r\u0001r\u0001r\u0001r\u0001r\u0001r\u0001r\u0001r\u0001r\u0005r\u05e2\br\nr\fr\u05e5\tr\u0001r\u0001r\u0001r\u0001r\u0001r\u0005r\u05ec\br\nr\fr\u05ef\tr\u0001r\u0001r\u0001r\u0003r\u05f4\br\u0001s\u0001s\u0001s\u0003s\u05f9\bs\u0001s\u0001s\u0001s\u0003s\u05fe\bs\u0001t\u0001t\u0001t\u0001t\u0001t\u0001t\u0001t\u0001t\u0001t\u0001t\u0003t\u060a\bt\u0003t\u060c\bt\u0001u\u0001u\u0001u\u0003u\u0611\bu\u0001u\u0005u\u0614\bu\nu\fu\u0617\tu\u0001u\u0003u\u061a\bu\u0001v\u0001v\u0001v\u0001v\u0003v\u0620\bv\u0001w\u0001w\u0001w\u0003w\u0625\bw\u0001w\u0001w\u0001x\u0001x\u0001x\u0005x\u062c\bx\nx\fx\u062f\tx\u0001x\u0001x\u0001x\u0001x\u0005x\u0635\bx\nx\fx\u0638\tx\u0001x\u0005x\u063b\bx\nx\fx\u063e\tx\u0003x\u0640\bx\u0001y\u0001y\u0001y\u0001y\u0001y\u0001z\u0001z\u0003z\u0649\bz\u0001{\u0001{\u0001{\u0003{\u064e\b{\u0001|\u0001|\u0001|\u0003|\u0653\b|\u0001}\u0001}\u0001}\u0001}\u0001~\u0001~\u0001~\u0005~\u065c\b~\n~\f~\u065f\t~\u0001\u007f\u0001\u007f\u0001\u007f\u0005\u007f\u0664\b\u007f\n\u007f\f\u007f\u0667\t\u007f\u0001\u0080\u0001\u0080\u0001\u0080\u0005\u0080\u066c\b\u0080\n\u0080\f\u0080\u066f\t\u0080\u0001\u0081\u0001\u0081\u0003\u0081\u0673\b\u0081\u0001\u0082\u0001\u0082\u0001\u0082\u0001\u0082\u0001\u0083\u0001\u0083\u0001\u0084\u0001\u0084\u0001\u0084\u0001\u0084\u0005\u0084\u067f\b\u0084\n\u0084\f\u0084\u0682\t\u0084\u0001\u0084\u0001\u0084\u0001\u0085\u0001\u0085\u0003\u0085\u0688\b\u0085\u0001\u0085\u0001\u0085\u0001\u0085\u0001\u0085\u0001\u0085\u0003\u0085\u068f\b\u0085\u0001\u0085\u0003\u0085\u0692\b\u0085\u0003\u0085\u0694\b\u0085\u0001\u0086\u0001\u0086\u0003\u0086\u0698\b\u0086\u0001\u0086\u0001\u0086\u0001\u0087\u0001\u0087\u0003\u0087\u069e\b\u0087\u0001\u0088\u0001\u0088\u0001\u0088\u0001\u0088\u0001\u0089\u0001\u0089\u0001\u0089\u0001\u0089\u0003\u0089\u06a8\b\u0089\u0001\u0089\u0001\u0089\u0003\u0089\u06ac\b\u0089\u0001\u008a\u0005\u008a\u06af\b\u008a\n\u008a\f\u008a\u06b2\t\u008a\u0001\u008a\u0001\u008a\u0001\u008a\u0001\u008b\u0001\u008b\u0001\u008b\u0001\u008b\u0005\u008b\u06bb\b\u008b\n\u008b\f\u008b\u06be\t\u008b\u0001\u008c\u0001\u008c\u0001\u008c\u0000\u0001\u00d8\u008d\u0000\u0002\u0004\u0006\b\n\f\u000e\u0010\u0012\u0014\u0016\u0018\u001a\u001c\u001e \"$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100\u0102\u0104\u0106\u0108\u010a\u010c\u010e\u0110\u0112\u0114\u0116\u0118\u0000\r\u0001\u0000\u00d8\u00df\u0001\u0000\u00c0\u00c3\u0001\u0000NO\u0002\u0000}~\u0081\u0082\u0001\u0000\u0083\u0084\u0002\u0000<<\u007f\u0080\u0001\u0000}~\u0001\u0000ux\u0001\u0000st\u0002\u0000PPbl\u0001\u0000\u0081\u0082\u0001\u000019\u0004\u0000::\u00c8\u00c8\u00cf\u00cf\u00d1\u00d3\u0764\u0000\u011b\u0001\u0000\u0000\u0000\u0002\u012b\u0001\u0000\u0000\u0000\u0004\u013c\u0001\u0000\u0000\u0000\u0006\u014a\u0001\u0000\u0000\u0000\b\u0151\u0001\u0000\u0000\u0000\n\u0162\u0001\u0000\u0000\u0000\f\u0166\u0001\u0000\u0000\u0000\u000e\u0168\u0001\u0000\u0000\u0000\u0010\u0178\u0001\u0000\u0000\u0000\u0012\u0183\u0001\u0000\u0000\u0000\u0014\u0196\u0001\u0000\u0000\u0000\u0016\u0198\u0001\u0000\u0000\u0000\u0018\u019c\u0001\u0000\u0000\u0000\u001a\u01a1\u0001\u0000\u0000\u0000\u001c\u01ac\u0001\u0000\u0000\u0000\u001e\u01b1\u0001\u0000\u0000\u0000 \u01b7\u0001\u0000\u0000\u0000\"\u01ba\u0001\u0000\u0000\u0000$\u01bd\u0001\u0000\u0000\u0000&\u01c8\u0001\u0000\u0000\u0000(\u01cd\u0001\u0000\u0000\u0000*\u01d1\u0001\u0000\u0000\u0000,\u01d9\u0001\u0000\u0000\u0000.\u01e1\u0001\u0000\u0000\u00000\u01e8\u0001\u0000\u0000\u00002\u01f4\u0001\u0000\u0000\u00004\u01fc\u0001\u0000\u0000\u00006\u0204\u0001\u0000\u0000\u00008\u020b\u0001\u0000\u0000\u0000:\u0218\u0001\u0000\u0000\u0000<\u021b\u0001\u0000\u0000\u0000>\u0224\u0001\u0000\u0000\u0000@\u0239\u0001\u0000\u0000\u0000B\u0243\u0001\u0000\u0000\u0000D\u0246\u0001\u0000\u0000\u0000F\u0258\u0001\u0000\u0000\u0000H\u025a\u0001\u0000\u0000\u0000J\u025e\u0001\u0000\u0000\u0000L\u0267\u0001\u0000\u0000\u0000N\u0273\u0001\u0000\u0000\u0000P\u027c\u0001\u0000\u0000\u0000R\u027f\u0001\u0000\u0000\u0000T\u028f\u0001\u0000\u0000\u0000V\u0297\u0001\u0000\u0000\u0000X\u02a8\u0001\u0000\u0000\u0000Z\u02b2\u0001\u0000\u0000\u0000\\\u02b4\u0001\u0000\u0000\u0000^\u02c4\u0001\u0000\u0000\u0000`\u02cf\u0001\u0000\u0000\u0000b\u02df\u0001\u0000\u0000\u0000d\u02e1\u0001\u0000\u0000\u0000f\u02ec\u0001\u0000\u0000\u0000h\u02ff\u0001\u0000\u0000\u0000j\u0304\u0001\u0000\u0000\u0000l\u030d\u0001\u0000\u0000\u0000n\u0315\u0001\u0000\u0000\u0000p\u031c\u0001\u0000\u0000\u0000r\u0328\u0001\u0000\u0000\u0000t\u032a\u0001\u0000\u0000\u0000v\u032c\u0001\u0000\u0000\u0000x\u032e\u0001\u0000\u0000\u0000z\u0335\u0001\u0000\u0000\u0000|\u0338\u0001\u0000\u0000\u0000~\u0342\u0001\u0000\u0000\u0000\u0080\u034a\u0001\u0000\u0000\u0000\u0082\u0351\u0001\u0000\u0000\u0000\u0084\u0353\u0001\u0000\u0000\u0000\u0086\u0363\u0001\u0000\u0000\u0000\u0088\u0368\u0001\u0000\u0000\u0000\u008a\u0379\u0001\u0000\u0000\u0000\u008c\u0399\u0001\u0000\u0000\u0000\u008e\u039b\u0001\u0000\u0000\u0000\u0090\u03a7\u0001\u0000\u0000\u0000\u0092\u03a9\u0001\u0000\u0000\u0000\u0094\u03ac\u0001\u0000\u0000\u0000\u0096\u03c8\u0001\u0000\u0000\u0000\u0098\u03ca\u0001\u0000\u0000\u0000\u009a\u03d9\u0001\u0000\u0000\u0000\u009c\u03de\u0001\u0000\u0000\u0000\u009e\u03f1\u0001\u0000\u0000\u0000\u00a0\u044d\u0001\u0000\u0000\u0000\u00a2\u044f\u0001\u0000\u0000\u0000\u00a4\u0468\u0001\u0000\u0000\u0000\u00a6\u046d\u0001\u0000\u0000\u0000\u00a8\u046f\u0001\u0000\u0000\u0000\u00aa\u0474\u0001\u0000\u0000\u0000\u00ac\u0478\u0001\u0000\u0000\u0000\u00ae\u047e\u0001\u0000\u0000\u0000\u00b0\u0481\u0001\u0000\u0000\u0000\u00b2\u048a\u0001\u0000\u0000\u0000\u00b4\u0490\u0001\u0000\u0000\u0000\u00b6\u0498\u0001\u0000\u0000\u0000\u00b8\u049b\u0001\u0000\u0000\u0000\u00ba\u04a2\u0001\u0000\u0000\u0000\u00bc\u04ac\u0001\u0000\u0000\u0000\u00be\u04b1\u0001\u0000\u0000\u0000\u00c0\u04bc\u0001\u0000\u0000\u0000\u00c2\u04c3\u0001\u0000\u0000\u0000\u00c4\u04c7\u0001\u0000\u0000\u0000\u00c6\u04d9\u0001\u0000\u0000\u0000\u00c8\u04db\u0001\u0000\u0000\u0000\u00ca\u04e6\u0001\u0000\u0000\u0000\u00cc\u04f9\u0001\u0000\u0000\u0000\u00ce\u04fd\u0001\u0000\u0000\u0000\u00d0\u0502\u0001\u0000\u0000\u0000\u00d2\u050a\u0001\u0000\u0000\u0000\u00d4\u050e\u0001\u0000\u0000\u0000\u00d6\u0516\u0001\u0000\u0000\u0000\u00d8\u053d\u0001\u0000\u0000\u0000\u00da\u05b2\u0001\u0000\u0000\u0000\u00dc\u05ba\u0001\u0000\u0000\u0000\u00de\u05c8\u0001\u0000\u0000\u0000\u00e0\u05ca\u0001\u0000\u0000\u0000\u00e2\u05d4\u0001\u0000\u0000\u0000\u00e4\u05f3\u0001\u0000\u0000\u0000\u00e6\u05f8\u0001\u0000\u0000\u0000\u00e8\u060b\u0001\u0000\u0000\u0000\u00ea\u0619\u0001\u0000\u0000\u0000\u00ec\u061b\u0001\u0000\u0000\u0000\u00ee\u0621\u0001\u0000\u0000\u0000\u00f0\u0628\u0001\u0000\u0000\u0000\u00f2\u0641\u0001\u0000\u0000\u0000\u00f4\u0646\u0001\u0000\u0000\u0000\u00f6\u064d\u0001\u0000\u0000\u0000\u00f8\u0652\u0001\u0000\u0000\u0000\u00fa\u0654\u0001\u0000\u0000\u0000\u00fc\u0658\u0001\u0000\u0000\u0000\u00fe\u0660\u0001\u0000\u0000\u0000\u0100\u0668\u0001\u0000\u0000\u0000\u0102\u0672\u0001\u0000\u0000\u0000\u0104\u0674\u0001\u0000\u0000\u0000\u0106\u0678\u0001\u0000\u0000\u0000\u0108\u067a\u0001\u0000\u0000\u0000\u010a\u0693\u0001\u0000\u0000\u0000\u010c\u0695\u0001\u0000\u0000\u0000\u010e\u069d\u0001\u0000\u0000\u0000\u0110\u069f\u0001\u0000\u0000\u0000\u0112\u06ab\u0001\u0000\u0000\u0000\u0114\u06b0\u0001\u0000\u0000\u0000\u0116\u06b6\u0001\u0000\u0000\u0000\u0118\u06bf\u0001\u0000\u0000\u0000\u011a\u011c\u0003\u0002\u0001\u0000\u011b\u011a\u0001\u0000\u0000\u0000\u011b\u011c\u0001\u0000\u0000\u0000\u011c\u0120\u0001\u0000\u0000\u0000\u011d\u011f\u0003\u0004\u0002\u0000\u011e\u011d\u0001\u0000\u0000\u0000\u011f\u0122\u0001\u0000\u0000\u0000\u0120\u011e\u0001\u0000\u0000\u0000\u0120\u0121\u0001\u0000\u0000\u0000\u0121\u0126\u0001\u0000\u0000\u0000\u0122\u0120\u0001\u0000\u0000\u0000\u0123\u0125\u0003\u0006\u0003\u0000\u0124\u0123\u0001\u0000\u0000\u0000\u0125\u0128\u0001\u0000\u0000\u0000\u0126\u0124\u0001\u0000\u0000\u0000\u0126\u0127\u0001\u0000\u0000\u0000\u0127\u0129\u0001\u0000\u0000\u0000\u0128\u0126\u0001\u0000\u0000\u0000\u0129\u012a\u0005\u0000\u0000\u0001\u012a\u0001\u0001\u0000\u0000\u0000\u012b\u012c\u0003z=\u0000\u012c\u012d\u0005,\u0000\u0000\u012d\u012e\u0003n7\u0000\u012e\u012f\u0005-\u0000\u0000\u012f\u0003\u0001\u0000\u0000\u0000\u0130\u0132\u0005\u001e\u0000\u0000\u0131\u0133\u0005@\u0000\u0000\u0132\u0131\u0001\u0000\u0000\u0000\u0132\u0133\u0001\u0000\u0000\u0000\u0133\u0134\u0001\u0000\u0000\u0000\u0134\u0137\u0003n7\u0000\u0135\u0136\u0005;\u0000\u0000\u0136\u0138\u0005<\u0000\u0000\u0137\u0135\u0001\u0000\u0000\u0000\u0137\u0138\u0001\u0000\u0000\u0000\u0138\u0139\u0001\u0000\u0000\u0000\u0139\u013a\u0005-\u0000\u0000\u013a\u013d\u0001\u0000\u0000\u0000\u013b\u013d\u0005-\u0000\u0000\u013c\u0130\u0001\u0000\u0000\u0000\u013c\u013b\u0001\u0000\u0000\u0000\u013d\u0005\u0001\u0000\u0000\u0000\u013e\u0140\u0003\n\u0005\u0000\u013f\u013e\u0001\u0000\u0000\u0000\u0140\u0143\u0001\u0000\u0000\u0000\u0141\u013f\u0001\u0000\u0000\u0000\u0141\u0142\u0001\u0000\u0000\u0000\u0142\u0144\u0001\u0000\u0000\u0000\u0143\u0141\u0001\u0000\u0000\u0000\u0144\u014b\u0003\b\u0004\u0000\u0145\u0147\u0005-\u0000\u0000\u0146\u0145\u0001\u0000\u0000\u0000\u0147\u0148\u0001\u0000\u0000\u0000\u0148\u0146\u0001\u0000\u0000\u0000\u0148\u0149\u0001\u0000\u0000\u0000\u0149\u014b\u0001\u0000\u0000\u0000\u014a\u0141\u0001\u0000\u0000\u0000\u014a\u0146\u0001\u0000\u0000\u0000\u014b\u0007\u0001\u0000\u0000\u0000\u014c\u0152\u0003\u000e\u0007\u0000\u014d\u0152\u0003.\u0017\u0000\u014e\u0152\u00038\u001c\u0000\u014f\u0152\u0003\u0086C\u0000\u0150\u0152\u0003\u0010\b\u0000\u0151\u014c\u0001\u0000\u0000\u0000\u0151\u014d\u0001\u0000\u0000\u0000\u0151\u014e\u0001\u0000\u0000\u0000\u0151\u014f\u0001\u0000\u0000\u0000\u0151\u0150\u0001\u0000\u0000\u0000\u0152\t\u0001\u0000\u0000\u0000\u0153\u0163\u0003|>\u0000\u0154\u0163\u0005>\u0000\u0000\u0155\u0163\u0005?\u0000\u0000\u0156\u0163\u0005=\u0000\u0000\u0157\u0163\u0005@\u0000\u0000\u0158\u0163\u0005(\u0000\u0000\u0159\u0163\u0005^\u0000\u0000\u015a\u0163\u0005\'\u0000\u0000\u015b\u0163\u0005)\u0000\u0000\u015c\u0163\u0005B\u0000\u0000\u015d\u0163\u0005C\u0000\u0000\u015e\u0163\u0005A\u0000\u0000\u015f\u0163\u0005D\u0000\u0000\u0160\u0163\u0005\u00d1\u0000\u0000\u0161\u0163\u0005\u00d2\u0000\u0000\u0162\u0153\u0001\u0000\u0000\u0000\u0162\u0154\u0001\u0000\u0000\u0000\u0162\u0155\u0001\u0000\u0000\u0000\u0162\u0156\u0001\u0000\u0000\u0000\u0162\u0157\u0001\u0000\u0000\u0000\u0162\u0158\u0001\u0000\u0000\u0000\u0162\u0159\u0001\u0000\u0000\u0000\u0162\u015a\u0001\u0000\u0000\u0000\u0162\u015b\u0001\u0000\u0000\u0000\u0162\u015c\u0001\u0000\u0000\u0000\u0162\u015d\u0001\u0000\u0000\u0000\u0162\u015e\u0001\u0000\u0000\u0000\u0162\u015f\u0001\u0000\u0000\u0000\u0162\u0160\u0001\u0000\u0000\u0000\u0162\u0161\u0001\u0000\u0000\u0000\u0163\u000b\u0001\u0000\u0000\u0000\u0164\u0167\u0005\'\u0000\u0000\u0165\u0167\u0003|>\u0000\u0166\u0164\u0001\u0000\u0000\u0000\u0166\u0165\u0001\u0000\u0000\u0000\u0167\r\u0001\u0000\u0000\u0000\u0168\u0169\u0005E\u0000\u0000\u0169\u016b\u0003\u0118\u008c\u0000\u016a\u016c\u0003$\u0012\u0000\u016b\u016a\u0001\u0000\u0000\u0000\u016b\u016c\u0001\u0000\u0000\u0000\u016c\u016e\u0001\u0000\u0000\u0000\u016d\u016f\u0003 \u0010\u0000\u016e\u016d\u0001\u0000\u0000\u0000\u016e\u016f\u0001\u0000\u0000\u0000\u016f\u0171\u0001\u0000\u0000\u0000\u0170\u0172\u0003\"\u0011\u0000\u0171\u0170\u0001\u0000\u0000\u0000\u0171\u0172\u0001\u0000\u0000\u0000\u0172\u0174\u0001\u0000\u0000\u0000\u0173\u0175\u0003\u0116\u008b\u0000\u0174\u0173\u0001\u0000\u0000\u0000\u0174\u0175\u0001\u0000\u0000\u0000\u0175\u0176\u0001\u0000\u0000\u0000\u0176\u0177\u0003<\u001e\u0000\u0177\u000f\u0001\u0000\u0000\u0000\u0178\u0179\u0005\u00c8\u0000\u0000\u0179\u017b\u0003\u0118\u008c\u0000\u017a\u017c\u0003$\u0012\u0000\u017b\u017a\u0001\u0000\u0000\u0000\u017b\u017c\u0001\u0000\u0000\u0000\u017c\u017d\u0001\u0000\u0000\u0000\u017d\u017f\u0003\u0012\t\u0000\u017e\u0180\u0003\"\u0011\u0000\u017f\u017e\u0001\u0000\u0000\u0000\u017f\u0180\u0001\u0000\u0000\u0000\u0180\u0181\u0001\u0000\u0000\u0000\u0181\u0182\u0003\u001a\r\u0000\u0182\u0011\u0001\u0000\u0000\u0000\u0183\u0185\u0005L\u0000\u0000\u0184\u0186\u0003\u0014\n\u0000\u0185\u0184\u0001\u0000\u0000\u0000\u0185\u0186\u0001\u0000\u0000\u0000\u0186\u0187\u0001\u0000\u0000\u0000\u0187\u0188\u0005M\u0000\u0000\u0188\u0013\u0001\u0000\u0000\u0000\u0189\u018e\u0003\u0016\u000b\u0000\u018a\u018b\u0005J\u0000\u0000\u018b\u018d\u0003\u0016\u000b\u0000\u018c\u018a\u0001\u0000\u0000\u0000\u018d\u0190\u0001\u0000\u0000\u0000\u018e\u018c\u0001\u0000\u0000\u0000\u018e\u018f\u0001\u0000\u0000\u0000\u018f\u0193\u0001\u0000\u0000\u0000\u0190\u018e\u0001\u0000\u0000\u0000\u0191\u0192\u0005J\u0000\u0000\u0192\u0194\u0003\u0018\f\u0000\u0193\u0191\u0001\u0000\u0000\u0000\u0193\u0194\u0001\u0000\u0000\u0000\u0194\u0197\u0001\u0000\u0000\u0000\u0195\u0197\u0003\u0018\f\u0000\u0196\u0189\u0001\u0000\u0000\u0000\u0196\u0195\u0001\u0000\u0000\u0000\u0197\u0015\u0001\u0000\u0000\u0000\u0198\u0199\u0003z=\u0000\u0199\u019a\u0003\u0100\u0080\u0000\u019a\u019b\u0003\u0118\u008c\u0000\u019b\u0017\u0001\u0000\u0000\u0000\u019c\u019d\u0003z=\u0000\u019d\u019e\u0003\u0100\u0080\u0000\u019e\u019f\u0005\u00ab\u0000\u0000\u019f\u01a0\u0003\u0118\u008c\u0000\u01a0\u0019\u0001\u0000\u0000\u0000\u01a1\u01a5\u0005H\u0000\u0000\u01a2\u01a4\u0003\u001c\u000e\u0000\u01a3\u01a2\u0001\u0000\u0000\u0000\u01a4\u01a7\u0001\u0000\u0000\u0000\u01a5\u01a3\u0001\u0000\u0000\u0000\u01a5\u01a6\u0001\u0000\u0000\u0000\u01a6\u01a8\u0001\u0000\u0000\u0000\u01a7\u01a5\u0001\u0000\u0000\u0000\u01a8\u01a9\u0005I\u0000\u0000\u01a9\u001b\u0001\u0000\u0000\u0000\u01aa\u01ad\u0003\u001e\u000f\u0000\u01ab\u01ad\u0003@ \u0000\u01ac\u01aa\u0001\u0000\u0000\u0000\u01ac\u01ab\u0001\u0000\u0000\u0000\u01ad\u001d\u0001\u0000\u0000\u0000\u01ae\u01b0\u0003\n\u0005\u0000\u01af\u01ae\u0001\u0000\u0000\u0000\u01b0\u01b3\u0001\u0000\u0000\u0000\u01b1\u01af\u0001\u0000\u0000\u0000\u01b1\u01b2\u0001\u0000\u0000\u0000\u01b2\u01b4\u0001\u0000\u0000\u0000\u01b3\u01b1\u0001\u0000\u0000\u0000\u01b4\u01b5\u0003\u0118\u008c\u0000\u01b5\u01b6\u0003\u0094J\u0000\u01b6\u001f\u0001\u0000\u0000\u0000\u01b7\u01b8\u0005\u0012\u0000\u0000\u01b8\u01b9\u0003\u0100\u0080\u0000\u01b9!\u0001\u0000\u0000\u0000\u01ba\u01bb\u0005K\u0000\u0000\u01bb\u01bc\u0003\u00fe\u007f\u0000\u01bc#\u0001\u0000\u0000\u0000\u01bd\u01be\u0005u\u0000\u0000\u01be\u01c3\u0003&\u0013\u0000\u01bf\u01c0\u0005J\u0000\u0000\u01c0\u01c2\u0003&\u0013\u0000\u01c1\u01bf\u0001\u0000\u0000\u0000\u01c2\u01c5\u0001\u0000\u0000\u0000\u01c3\u01c1\u0001\u0000\u0000\u0000\u01c3\u01c4\u0001\u0000\u0000\u0000\u01c4\u01c6\u0001\u0000\u0000\u0000\u01c5\u01c3\u0001\u0000\u0000\u0000\u01c6\u01c7\u0005v\u0000\u0000\u01c7%\u0001\u0000\u0000\u0000\u01c8\u01c9\u0003z=\u0000\u01c9\u01cb\u0003\u0118\u008c\u0000\u01ca\u01cc\u0003(\u0014\u0000\u01cb\u01ca\u0001\u0000\u0000\u0000\u01cb\u01cc\u0001\u0000\u0000\u0000\u01cc\'\u0001\u0000\u0000\u0000\u01cd\u01ce\u0005\u0012\u0000\u0000\u01ce\u01cf\u0003z=\u0000\u01cf\u01d0\u0003*\u0015\u0000\u01d0)\u0001\u0000\u0000\u0000\u01d1\u01d6\u0003,\u0016\u0000\u01d2\u01d3\u0005r\u0000\u0000\u01d3\u01d5\u0003,\u0016\u0000\u01d4\u01d2\u0001\u0000\u0000\u0000\u01d5\u01d8\u0001\u0000\u0000\u0000\u01d6\u01d4\u0001\u0000\u0000\u0000\u01d6\u01d7\u0001\u0000\u0000\u0000\u01d7+\u0001\u0000\u0000\u0000\u01d8\u01d6\u0001\u0000\u0000\u0000\u01d9\u01da\u0003z=\u0000\u01da\u01de\u0003\u0102\u0081\u0000\u01db\u01dd\u0003\u0104\u0082\u0000\u01dc\u01db\u0001\u0000\u0000\u0000\u01dd\u01e0\u0001\u0000\u0000\u0000\u01de\u01dc\u0001\u0000\u0000\u0000\u01de\u01df\u0001\u0000\u0000\u0000\u01df-\u0001\u0000\u0000\u0000\u01e0\u01de\u0001\u0000\u0000\u0000\u01e1\u01e2\u0005\u0099\u0000\u0000\u01e2\u01e4\u0003\u0118\u008c\u0000\u01e3\u01e5\u0003\"\u0011\u0000\u01e4\u01e3\u0001\u0000\u0000\u0000\u01e4\u01e5\u0001\u0000\u0000\u0000\u01e5\u01e6\u0001\u0000\u0000\u0000\u01e6\u01e7\u00030\u0018\u0000\u01e7/\u0001\u0000\u0000\u0000\u01e8\u01ea\u0005H\u0000\u0000\u01e9\u01eb\u00032\u0019\u0000\u01ea\u01e9\u0001\u0000\u0000\u0000\u01ea\u01eb\u0001\u0000\u0000\u0000\u01eb\u01ed\u0001\u0000\u0000\u0000\u01ec\u01ee\u0005J\u0000\u0000\u01ed\u01ec\u0001\u0000\u0000\u0000\u01ed\u01ee\u0001\u0000\u0000\u0000\u01ee\u01f0\u0001\u0000\u0000\u0000\u01ef\u01f1\u00036\u001b\u0000\u01f0\u01ef\u0001\u0000\u0000\u0000\u01f0\u01f1\u0001\u0000\u0000\u0000\u01f1\u01f2\u0001\u0000\u0000\u0000\u01f2\u01f3\u0005I\u0000\u0000\u01f31\u0001\u0000\u0000\u0000\u01f4\u01f9\u00034\u001a\u0000\u01f5\u01f6\u0005J\u0000\u0000\u01f6\u01f8\u00034\u001a\u0000\u01f7\u01f5\u0001\u0000\u0000\u0000\u01f8\u01fb\u0001\u0000\u0000\u0000\u01f9\u01f7\u0001\u0000\u0000\u0000\u01f9\u01fa\u0001\u0000\u0000\u0000\u01fa3\u0001\u0000\u0000\u0000\u01fb\u01f9\u0001\u0000\u0000\u0000\u01fc\u01fd\u0003z=\u0000\u01fd\u01ff\u0003\u0118\u008c\u0000\u01fe\u0200\u0003\u010c\u0086\u0000\u01ff\u01fe\u0001\u0000\u0000\u0000\u01ff\u0200\u0001\u0000\u0000\u0000\u0200\u0202\u0001\u0000\u0000\u0000\u0201\u0203\u0003<\u001e\u0000\u0202\u0201\u0001\u0000\u0000\u0000\u0202\u0203\u0001\u0000\u0000\u0000\u02035\u0001\u0000\u0000\u0000\u0204\u0208\u0005-\u0000\u0000\u0205\u0207\u0003@ \u0000\u0206\u0205\u0001\u0000\u0000\u0000\u0207\u020a\u0001\u0000\u0000\u0000\u0208\u0206\u0001\u0000\u0000\u0000\u0208\u0209\u0001\u0000\u0000\u0000\u02097\u0001\u0000\u0000\u0000\u020a\u0208\u0001\u0000\u0000\u0000\u020b\u020c\u0005G\u0000\u0000\u020c\u020e\u0003\u0118\u008c\u0000\u020d\u020f\u0003$\u0012\u0000\u020e\u020d\u0001\u0000\u0000\u0000\u020e\u020f\u0001\u0000\u0000\u0000\u020f\u0211\u0001\u0000\u0000\u0000\u0210\u0212\u0003:\u001d\u0000\u0211\u0210\u0001\u0000\u0000\u0000\u0211\u0212\u0001\u0000\u0000\u0000\u0212\u0214\u0001\u0000\u0000\u0000\u0213\u0215\u0003\u0116\u008b\u0000\u0214\u0213\u0001\u0000\u0000\u0000\u0214\u0215\u0001\u0000\u0000\u0000\u0215\u0216\u0001\u0000\u0000\u0000\u0216\u0217\u0003>\u001f\u0000\u02179\u0001\u0000\u0000\u0000\u0218\u0219\u0005\u0012\u0000\u0000\u0219\u021a\u0003\u00fe\u007f\u0000\u021a;\u0001\u0000\u0000\u0000\u021b\u021f\u0005H\u0000\u0000\u021c\u021e\u0003@ \u0000\u021d\u021c\u0001\u0000\u0000\u0000\u021e\u0221\u0001\u0000\u0000\u0000\u021f\u021d\u0001\u0000\u0000\u0000\u021f\u0220\u0001\u0000\u0000\u0000\u0220\u0222\u0001\u0000\u0000\u0000\u0221\u021f\u0001\u0000\u0000\u0000\u0222\u0223\u0005I\u0000\u0000\u0223=\u0001\u0000\u0000\u0000\u0224\u0228\u0005H\u0000\u0000\u0225\u0227\u0003N\'\u0000\u0226\u0225\u0001\u0000\u0000\u0000\u0227\u022a\u0001\u0000\u0000\u0000\u0228\u0226\u0001\u0000\u0000\u0000\u0228\u0229\u0001\u0000\u0000\u0000\u0229\u022b\u0001\u0000\u0000\u0000\u022a\u0228\u0001\u0000\u0000\u0000\u022b\u022c\u0005I\u0000\u0000\u022c?\u0001\u0000\u0000\u0000\u022d\u023a\u0005-\u0000\u0000\u022e\u0230\u0005@\u0000\u0000\u022f\u022e\u0001\u0000\u0000\u0000\u022f\u0230\u0001\u0000\u0000\u0000\u0230\u0231\u0001\u0000\u0000\u0000\u0231\u023a\u0003\u0098L\u0000\u0232\u0234\u0003\n\u0005\u0000\u0233\u0232\u0001\u0000\u0000\u0000\u0234\u0237\u0001\u0000\u0000\u0000\u0235\u0233\u0001\u0000\u0000\u0000\u0235\u0236\u0001\u0000\u0000\u0000\u0236\u0238\u0001\u0000\u0000\u0000\u0237\u0235\u0001\u0000\u0000\u0000\u0238\u023a\u0003B!\u0000\u0239\u022d\u0001\u0000\u0000\u0000\u0239\u022f\u0001\u0000\u0000\u0000\u0239\u0235\u0001\u0000\u0000\u0000\u023aA\u0001\u0000\u0000\u0000\u023b\u0244\u0003\u0010\b\u0000\u023c\u0244\u0003D\"\u0000\u023d\u0244\u0003L&\u0000\u023e\u0244\u0003J%\u0000\u023f\u0244\u00038\u001c\u0000\u0240\u0244\u0003\u0086C\u0000\u0241\u0244\u0003\u000e\u0007\u0000\u0242\u0244\u0003.\u0017\u0000\u0243\u023b\u0001\u0000\u0000\u0000\u0243\u023c\u0001\u0000\u0000\u0000\u0243\u023d\u0001\u0000\u0000\u0000\u0243\u023e\u0001\u0000\u0000\u0000\u0243\u023f\u0001\u0000\u0000\u0000\u0243\u0240\u0001\u0000\u0000\u0000\u0243\u0241\u0001\u0000\u0000\u0000\u0243\u0242\u0001\u0000\u0000\u0000\u0244C\u0001\u0000\u0000\u0000\u0245\u0247\u0003$\u0012\u0000\u0246\u0245\u0001\u0000\u0000\u0000\u0246\u0247\u0001\u0000\u0000\u0000\u0247\u0248\u0001\u0000\u0000\u0000\u0248\u0249\u0003\u0100\u0080\u0000\u0249\u024a\u0003\u0118\u008c\u0000\u024a\u024e\u0003f3\u0000\u024b\u024d\u0003\u0104\u0082\u0000\u024c\u024b\u0001\u0000\u0000\u0000\u024d\u0250\u0001\u0000\u0000\u0000\u024e\u024c\u0001\u0000\u0000\u0000\u024e\u024f\u0001\u0000\u0000\u0000\u024f\u0252\u0001\u0000\u0000\u0000\u0250\u024e\u0001\u0000\u0000\u0000\u0251\u0253\u0003H$\u0000\u0252\u0251\u0001\u0000\u0000\u0000\u0252\u0253\u0001\u0000\u0000\u0000\u0253\u0254\u0001\u0000\u0000\u0000\u0254\u0255\u0003F#\u0000\u0255E\u0001\u0000\u0000\u0000\u0256\u0259\u0003\u0098L\u0000\u0257\u0259\u0005-\u0000\u0000\u0258\u0256\u0001\u0000\u0000\u0000\u0258\u0257\u0001\u0000\u0000\u0000\u0259G\u0001\u0000\u0000\u0000\u025a\u025b\u0005Q\u0000\u0000\u025b\u025c\u0003d2\u0000\u025cI\u0001\u0000\u0000\u0000\u025d\u025f\u0003$\u0012\u0000\u025e\u025d\u0001\u0000\u0000\u0000\u025e\u025f\u0001\u0000\u0000\u0000\u025f\u0260\u0001\u0000\u0000\u0000\u0260\u0261\u0003\u0118\u008c\u0000\u0261\u0263\u0003f3\u0000\u0262\u0264\u0003H$\u0000\u0263\u0262\u0001\u0000\u0000\u0000\u0263\u0264\u0001\u0000\u0000\u0000\u0264\u0265\u0001\u0000\u0000\u0000\u0265\u0266\u0003\u0094J\u0000\u0266K\u0001\u0000\u0000\u0000\u0267\u0268\u0003\u0100\u0080\u0000\u0268\u0269\u0003T*\u0000\u0269\u026a\u0005-\u0000\u0000\u026aM\u0001\u0000\u0000\u0000\u026b\u026d\u0003\n\u0005\u0000\u026c\u026b\u0001\u0000\u0000\u0000\u026d\u0270\u0001\u0000\u0000\u0000\u026e\u026c\u0001\u0000\u0000\u0000\u026e\u026f\u0001\u0000\u0000\u0000\u026f\u0271\u0001\u0000\u0000\u0000\u0270\u026e\u0001\u0000\u0000\u0000\u0271\u0274\u0003P(\u0000\u0272\u0274\u0005-\u0000\u0000\u0273\u026e\u0001\u0000\u0000\u0000\u0273\u0272\u0001\u0000\u0000\u0000\u0274O\u0001\u0000\u0000\u0000\u0275\u027d\u0003L&\u0000\u0276\u027d\u0003\u0010\b\u0000\u0277\u027d\u0003R)\u0000\u0278\u027d\u00038\u001c\u0000\u0279\u027d\u0003\u0086C\u0000\u027a\u027d\u0003\u000e\u0007\u0000\u027b\u027d\u0003.\u0017\u0000\u027c\u0275\u0001\u0000\u0000\u0000\u027c\u0276\u0001\u0000\u0000\u0000\u027c\u0277\u0001\u0000\u0000\u0000\u027c\u0278\u0001\u0000\u0000\u0000\u027c\u0279\u0001\u0000\u0000\u0000\u027c\u027a\u0001\u0000\u0000\u0000\u027c\u027b\u0001\u0000\u0000\u0000\u027dQ\u0001\u0000\u0000\u0000\u027e\u0280\u0003$\u0012\u0000\u027f\u027e\u0001\u0000\u0000\u0000\u027f\u0280\u0001\u0000\u0000\u0000\u0280\u0281\u0001\u0000\u0000\u0000\u0281\u0282\u0003\u0100\u0080\u0000\u0282\u0283\u0003\u0118\u008c\u0000\u0283\u0287\u0003f3\u0000\u0284\u0286\u0003\u0104\u0082\u0000\u0285\u0284\u0001\u0000\u0000\u0000\u0286\u0289\u0001\u0000\u0000\u0000\u0287\u0285\u0001\u0000\u0000\u0000\u0287\u0288\u0001\u0000\u0000\u0000\u0288\u028b\u0001\u0000\u0000\u0000\u0289\u0287\u0001\u0000\u0000\u0000\u028a\u028c\u0003H$\u0000\u028b\u028a\u0001\u0000\u0000\u0000\u028b\u028c\u0001\u0000\u0000\u0000\u028c\u028d\u0001\u0000\u0000\u0000\u028d\u028e\u0003F#\u0000\u028eS\u0001\u0000\u0000\u0000\u028f\u0294\u0003V+\u0000\u0290\u0291\u0005J\u0000\u0000\u0291\u0293\u0003V+\u0000\u0292\u0290\u0001\u0000\u0000\u0000\u0293\u0296\u0001\u0000\u0000\u0000\u0294\u0292\u0001\u0000\u0000\u0000\u0294\u0295\u0001\u0000\u0000\u0000\u0295U\u0001\u0000\u0000\u0000\u0296\u0294\u0001\u0000\u0000\u0000\u0297\u029b\u0003\u0118\u008c\u0000\u0298\u029a\u0003\u0104\u0082\u0000\u0299\u0298\u0001\u0000\u0000\u0000\u029a\u029d\u0001\u0000\u0000\u0000\u029b\u0299\u0001\u0000\u0000\u0000\u029b\u029c\u0001\u0000\u0000\u0000\u029c\u02a0\u0001\u0000\u0000\u0000\u029d\u029b\u0001\u0000\u0000\u0000\u029e\u029f\u0005P\u0000\u0000\u029f\u02a1\u0003Z-\u0000\u02a0\u029e\u0001\u0000\u0000\u0000\u02a0\u02a1\u0001\u0000\u0000\u0000\u02a1W\u0001\u0000\u0000\u0000\u02a2\u02a9\u0005N\u0000\u0000\u02a3\u02a6\u0003n7\u0000\u02a4\u02a5\u0005;\u0000\u0000\u02a5\u02a7\u0005N\u0000\u0000\u02a6\u02a4\u0001\u0000\u0000\u0000\u02a6\u02a7\u0001\u0000\u0000\u0000\u02a7\u02a9\u0001\u0000\u0000\u0000\u02a8\u02a2\u0001\u0000\u0000\u0000\u02a8\u02a3\u0001\u0000\u0000\u0000\u02a9\u02ad\u0001\u0000\u0000\u0000\u02aa\u02ac\u0003\u0104\u0082\u0000\u02ab\u02aa\u0001\u0000\u0000\u0000\u02ac\u02af\u0001\u0000\u0000\u0000\u02ad\u02ab\u0001\u0000\u0000\u0000\u02ad\u02ae\u0001\u0000\u0000\u0000\u02aeY\u0001\u0000\u0000\u0000\u02af\u02ad\u0001\u0000\u0000\u0000\u02b0\u02b3\u0003\\.\u0000\u02b1\u02b3\u0003\u00d6k\u0000\u02b2\u02b0\u0001\u0000\u0000\u0000\u02b2\u02b1\u0001\u0000\u0000\u0000\u02b3[\u0001\u0000\u0000\u0000\u02b4\u02bd\u0005H\u0000\u0000\u02b5\u02ba\u0003Z-\u0000\u02b6\u02b7\u0005J\u0000\u0000\u02b7\u02b9\u0003Z-\u0000\u02b8\u02b6\u0001\u0000\u0000\u0000\u02b9\u02bc\u0001\u0000\u0000\u0000\u02ba\u02b8\u0001\u0000\u0000\u0000\u02ba\u02bb\u0001\u0000\u0000\u0000\u02bb\u02be\u0001\u0000\u0000\u0000\u02bc\u02ba\u0001\u0000\u0000\u0000\u02bd\u02b5\u0001\u0000\u0000\u0000\u02bd\u02be\u0001\u0000\u0000\u0000\u02be\u02c0\u0001\u0000\u0000\u0000\u02bf\u02c1\u0005J\u0000\u0000\u02c0\u02bf\u0001\u0000\u0000\u0000\u02c0\u02c1\u0001\u0000\u0000\u0000\u02c1\u02c2\u0001\u0000\u0000\u0000\u02c2\u02c3\u0005I\u0000\u0000\u02c3]\u0001\u0000\u0000\u0000\u02c4\u02c5\u0003z=\u0000\u02c5\u02c7\u0003\u0118\u008c\u0000\u02c6\u02c8\u0003\u0108\u0084\u0000\u02c7\u02c6\u0001\u0000\u0000\u0000\u02c7\u02c8\u0001\u0000\u0000\u0000\u02c8\u02cc\u0001\u0000\u0000\u0000\u02c9\u02cb\u0003`0\u0000\u02ca\u02c9\u0001\u0000\u0000\u0000\u02cb\u02ce\u0001\u0000\u0000\u0000\u02cc\u02ca\u0001\u0000\u0000\u0000\u02cc\u02cd\u0001\u0000\u0000\u0000\u02cd_\u0001\u0000\u0000\u0000\u02ce\u02cc\u0001\u0000\u0000\u0000\u02cf\u02d0\u0005;\u0000\u0000\u02d0\u02d1\u0003z=\u0000\u02d1\u02d3\u0003\u0118\u008c\u0000\u02d2\u02d4\u0003\u0108\u0084\u0000\u02d3\u02d2\u0001\u0000\u0000\u0000\u02d3\u02d4\u0001\u0000\u0000\u0000\u02d4a\u0001\u0000\u0000\u0000\u02d5\u02e0\u0003\u0100\u0080\u0000\u02d6\u02d7\u0003z=\u0000\u02d7\u02dd\u0005m\u0000\u0000\u02d8\u02db\u0005\u0012\u0000\u0000\u02d9\u02db\u0005O\u0000\u0000\u02da\u02d8\u0001\u0000\u0000\u0000\u02da\u02d9\u0001\u0000\u0000\u0000\u02db\u02dc\u0001\u0000\u0000\u0000\u02dc\u02de\u0003\u0100\u0080\u0000\u02dd\u02da\u0001\u0000\u0000\u0000\u02dd\u02de\u0001\u0000\u0000\u0000\u02de\u02e0\u0001\u0000\u0000\u0000\u02df\u02d5\u0001\u0000\u0000\u0000\u02df\u02d6\u0001\u0000\u0000\u0000\u02e0c\u0001\u0000\u0000\u0000\u02e1\u02e2\u0003z=\u0000\u02e2\u02e9\u0003n7\u0000\u02e3\u02e4\u0005J\u0000\u0000\u02e4\u02e5\u0003z=\u0000\u02e5\u02e6\u0003n7\u0000\u02e6\u02e8\u0001\u0000\u0000\u0000\u02e7\u02e3\u0001\u0000\u0000\u0000\u02e8\u02eb\u0001\u0000\u0000\u0000\u02e9\u02e7\u0001\u0000\u0000\u0000\u02e9\u02ea\u0001\u0000\u0000\u0000\u02eae\u0001\u0000\u0000\u0000\u02eb\u02e9\u0001\u0000\u0000\u0000\u02ec\u02ee\u0005L\u0000\u0000\u02ed\u02ef\u0003h4\u0000\u02ee\u02ed\u0001\u0000\u0000\u0000\u02ee\u02ef\u0001\u0000\u0000\u0000\u02ef\u02f0\u0001\u0000\u0000\u0000\u02f0\u02f1\u0005M\u0000\u0000\u02f1g\u0001\u0000\u0000\u0000\u02f2\u02f7\u0003j5\u0000\u02f3\u02f4\u0005J\u0000\u0000\u02f4\u02f6\u0003j5\u0000\u02f5\u02f3\u0001\u0000\u0000\u0000\u02f6\u02f9\u0001\u0000\u0000\u0000\u02f7\u02f5\u0001\u0000\u0000\u0000\u02f7\u02f8\u0001\u0000\u0000\u0000\u02f8\u02fc\u0001\u0000\u0000\u0000\u02f9\u02f7\u0001\u0000\u0000\u0000\u02fa\u02fb\u0005J\u0000\u0000\u02fb\u02fd\u0003l6\u0000\u02fc\u02fa\u0001\u0000\u0000\u0000\u02fc\u02fd\u0001\u0000\u0000\u0000\u02fd\u0300\u0001\u0000\u0000\u0000\u02fe\u0300\u0003l6\u0000\u02ff\u02f2\u0001\u0000\u0000\u0000\u02ff\u02fe\u0001\u0000\u0000\u0000\u0300i\u0001\u0000\u0000\u0000\u0301\u0303\u0003\f\u0006\u0000\u0302\u0301\u0001\u0000\u0000\u0000\u0303\u0306\u0001\u0000\u0000\u0000\u0304\u0302\u0001\u0000\u0000\u0000\u0304\u0305\u0001\u0000\u0000\u0000\u0305\u0307\u0001\u0000\u0000\u0000\u0306\u0304\u0001\u0000\u0000\u0000\u0307\u0308\u0003\u0100\u0080\u0000\u0308\u0309\u0003X,\u0000\u0309k\u0001\u0000\u0000\u0000\u030a\u030c\u0003\f\u0006\u0000\u030b\u030a\u0001\u0000\u0000\u0000\u030c\u030f\u0001\u0000\u0000\u0000\u030d\u030b\u0001\u0000\u0000\u0000\u030d\u030e\u0001\u0000\u0000\u0000\u030e\u0310\u0001\u0000\u0000\u0000\u030f\u030d\u0001\u0000\u0000\u0000\u0310\u0311\u0003\u0100\u0080\u0000\u0311\u0312\u0003z=\u0000\u0312\u0313\u0005\u00ab\u0000\u0000\u0313\u0314\u0003X,\u0000\u0314m\u0001\u0000\u0000\u0000\u0315\u0319\u0003\u0118\u008c\u0000\u0316\u0318\u0003p8\u0000\u0317\u0316\u0001\u0000\u0000\u0000\u0318\u031b\u0001\u0000\u0000\u0000\u0319\u0317\u0001\u0000\u0000\u0000\u0319\u031a\u0001\u0000\u0000\u0000\u031ao\u0001\u0000\u0000\u0000\u031b\u0319\u0001\u0000\u0000\u0000\u031c\u031d\u0005;\u0000\u0000\u031d\u031e\u0003z=\u0000\u031e\u031f\u0003\u0118\u008c\u0000\u031fq\u0001\u0000\u0000\u0000\u0320\u0329\u0003t:\u0000\u0321\u0329\u0003v;\u0000\u0322\u0329\u0003x<\u0000\u0323\u0329\u0005\u008a\u0000\u0000\u0324\u0329\u0005\u008b\u0000\u0000\u0325\u0329\u0005\u0085\u0000\u0000\u0326\u0329\u0005\u0086\u0000\u0000\u0327\u0329\u0005\u0087\u0000\u0000\u0328\u0320\u0001\u0000\u0000\u0000\u0328\u0321\u0001\u0000\u0000\u0000\u0328\u0322\u0001\u0000\u0000\u0000\u0328\u0323\u0001\u0000\u0000\u0000\u0328\u0324\u0001\u0000\u0000\u0000\u0328\u0325\u0001\u0000\u0000\u0000\u0328\u0326\u0001\u0000\u0000\u0000\u0328\u0327\u0001\u0000\u0000\u0000\u0329s\u0001\u0000\u0000\u0000\u032a\u032b\u0007\u0000\u0000\u0000\u032bu\u0001\u0000\u0000\u0000\u032c\u032d\u0007\u0001\u0000\u0000\u032dw\u0001\u0000\u0000\u0000\u032e\u032f\u0005\u00cc\u0000\u0000\u032f\u0330\u0005\u00cd\u0000\u0000\u0330\u0331\u0005\u00ce\u0000\u0000\u0331y\u0001\u0000\u0000\u0000\u0332\u0334\u0003|>\u0000\u0333\u0332\u0001\u0000\u0000\u0000\u0334\u0337\u0001\u0000\u0000\u0000\u0335\u0333\u0001\u0000\u0000\u0000\u0335\u0336\u0001\u0000\u0000\u0000\u0336{\u0001\u0000\u0000\u0000\u0337\u0335\u0001\u0000\u0000\u0000\u0338\u0339\u0005\u00aa\u0000\u0000\u0339\u0340\u0003n7\u0000\u033a\u033d\u0005L\u0000\u0000\u033b\u033e\u0003~?\u0000\u033c\u033e\u0003\u0082A\u0000\u033d\u033b\u0001\u0000\u0000\u0000\u033d\u033c\u0001\u0000\u0000\u0000\u033d\u033e\u0001\u0000\u0000\u0000\u033e\u033f\u0001\u0000\u0000\u0000\u033f\u0341\u0005M\u0000\u0000\u0340\u033a\u0001\u0000\u0000\u0000\u0340\u0341\u0001\u0000\u0000\u0000\u0341}\u0001\u0000\u0000\u0000\u0342\u0347\u0003\u0080@\u0000\u0343\u0344\u0005J\u0000\u0000\u0344\u0346\u0003\u0080@\u0000\u0345\u0343\u0001\u0000\u0000\u0000\u0346\u0349\u0001\u0000\u0000\u0000\u0347\u0345\u0001\u0000\u0000\u0000\u0347\u0348\u0001\u0000\u0000\u0000\u0348\u007f\u0001\u0000\u0000\u0000\u0349\u0347\u0001\u0000\u0000\u0000\u034a\u034b\u0003\u0118\u008c\u0000\u034b\u034c\u0005P\u0000\u0000\u034c\u034d\u0003\u0082A\u0000\u034d\u0081\u0001\u0000\u0000\u0000\u034e\u0352\u0003\u00d6k\u0000\u034f\u0352\u0003|>\u0000\u0350\u0352\u0003\u0084B\u0000\u0351\u034e\u0001\u0000\u0000\u0000\u0351\u034f\u0001\u0000\u0000\u0000\u0351\u0350\u0001\u0000\u0000\u0000\u0352\u0083\u0001\u0000\u0000\u0000\u0353\u035c\u0005H\u0000\u0000\u0354\u0359\u0003\u0082A\u0000\u0355\u0356\u0005J\u0000\u0000\u0356\u0358\u0003\u0082A\u0000\u0357\u0355\u0001\u0000\u0000\u0000\u0358\u035b\u0001\u0000\u0000\u0000\u0359\u0357\u0001\u0000\u0000\u0000\u0359\u035a\u0001\u0000\u0000\u0000\u035a\u035d\u0001\u0000\u0000\u0000\u035b\u0359\u0001\u0000\u0000\u0000\u035c\u0354\u0001\u0000\u0000\u0000\u035c\u035d\u0001\u0000\u0000\u0000\u035d\u035f\u0001\u0000\u0000\u0000\u035e\u0360\u0005J\u0000\u0000\u035f\u035e\u0001\u0000\u0000\u0000\u035f\u0360\u0001\u0000\u0000\u0000\u0360\u0361\u0001\u0000\u0000\u0000\u0361\u0362\u0005I\u0000\u0000\u0362\u0085\u0001\u0000\u0000\u0000\u0363\u0364\u0005\u00aa\u0000\u0000\u0364\u0365\u0005G\u0000\u0000\u0365\u0366\u0003\u0118\u008c\u0000\u0366\u0367\u0003\u0088D\u0000\u0367\u0087\u0001\u0000\u0000\u0000\u0368\u036c\u0005H\u0000\u0000\u0369\u036b\u0003\u008aE\u0000\u036a\u0369\u0001\u0000\u0000\u0000\u036b\u036e\u0001\u0000\u0000\u0000\u036c\u036a\u0001\u0000\u0000\u0000\u036c\u036d\u0001\u0000\u0000\u0000\u036d\u036f\u0001\u0000\u0000\u0000\u036e\u036c\u0001\u0000\u0000\u0000\u036f\u0370\u0005I\u0000\u0000\u0370\u0089\u0001\u0000\u0000\u0000\u0371\u0373\u0003\n\u0005\u0000\u0372\u0371\u0001\u0000\u0000\u0000\u0373\u0376\u0001\u0000\u0000\u0000\u0374\u0372\u0001\u0000\u0000\u0000\u0374\u0375\u0001\u0000\u0000\u0000\u0375\u0377\u0001\u0000\u0000\u0000\u0376\u0374\u0001\u0000\u0000\u0000\u0377\u037a\u0003\u008cF\u0000\u0378\u037a\u0005-\u0000\u0000\u0379\u0374\u0001\u0000\u0000\u0000\u0379\u0378\u0001\u0000\u0000\u0000\u037a\u008b\u0001\u0000\u0000\u0000\u037b\u037e\u0003\u0100\u0080\u0000\u037c\u037f\u0003\u008eG\u0000\u037d\u037f\u0003\u0090H\u0000\u037e\u037c\u0001\u0000\u0000\u0000\u037e\u037d\u0001\u0000\u0000\u0000\u037f\u0380\u0001\u0000\u0000\u0000\u0380\u0381\u0005-\u0000\u0000\u0381\u039a\u0001\u0000\u0000\u0000\u0382\u0383\u0003\u0100\u0080\u0000\u0383\u0384\u0005-\u0000\u0000\u0384\u039a\u0001\u0000\u0000\u0000\u0385\u0387\u0003\u000e\u0007\u0000\u0386\u0388\u0005-\u0000\u0000\u0387\u0386\u0001\u0000\u0000\u0000\u0387\u0388\u0001\u0000\u0000\u0000\u0388\u039a\u0001\u0000\u0000\u0000\u0389\u038b\u0003\u0010\b\u0000\u038a\u038c\u0005-\u0000\u0000\u038b\u038a\u0001\u0000\u0000\u0000\u038b\u038c\u0001\u0000\u0000\u0000\u038c\u039a\u0001\u0000\u0000\u0000\u038d\u038f\u00038\u001c\u0000\u038e\u0390\u0005-\u0000\u0000\u038f\u038e\u0001\u0000\u0000\u0000\u038f\u0390\u0001\u0000\u0000\u0000\u0390\u039a\u0001\u0000\u0000\u0000\u0391\u0393\u0003.\u0017\u0000\u0392\u0394\u0005-\u0000\u0000\u0393\u0392\u0001\u0000\u0000\u0000\u0393\u0394\u0001\u0000\u0000\u0000\u0394\u039a\u0001\u0000\u0000\u0000\u0395\u0397\u0003\u0086C\u0000\u0396\u0398\u0005-\u0000\u0000\u0397\u0396\u0001\u0000\u0000\u0000\u0397\u0398\u0001\u0000\u0000\u0000\u0398\u039a\u0001\u0000\u0000\u0000\u0399\u037b\u0001\u0000\u0000\u0000\u0399\u0382\u0001\u0000\u0000\u0000\u0399\u0385\u0001\u0000\u0000\u0000\u0399\u0389\u0001\u0000\u0000\u0000\u0399\u038d\u0001\u0000\u0000\u0000\u0399\u0391\u0001\u0000\u0000\u0000\u0399\u0395\u0001\u0000\u0000\u0000\u039a\u008d\u0001\u0000\u0000\u0000\u039b\u039c\u0003\u0118\u008c\u0000\u039c\u039d\u0005L\u0000\u0000\u039d\u03a1\u0005M\u0000\u0000\u039e\u03a0\u0003\u0104\u0082\u0000\u039f\u039e\u0001\u0000\u0000\u0000\u03a0\u03a3\u0001\u0000\u0000\u0000\u03a1\u039f\u0001\u0000\u0000\u0000\u03a1\u03a2\u0001\u0000\u0000\u0000\u03a2\u03a5\u0001\u0000\u0000\u0000\u03a3\u03a1\u0001\u0000\u0000\u0000\u03a4\u03a6\u0003\u0092I\u0000\u03a5\u03a4\u0001\u0000\u0000\u0000\u03a5\u03a6\u0001\u0000\u0000\u0000\u03a6\u008f\u0001\u0000\u0000\u0000\u03a7\u03a8\u0003T*\u0000\u03a8\u0091\u0001\u0000\u0000\u0000\u03a9\u03aa\u0005^\u0000\u0000\u03aa\u03ab\u0003\u0082A\u0000\u03ab\u0093\u0001\u0000\u0000\u0000\u03ac\u03ae\u0005H\u0000\u0000\u03ad\u03af\u0003\u0096K\u0000\u03ae\u03ad\u0001\u0000\u0000\u0000\u03ae\u03af\u0001\u0000\u0000\u0000\u03af\u03b3\u0001\u0000\u0000\u0000\u03b0\u03b2\u0003\u009aM\u0000\u03b1\u03b0\u0001\u0000\u0000\u0000\u03b2\u03b5\u0001\u0000\u0000\u0000\u03b3\u03b1\u0001\u0000\u0000\u0000\u03b3\u03b4\u0001\u0000\u0000\u0000\u03b4\u03b6\u0001\u0000\u0000\u0000\u03b5\u03b3\u0001\u0000\u0000\u0000\u03b6\u03b7\u0005I\u0000\u0000\u03b7\u0095\u0001\u0000\u0000\u0000\u03b8\u03ba\u0003\u0108\u0084\u0000\u03b9\u03b8\u0001\u0000\u0000\u0000\u03b9\u03ba\u0001\u0000\u0000\u0000\u03ba\u03bb\u0001\u0000\u0000\u0000\u03bb\u03bc\u0007\u0002\u0000\u0000\u03bc\u03bd\u0003\u010c\u0086\u0000\u03bd\u03be\u0005-\u0000\u0000\u03be\u03c9\u0001\u0000\u0000\u0000\u03bf\u03c0\u0003\u00d8l\u0000\u03c0\u03c2\u0005;\u0000\u0000\u03c1\u03c3\u0003\u0108\u0084\u0000\u03c2\u03c1\u0001\u0000\u0000\u0000\u03c2\u03c3\u0001\u0000\u0000\u0000\u03c3\u03c4\u0001\u0000\u0000\u0000\u03c4\u03c5\u0005O\u0000\u0000\u03c5\u03c6\u0003\u010c\u0086\u0000\u03c6\u03c7\u0005-\u0000\u0000\u03c7\u03c9\u0001\u0000\u0000\u0000\u03c8\u03b9\u0001\u0000\u0000\u0000\u03c8\u03bf\u0001\u0000\u0000\u0000\u03c9\u0097\u0001\u0000\u0000\u0000\u03ca\u03ce\u0005H\u0000\u0000\u03cb\u03cd\u0003\u009aM\u0000\u03cc\u03cb\u0001\u0000\u0000\u0000\u03cd\u03d0\u0001\u0000\u0000\u0000\u03ce\u03cc\u0001\u0000\u0000\u0000\u03ce\u03cf\u0001\u0000\u0000\u0000\u03cf\u03d1\u0001\u0000\u0000\u0000\u03d0\u03ce\u0001\u0000\u0000\u0000\u03d1\u03d2\u0005I\u0000\u0000\u03d2\u0099\u0001\u0000\u0000\u0000\u03d3\u03d4\u0004M\u0000\u0000\u03d4\u03d5\u0003\u009cN\u0000\u03d5\u03d6\u0005-\u0000\u0000\u03d6\u03da\u0001\u0000\u0000\u0000\u03d7\u03da\u0003\u00a0P\u0000\u03d8\u03da\u0003\u009eO\u0000\u03d9\u03d3\u0001\u0000\u0000\u0000\u03d9\u03d7\u0001\u0000\u0000\u0000\u03d9\u03d8\u0001\u0000\u0000\u0000\u03da\u009b\u0001\u0000\u0000\u0000\u03db\u03dd\u0003\n\u0005\u0000\u03dc\u03db\u0001\u0000\u0000\u0000\u03dd\u03e0\u0001\u0000\u0000\u0000\u03de\u03dc\u0001\u0000\u0000\u0000\u03de\u03df\u0001\u0000\u0000\u0000\u03df\u03e1\u0001\u0000\u0000\u0000\u03e0\u03de\u0001\u0000\u0000\u0000\u03e1\u03e2\u0003\u0100\u0080\u0000\u03e2\u03e3\u0003T*\u0000\u03e3\u009d\u0001\u0000\u0000\u0000\u03e4\u03e6\u0003\n\u0005\u0000\u03e5\u03e4\u0001\u0000\u0000\u0000\u03e6\u03e9\u0001\u0000\u0000\u0000\u03e7\u03e5\u0001\u0000\u0000\u0000\u03e7\u03e8\u0001\u0000\u0000\u0000\u03e8\u03ee\u0001\u0000\u0000\u0000\u03e9\u03e7\u0001\u0000\u0000\u0000\u03ea\u03ef\u0003\u000e\u0007\u0000\u03eb\u03ef\u0003.\u0017\u0000\u03ec\u03ef\u00038\u001c\u0000\u03ed\u03ef\u0003\u0010\b\u0000\u03ee\u03ea\u0001\u0000\u0000\u0000\u03ee\u03eb\u0001\u0000\u0000\u0000\u03ee\u03ec\u0001\u0000\u0000\u0000\u03ee\u03ed\u0001\u0000\u0000\u0000\u03ef\u03f2\u0001\u0000\u0000\u0000\u03f0\u03f2\u0005-\u0000\u0000\u03f1\u03e7\u0001\u0000\u0000\u0000\u03f1\u03f0\u0001\u0000\u0000\u0000\u03f2\u009f\u0001\u0000\u0000\u0000\u03f3\u044e\u0003\u0098L\u0000\u03f4\u03f5\u0005\u0097\u0000\u0000\u03f5\u03f8\u0003\u00d6k\u0000\u03f6\u03f7\u0005R\u0000\u0000\u03f7\u03f9\u0003\u00d6k\u0000\u03f8\u03f6\u0001\u0000\u0000\u0000\u03f8\u03f9\u0001\u0000\u0000\u0000\u03f9\u03fa\u0001\u0000\u0000\u0000\u03fa\u03fb\u0005-\u0000\u0000\u03fb\u044e\u0001\u0000\u0000\u0000\u03fc\u03fd\u0005S\u0000\u0000\u03fd\u03fe\u0003\u00d2i\u0000\u03fe\u0400\u0003\u00a0P\u0000\u03ff\u0401\u0003\u00aeW\u0000\u0400\u03ff\u0001\u0000\u0000\u0000\u0400\u0401\u0001\u0000\u0000\u0000\u0401\u044e\u0001\u0000\u0000\u0000\u0402\u0403\u0005[\u0000\u0000\u0403\u0404\u0003\u00ccf\u0000\u0404\u0405\u0003\u00a0P\u0000\u0405\u044e\u0001\u0000\u0000\u0000\u0406\u0407\u0005T\u0000\u0000\u0407\u0408\u0003\u00d2i\u0000\u0408\u0409\u0003\u00a0P\u0000\u0409\u044e\u0001\u0000\u0000\u0000\u040a\u040b\u0005U\u0000\u0000\u040b\u040c\u0003\u00a0P\u0000\u040c\u040d\u0005T\u0000\u0000\u040d\u040e\u0003\u00d2i\u0000\u040e\u040f\u0005-\u0000\u0000\u040f\u044e\u0001\u0000\u0000\u0000\u0410\u0411\u0005_\u0000\u0000\u0411\u041b\u0003\u0098L\u0000\u0412\u0414\u0003\u00b0X\u0000\u0413\u0412\u0001\u0000\u0000\u0000\u0414\u0415\u0001\u0000\u0000\u0000\u0415\u0413\u0001\u0000\u0000\u0000\u0415\u0416\u0001\u0000\u0000\u0000\u0416\u0418\u0001\u0000\u0000\u0000\u0417\u0419\u0003\u00b6[\u0000\u0418\u0417\u0001\u0000\u0000\u0000\u0418\u0419\u0001\u0000\u0000\u0000\u0419\u041c\u0001\u0000\u0000\u0000\u041a\u041c\u0003\u00b6[\u0000\u041b\u0413\u0001\u0000\u0000\u0000\u041b\u041a\u0001\u0000\u0000\u0000\u041c\u044e\u0001\u0000\u0000\u0000\u041d\u041e\u0005_\u0000\u0000\u041e\u041f\u0003\u00b8\\\u0000\u041f\u0423\u0003\u0098L\u0000\u0420\u0422\u0003\u00b0X\u0000\u0421\u0420\u0001\u0000\u0000\u0000\u0422\u0425\u0001\u0000\u0000\u0000\u0423\u0421\u0001\u0000\u0000\u0000\u0423\u0424\u0001\u0000\u0000\u0000\u0424\u0427\u0001\u0000\u0000\u0000\u0425\u0423\u0001\u0000\u0000\u0000\u0426\u0428\u0003\u00b6[\u0000\u0427\u0426\u0001\u0000\u0000\u0000\u0427\u0428\u0001\u0000\u0000\u0000\u0428\u044e\u0001\u0000\u0000\u0000\u0429\u042a\u0005\u00cf\u0000\u0000\u042a\u042b\u0003\u00d6k\u0000\u042b\u042c\u0005-\u0000\u0000\u042c\u044e\u0001\u0000\u0000\u0000\u042d\u044e\u0003\u00a2Q\u0000\u042e\u042f\u0005C\u0000\u0000\u042f\u0430\u0003\u00d2i\u0000\u0430\u0431\u0003\u0098L\u0000\u0431\u044e\u0001\u0000\u0000\u0000\u0432\u0434\u0005X\u0000\u0000\u0433\u0435\u0003\u00d6k\u0000\u0434\u0433\u0001\u0000\u0000\u0000\u0434\u0435\u0001\u0000\u0000\u0000\u0435\u0436\u0001\u0000\u0000\u0000\u0436\u044e\u0005-\u0000\u0000\u0437\u0438\u0005Z\u0000\u0000\u0438\u0439\u0003\u00d6k\u0000\u0439\u043a\u0005-\u0000\u0000\u043a\u044e\u0001\u0000\u0000\u0000\u043b\u043d\u0005V\u0000\u0000\u043c\u043e\u0003\u0118\u008c\u0000\u043d\u043c\u0001\u0000\u0000\u0000\u043d\u043e\u0001\u0000\u0000\u0000\u043e\u043f\u0001\u0000\u0000\u0000\u043f\u044e\u0005-\u0000\u0000\u0440\u0442\u0005W\u0000\u0000\u0441\u0443\u0003\u0118\u008c\u0000\u0442\u0441\u0001\u0000\u0000\u0000\u0442\u0443\u0001\u0000\u0000\u0000\u0443\u0444\u0001\u0000\u0000\u0000\u0444\u044e\u0005-\u0000\u0000\u0445\u044e\u0005-\u0000\u0000\u0446\u0447\u0003\u00d6k\u0000\u0447\u0448\u0005-\u0000\u0000\u0448\u044e\u0001\u0000\u0000\u0000\u0449\u044a\u0003\u0118\u008c\u0000\u044a\u044b\u0005R\u0000\u0000\u044b\u044c\u0003\u00a0P\u0000\u044c\u044e\u0001\u0000\u0000\u0000\u044d\u03f3\u0001\u0000\u0000\u0000\u044d\u03f4\u0001\u0000\u0000\u0000\u044d\u03fc\u0001\u0000\u0000\u0000\u044d\u0402\u0001\u0000\u0000\u0000\u044d\u0406\u0001\u0000\u0000\u0000\u044d\u040a\u0001\u0000\u0000\u0000\u044d\u0410\u0001\u0000\u0000\u0000\u044d\u041d\u0001\u0000\u0000\u0000\u044d\u0429\u0001\u0000\u0000\u0000\u044d\u042d\u0001\u0000\u0000\u0000\u044d\u042e\u0001\u0000\u0000\u0000\u044d\u0432\u0001\u0000\u0000\u0000\u044d\u0437\u0001\u0000\u0000\u0000\u044d\u043b\u0001\u0000\u0000\u0000\u044d\u0440\u0001\u0000\u0000\u0000\u044d\u0445\u0001\u0000\u0000\u0000\u044d\u0446\u0001\u0000\u0000\u0000\u044d\u0449\u0001\u0000\u0000\u0000\u044e\u00a1\u0001\u0000\u0000\u0000\u044f\u0450\u0005Y\u0000\u0000\u0450\u0451\u0003\u00d2i\u0000\u0451\u0452\u0005H\u0000\u0000\u0452\u0453\u0006Q\uffff\uffff\u0000\u0453\u0454\u0003\u00a4R\u0000\u0454\u0455\u0006Q\uffff\uffff\u0000\u0455\u0456\u0005I\u0000\u0000\u0456\u00a3\u0001\u0000\u0000\u0000\u0457\u0459\u0003\u00a6S\u0000\u0458\u0457\u0001\u0000\u0000\u0000\u0459\u045a\u0001\u0000\u0000\u0000\u045a\u0458\u0001\u0000\u0000\u0000\u045a\u045b\u0001\u0000\u0000\u0000\u045b\u0469\u0001\u0000\u0000\u0000\u045c\u045e\u0003\u00c4b\u0000\u045d\u045c\u0001\u0000\u0000\u0000\u045e\u0461\u0001\u0000\u0000\u0000\u045f\u045d\u0001\u0000\u0000\u0000\u045f\u0460\u0001\u0000\u0000\u0000\u0460\u0465\u0001\u0000\u0000\u0000\u0461\u045f\u0001\u0000\u0000\u0000\u0462\u0464\u0003\u00c6c\u0000\u0463\u0462\u0001\u0000\u0000\u0000\u0464\u0467\u0001\u0000\u0000\u0000\u0465\u0463\u0001\u0000\u0000\u0000\u0465\u0466\u0001\u0000\u0000\u0000\u0466\u0469\u0001\u0000\u0000\u0000\u0467\u0465\u0001\u0000\u0000\u0000\u0468\u0458\u0001\u0000\u0000\u0000\u0468\u045f\u0001\u0000\u0000\u0000\u0469\u00a5\u0001\u0000\u0000\u0000\u046a\u046e\u0003\u00a8T\u0000\u046b\u046e\u0003\u00aaU\u0000\u046c\u046e\u0003\u00acV\u0000\u046d\u046a\u0001\u0000\u0000\u0000\u046d\u046b\u0001\u0000\u0000\u0000\u046d\u046c\u0001\u0000\u0000\u0000\u046e\u00a7\u0001\u0000\u0000\u0000\u046f\u0470\u0003\u00c6c\u0000\u0470\u0471\u0005\u00b5\u0000\u0000\u0471\u0472\u0003\u00d6k\u0000\u0472\u0473\u0005-\u0000\u0000\u0473\u00a9\u0001\u0000\u0000\u0000\u0474\u0475\u0003\u00c6c\u0000\u0475\u0476\u0005\u00b5\u0000\u0000\u0476\u0477\u0003\u0098L\u0000\u0477\u00ab\u0001\u0000\u0000\u0000\u0478\u0479\u0003\u00c6c\u0000\u0479\u047a\u0005\u00b5\u0000\u0000\u047a\u047b\u0005Z\u0000\u0000\u047b\u047c\u0003\u00d6k\u0000\u047c\u047d\u0005-\u0000\u0000\u047d\u00ad\u0001\u0000\u0000\u0000\u047e\u047f\u0005\\\u0000\u0000\u047f\u0480\u0003\u00a0P\u0000\u0480\u00af\u0001\u0000\u0000\u0000\u0481\u0482\u0005`\u0000\u0000\u0482\u0483\u0005L\u0000\u0000\u0483\u0484\u0003\u00b2Y\u0000\u0484\u0485\u0005M\u0000\u0000\u0485\u0486\u0003\u0098L\u0000\u0486\u00b1\u0001\u0000\u0000\u0000\u0487\u0489\u0003\f\u0006\u0000\u0488\u0487\u0001\u0000\u0000\u0000\u0489\u048c\u0001\u0000\u0000\u0000\u048a\u0488\u0001\u0000\u0000\u0000\u048a\u048b\u0001\u0000\u0000\u0000\u048b\u048d\u0001\u0000\u0000\u0000\u048c\u048a\u0001\u0000\u0000\u0000\u048d\u048e\u0003\u00b4Z\u0000\u048e\u048f\u0003\u0118\u008c\u0000\u048f\u00b3\u0001\u0000\u0000\u0000\u0490\u0495\u0003^/\u0000\u0491\u0492\u0005p\u0000\u0000\u0492\u0494\u0003^/\u0000\u0493\u0491\u0001\u0000\u0000\u0000\u0494\u0497\u0001\u0000\u0000\u0000\u0495\u0493\u0001\u0000\u0000\u0000\u0495\u0496\u0001\u0000\u0000\u0000\u0496\u00b5\u0001\u0000\u0000\u0000\u0497\u0495\u0001\u0000\u0000\u0000\u0498\u0499\u0005a\u0000\u0000\u0499\u049a\u0003\u0098L\u0000\u049a\u00b7\u0001\u0000\u0000\u0000\u049b\u049c\u0005L\u0000\u0000\u049c\u049e\u0003\u00ba]\u0000\u049d\u049f\u0005-\u0000\u0000\u049e\u049d\u0001\u0000\u0000\u0000\u049e\u049f\u0001\u0000\u0000\u0000\u049f\u04a0\u0001\u0000\u0000\u0000\u04a0\u04a1\u0005M\u0000\u0000\u04a1\u00b9\u0001\u0000\u0000\u0000\u04a2\u04a7\u0003\u00bc^\u0000\u04a3\u04a4\u0005-\u0000\u0000\u04a4\u04a6\u0003\u00bc^\u0000\u04a5\u04a3\u0001\u0000\u0000\u0000\u04a6\u04a9\u0001\u0000\u0000\u0000\u04a7\u04a5\u0001\u0000\u0000\u0000\u04a7\u04a8\u0001\u0000\u0000\u0000\u04a8\u00bb\u0001\u0000\u0000\u0000\u04a9\u04a7\u0001\u0000\u0000\u0000\u04aa\u04ad\u0003\u00be_\u0000\u04ab\u04ad\u0003\u00c0`\u0000\u04ac\u04aa\u0001\u0000\u0000\u0000\u04ac\u04ab\u0001\u0000\u0000\u0000\u04ad\u00bd\u0001\u0000\u0000\u0000\u04ae\u04b0\u0003\f\u0006\u0000\u04af\u04ae\u0001\u0000\u0000\u0000\u04b0\u04b3\u0001\u0000\u0000\u0000\u04b1\u04af\u0001\u0000\u0000\u0000\u04b1\u04b2\u0001\u0000\u0000\u0000\u04b2\u04b4\u0001\u0000\u0000\u0000\u04b3\u04b1\u0001\u0000\u0000\u0000\u04b4\u04b5\u0003^/\u0000\u04b5\u04b6\u0003X,\u0000\u04b6\u04b7\u0005P\u0000\u0000\u04b7\u04b8\u0003\u00d6k\u0000\u04b8\u00bf\u0001\u0000\u0000\u0000\u04b9\u04bb\u0003\u00c2a\u0000\u04ba\u04b9\u0001\u0000\u0000\u0000\u04bb\u04be\u0001\u0000\u0000\u0000\u04bc\u04ba\u0001\u0000\u0000\u0000\u04bc\u04bd\u0001\u0000\u0000\u0000\u04bd\u04c1\u0001\u0000\u0000\u0000\u04be\u04bc\u0001\u0000\u0000\u0000\u04bf\u04c2\u0003\u0118\u008c\u0000\u04c0\u04c2\u0005N\u0000\u0000\u04c1\u04bf\u0001\u0000\u0000\u0000\u04c1\u04c0\u0001\u0000\u0000\u0000\u04c2\u00c1\u0001\u0000\u0000\u0000\u04c3\u04c4\u0003\u00d8l\u0000\u04c4\u04c5\u0005;\u0000\u0000\u04c5\u00c3\u0001\u0000\u0000\u0000\u04c6\u04c8\u0003\u00c6c\u0000\u04c7\u04c6\u0001\u0000\u0000\u0000\u04c8\u04c9\u0001\u0000\u0000\u0000\u04c9\u04c7\u0001\u0000\u0000\u0000\u04c9\u04ca\u0001\u0000\u0000\u0000\u04ca\u04cc\u0001\u0000\u0000\u0000\u04cb\u04cd\u0003\u009aM\u0000\u04cc\u04cb\u0001\u0000\u0000\u0000\u04cd\u04ce\u0001\u0000\u0000\u0000\u04ce\u04cc\u0001\u0000\u0000\u0000\u04ce\u04cf\u0001\u0000\u0000\u0000\u04cf\u00c5\u0001\u0000\u0000\u0000\u04d0\u04d1\u0005]\u0000\u0000\u04d1\u04d3\u0003\u00c8d\u0000\u04d2\u04d4\u0005R\u0000\u0000\u04d3\u04d2\u0001\u0000\u0000\u0000\u04d3\u04d4\u0001\u0000\u0000\u0000\u04d4\u04da\u0001\u0000\u0000\u0000\u04d5\u04d7\u0005^\u0000\u0000\u04d6\u04d8\u0005R\u0000\u0000\u04d7\u04d6\u0001\u0000\u0000\u0000\u04d7\u04d8\u0001\u0000\u0000\u0000\u04d8\u04da\u0001\u0000\u0000\u0000\u04d9\u04d0\u0001\u0000\u0000\u0000\u04d9\u04d5\u0001\u0000\u0000\u0000\u04da\u00c7\u0001\u0000\u0000\u0000\u04db\u04e0\u0003\u00cae\u0000\u04dc\u04dd\u0005J\u0000\u0000\u04dd\u04df\u0003\u00cae\u0000\u04de\u04dc\u0001\u0000\u0000\u0000\u04df\u04e2\u0001\u0000\u0000\u0000\u04e0\u04de\u0001\u0000\u0000\u0000\u04e0\u04e1\u0001\u0000\u0000\u0000\u04e1\u00c9\u0001\u0000\u0000\u0000\u04e2\u04e0\u0001\u0000\u0000\u0000\u04e3\u04e7\u0003\u010e\u0087\u0000\u04e4\u04e7\u0003\u00d6k\u0000\u04e5\u04e7\u0005^\u0000\u0000\u04e6\u04e3\u0001\u0000\u0000\u0000\u04e6\u04e4\u0001\u0000\u0000\u0000\u04e6\u04e5\u0001\u0000\u0000\u0000\u04e7\u00cb\u0001\u0000\u0000\u0000\u04e8\u04e9\u0005L\u0000\u0000\u04e9\u04ea\u0003\u00d0h\u0000\u04ea\u04eb\u0005M\u0000\u0000\u04eb\u04fa\u0001\u0000\u0000\u0000\u04ec\u04ee\u0005L\u0000\u0000\u04ed\u04ef\u0003\u00ceg\u0000\u04ee\u04ed\u0001\u0000\u0000\u0000\u04ee\u04ef\u0001\u0000\u0000\u0000\u04ef\u04f0\u0001\u0000\u0000\u0000\u04f0\u04f2\u0005-\u0000\u0000\u04f1\u04f3\u0003\u00d6k\u0000\u04f2\u04f1\u0001\u0000\u0000\u0000\u04f2\u04f3\u0001\u0000\u0000\u0000\u04f3\u04f4\u0001\u0000\u0000\u0000\u04f4\u04f6\u0005-\u0000\u0000\u04f5\u04f7\u0003\u00d4j\u0000\u04f6\u04f5\u0001\u0000\u0000\u0000\u04f6\u04f7\u0001\u0000\u0000\u0000\u04f7\u04f8\u0001\u0000\u0000\u0000\u04f8\u04fa\u0005M\u0000\u0000\u04f9\u04e8\u0001\u0000\u0000\u0000\u04f9\u04ec\u0001\u0000\u0000\u0000\u04fa\u00cd\u0001\u0000\u0000\u0000\u04fb\u04fe\u0003\u009cN\u0000\u04fc\u04fe\u0003\u00d4j\u0000\u04fd\u04fb\u0001\u0000\u0000\u0000\u04fd\u04fc\u0001\u0000\u0000\u0000\u04fe\u00cf\u0001\u0000\u0000\u0000\u04ff\u0501\u0003\f\u0006\u0000\u0500\u04ff\u0001\u0000\u0000\u0000\u0501\u0504\u0001\u0000\u0000\u0000\u0502\u0500\u0001\u0000\u0000\u0000\u0502\u0503\u0001\u0000\u0000\u0000\u0503\u0505\u0001\u0000\u0000\u0000\u0504\u0502\u0001\u0000\u0000\u0000\u0505\u0506\u0003\u0100\u0080\u0000\u0506\u0507\u0003X,\u0000\u0507\u0508\u0005R\u0000\u0000\u0508\u0509\u0003\u00d6k\u0000\u0509\u00d1\u0001\u0000\u0000\u0000\u050a\u050b\u0005L\u0000\u0000\u050b\u050c\u0003\u00d6k\u0000\u050c\u050d\u0005M\u0000\u0000\u050d\u00d3\u0001\u0000\u0000\u0000\u050e\u0513\u0003\u00d6k\u0000\u050f\u0510\u0005J\u0000\u0000\u0510\u0512\u0003\u00d6k\u0000\u0511\u050f\u0001\u0000\u0000\u0000\u0512\u0515\u0001\u0000\u0000\u0000\u0513\u0511\u0001\u0000\u0000\u0000\u0513\u0514\u0001\u0000\u0000\u0000\u0514\u00d5\u0001\u0000\u0000\u0000\u0515\u0513\u0001\u0000\u0000\u0000\u0516\u0517\u0003\u00d8l\u0000\u0517\u00d7\u0001\u0000\u0000\u0000\u0518\u0519\u0006l\uffff\uffff\u0000\u0519\u053e\u0003\u00e4r\u0000\u051a\u051b\u0003\u0118\u008c\u0000\u051b\u051d\u0005L\u0000\u0000\u051c\u051e\u0003\u00d4j\u0000\u051d\u051c\u0001\u0000\u0000\u0000\u051d\u051e\u0001\u0000\u0000\u0000\u051e\u051f\u0001\u0000\u0000\u0000\u051f\u0520\u0005M\u0000\u0000\u0520\u053e\u0001\u0000\u0000\u0000\u0521\u0522\u0005\u0088\u0000\u0000\u0522\u053e\u0003\u00e8t\u0000\u0523\u0524\u0007\u0003\u0000\u0000\u0524\u053e\u0003\u00d8l\u0014\u0525\u0526\u0007\u0004\u0000\u0000\u0526\u053e\u0003\u00d8l\u0013\u0527\u0528\u0003\u0100\u0080\u0000\u0528\u052a\u0005\u00b3\u0000\u0000\u0529\u052b\u0003\u0108\u0084\u0000\u052a\u0529\u0001\u0000\u0000\u0000\u052a\u052b\u0001\u0000\u0000\u0000\u052b\u052e\u0001\u0000\u0000\u0000\u052c\u052f\u0003\u0118\u008c\u0000\u052d\u052f\u0005\u0088\u0000\u0000\u052e\u052c\u0001\u0000\u0000\u0000\u052e\u052d\u0001\u0000\u0000\u0000\u052f\u053e\u0001\u0000\u0000\u0000\u0530\u0531\u0003\u00e6s\u0000\u0531\u0533\u0005\u00b3\u0000\u0000\u0532\u0534\u0003\u0108\u0084\u0000\u0533\u0532\u0001\u0000\u0000\u0000\u0533\u0534\u0001\u0000\u0000\u0000\u0534\u0535\u0001\u0000\u0000\u0000\u0535\u0536\u0005\u0088\u0000\u0000\u0536\u053e\u0001\u0000\u0000\u0000\u0537\u0538\u0005L\u0000\u0000\u0538\u0539\u0003\u00dam\u0000\u0539\u053a\u0005M\u0000\u0000\u053a\u053b\u0003\u00d8l\u000f\u053b\u053e\u0001\u0000\u0000\u0000\u053c\u053e\u0003\u00dcn\u0000\u053d\u0518\u0001\u0000\u0000\u0000\u053d\u051a\u0001\u0000\u0000\u0000\u053d\u0521\u0001\u0000\u0000\u0000\u053d\u0523\u0001\u0000\u0000\u0000\u053d\u0525\u0001\u0000\u0000\u0000\u053d\u0527\u0001\u0000\u0000\u0000\u053d\u0530\u0001\u0000\u0000\u0000\u053d\u0537\u0001\u0000\u0000\u0000\u053d\u053c\u0001\u0000\u0000\u0000\u053e\u05af\u0001\u0000\u0000\u0000\u053f\u0540\n\u000e\u0000\u0000\u0540\u0541\u0007\u0005\u0000\u0000\u0541\u05ae\u0003\u00d8l\u000f\u0542\u0543\n\r\u0000\u0000\u0543\u0544\u0007\u0006\u0000\u0000\u0544\u05ae\u0003\u00d8l\u000e\u0545\u054d\n\f\u0000\u0000\u0546\u0547\u0005u\u0000\u0000\u0547\u054e\u0005u\u0000\u0000\u0548\u0549\u0005v\u0000\u0000\u0549\u054a\u0005v\u0000\u0000\u054a\u054e\u0005v\u0000\u0000\u054b\u054c\u0005v\u0000\u0000\u054c\u054e\u0005v\u0000\u0000\u054d\u0546\u0001\u0000\u0000\u0000\u054d\u0548\u0001\u0000\u0000\u0000\u054d\u054b\u0001\u0000\u0000\u0000\u054e\u054f\u0001\u0000\u0000\u0000\u054f\u05ae\u0003\u00d8l\r\u0550\u0551\n\n\u0000\u0000\u0551\u0552\u0007\u0007\u0000\u0000\u0552\u05ae\u0003\u00d8l\u000b\u0553\u0554\n\t\u0000\u0000\u0554\u0555\u0007\b\u0000\u0000\u0555\u05ae\u0003\u00d8l\n\u0556\u0557\n\b\u0000\u0000\u0557\u0558\u0005r\u0000\u0000\u0558\u05ae\u0003\u00d8l\t\u0559\u055a\n\u0007\u0000\u0000\u055a\u055b\u0005q\u0000\u0000\u055b\u05ae\u0003\u00d8l\b\u055c\u055d\n\u0006\u0000\u0000\u055d\u055e\u0005p\u0000\u0000\u055e\u05ae\u0003\u00d8l\u0007\u055f\u0560\n\u0005\u0000\u0000\u0560\u0561\u0005o\u0000\u0000\u0561\u05ae\u0003\u00d8l\u0006\u0562\u0563\n\u0004\u0000\u0000\u0563\u0564\u0005n\u0000\u0000\u0564\u05ae\u0003\u00d8l\u0005\u0565\u0566\n\u0003\u0000\u0000\u0566\u0567\u0005m\u0000\u0000\u0567\u0568\u0003\u00d8l\u0000\u0568\u0569\u0005R\u0000\u0000\u0569\u056a\u0003\u00d8l\u0003\u056a\u05ae\u0001\u0000\u0000\u0000\u056b\u056c\n\u0002\u0000\u0000\u056c\u056d\u0007\t\u0000\u0000\u056d\u05ae\u0003\u00d8l\u0002\u056e\u056f\n\u001e\u0000\u0000\u056f\u0570\u0005;\u0000\u0000\u0570\u05ae\u0003\u0118\u008c\u0000\u0571\u0572\n\u001d\u0000\u0000\u0572\u0573\u0005;\u0000\u0000\u0573\u0574\u0003\u0118\u008c\u0000\u0574\u0576\u0005L\u0000\u0000\u0575\u0577\u0003\u00d4j\u0000\u0576\u0575\u0001\u0000\u0000\u0000\u0576\u0577\u0001\u0000\u0000\u0000\u0577\u0578\u0001\u0000\u0000\u0000\u0578\u0579\u0005M\u0000\u0000\u0579\u05ae\u0001\u0000\u0000\u0000\u057a\u057b\n\u001c\u0000\u0000\u057b\u057c\u0005;\u0000\u0000\u057c\u05ae\u0005N\u0000\u0000\u057d\u057e\n\u001b\u0000\u0000\u057e\u057f\u0005;\u0000\u0000\u057f\u0581\u0005\u0088\u0000\u0000\u0580\u0582\u0003\u00fa}\u0000\u0581\u0580\u0001\u0000\u0000\u0000\u0581\u0582\u0001\u0000\u0000\u0000\u0582\u0583\u0001\u0000\u0000\u0000\u0583\u05ae\u0003\u00eew\u0000\u0584\u0585\n\u001a\u0000\u0000\u0585\u0587\u0005;\u0000\u0000\u0586\u0588\u0003\u00fa}\u0000\u0587\u0586\u0001\u0000\u0000\u0000\u0587\u0588\u0001\u0000\u0000\u0000\u0588\u0589\u0001\u0000\u0000\u0000\u0589\u058b\u0005O\u0000\u0000\u058a\u058c\u0003\u010a\u0085\u0000\u058b\u058a\u0001\u0000\u0000\u0000\u058b\u058c\u0001\u0000\u0000\u0000\u058c\u05ae\u0001\u0000\u0000\u0000\u058d\u058e\n\u0019\u0000\u0000\u058e\u058f\u0005;\u0000\u0000\u058f\u0590\u0003\u00fa}\u0000\u0590\u0591\u0003\u0118\u008c\u0000\u0591\u0593\u0005L\u0000\u0000\u0592\u0594\u0003\u00d4j\u0000\u0593\u0592\u0001\u0000\u0000\u0000\u0593\u0594\u0001\u0000\u0000\u0000\u0594\u0595\u0001\u0000\u0000\u0000\u0595\u0596\u0005M\u0000\u0000\u0596\u05ae\u0001\u0000\u0000\u0000\u0597\u0598\n\u0018\u0000\u0000\u0598\u0599\u0005/\u0000\u0000\u0599\u059a\u0003\u00d8l\u0000\u059a\u059b\u00050\u0000\u0000\u059b\u05ae\u0001\u0000\u0000\u0000\u059c\u059d\n\u0015\u0000\u0000\u059d\u05ae\u0007\n\u0000\u0000\u059e\u059f\n\u0012\u0000\u0000\u059f\u05a1\u0005\u00b3\u0000\u0000\u05a0\u05a2\u0003\u0108\u0084\u0000\u05a1\u05a0\u0001\u0000\u0000\u0000\u05a1\u05a2\u0001\u0000\u0000\u0000\u05a2\u05a5\u0001\u0000\u0000\u0000\u05a3\u05a6\u0003\u0118\u008c\u0000\u05a4\u05a6\u0005\u0088\u0000\u0000\u05a5\u05a3\u0001\u0000\u0000\u0000\u05a5\u05a4\u0001\u0000\u0000\u0000\u05a6\u05ae\u0001\u0000\u0000\u0000\u05a7\u05a8\n\u000b\u0000\u0000\u05a8\u05ab\u0005y\u0000\u0000\u05a9\u05ac\u0003\u0112\u0089\u0000\u05aa\u05ac\u0003\u0100\u0080\u0000\u05ab\u05a9\u0001\u0000\u0000\u0000\u05ab\u05aa\u0001\u0000\u0000\u0000\u05ac\u05ae\u0001\u0000\u0000\u0000\u05ad\u053f\u0001\u0000\u0000\u0000\u05ad\u0542\u0001\u0000\u0000\u0000\u05ad\u0545\u0001\u0000\u0000\u0000\u05ad\u0550\u0001\u0000\u0000\u0000\u05ad\u0553\u0001\u0000\u0000\u0000\u05ad\u0556\u0001\u0000\u0000\u0000\u05ad\u0559\u0001\u0000\u0000\u0000\u05ad\u055c\u0001\u0000\u0000\u0000\u05ad\u055f\u0001\u0000\u0000\u0000\u05ad\u0562\u0001\u0000\u0000\u0000\u05ad\u0565\u0001\u0000\u0000\u0000\u05ad\u056b\u0001\u0000\u0000\u0000\u05ad\u056e\u0001\u0000\u0000\u0000\u05ad\u0571\u0001\u0000\u0000\u0000\u05ad\u057a\u0001\u0000\u0000\u0000\u05ad\u057d\u0001\u0000\u0000\u0000\u05ad\u0584\u0001\u0000\u0000\u0000\u05ad\u058d\u0001\u0000\u0000\u0000\u05ad\u0597\u0001\u0000\u0000\u0000\u05ad\u059c\u0001\u0000\u0000\u0000\u05ad\u059e\u0001\u0000\u0000\u0000\u05ad\u05a7\u0001\u0000\u0000\u0000\u05ae\u05b1\u0001\u0000\u0000\u0000\u05af\u05ad\u0001\u0000\u0000\u0000\u05af\u05b0\u0001\u0000\u0000\u0000\u05b0\u00d9\u0001\u0000\u0000\u0000\u05b1\u05af\u0001\u0000\u0000\u0000\u05b2\u05b7\u0003\u0100\u0080\u0000\u05b3\u05b4\u0005r\u0000\u0000\u05b4\u05b6\u0003\u0100\u0080\u0000\u05b5\u05b3\u0001\u0000\u0000\u0000\u05b6\u05b9\u0001\u0000\u0000\u0000\u05b7\u05b5\u0001\u0000\u0000\u0000\u05b7\u05b8\u0001\u0000\u0000\u0000\u05b8\u00db\u0001\u0000\u0000\u0000\u05b9\u05b7\u0001\u0000\u0000\u0000\u05ba\u05bb\u0003\u00deo\u0000\u05bb\u05bc\u0005\u00b5\u0000\u0000\u05bc\u05bd\u0003\u00e2q\u0000\u05bd\u00dd\u0001\u0000\u0000\u0000\u05be\u05c9\u0003\u0118\u008c\u0000\u05bf\u05c1\u0005L\u0000\u0000\u05c0\u05c2\u0003h4\u0000\u05c1\u05c0\u0001\u0000\u0000\u0000\u05c1\u05c2\u0001\u0000\u0000\u0000\u05c2\u05c3\u0001\u0000\u0000\u0000\u05c3\u05c9\u0005M\u0000\u0000\u05c4\u05c5\u0005L\u0000\u0000\u05c5\u05c6\u0003\u00e0p\u0000\u05c6\u05c7\u0005M\u0000\u0000\u05c7\u05c9\u0001\u0000\u0000\u0000\u05c8\u05be\u0001\u0000\u0000\u0000\u05c8\u05bf\u0001\u0000\u0000\u0000\u05c8\u05c4\u0001\u0000\u0000\u0000\u05c9\u00df\u0001\u0000\u0000\u0000\u05ca\u05cf\u0003\u0118\u008c\u0000\u05cb\u05cc\u0005J\u0000\u0000\u05cc\u05ce\u0003\u0118\u008c\u0000\u05cd\u05cb\u0001\u0000\u0000\u0000\u05ce\u05d1\u0001\u0000\u0000\u0000\u05cf\u05cd\u0001\u0000\u0000\u0000\u05cf\u05d0\u0001\u0000\u0000\u0000\u05d0\u00e1\u0001\u0000\u0000\u0000\u05d1\u05cf\u0001\u0000\u0000\u0000\u05d2\u05d5\u0003\u00d6k\u0000\u05d3\u05d5\u0003\u0098L\u0000\u05d4\u05d2\u0001\u0000\u0000\u0000\u05d4\u05d3\u0001\u0000\u0000\u0000\u05d5\u00e3\u0001\u0000\u0000\u0000\u05d6\u05f4\u0003\u00a2Q\u0000\u05d7\u05d8\u0005L\u0000\u0000\u05d8\u05d9\u0003\u00d8l\u0000\u05d9\u05da\u0005M\u0000\u0000\u05da\u05f4\u0001\u0000\u0000\u0000\u05db\u05f4\u0005N\u0000\u0000\u05dc\u05f4\u0005O\u0000\u0000\u05dd\u05f4\u0003r9\u0000\u05de\u05f4\u0003\u0118\u008c\u0000\u05df\u05e3\u0003^/\u0000\u05e0\u05e2\u0003\u0104\u0082\u0000\u05e1\u05e0\u0001\u0000\u0000\u0000\u05e2\u05e5\u0001\u0000\u0000\u0000\u05e3\u05e1\u0001\u0000\u0000\u0000\u05e3\u05e4\u0001\u0000\u0000\u0000\u05e4\u05e6\u0001\u0000\u0000\u0000\u05e5\u05e3\u0001\u0000\u0000\u0000\u05e6\u05e7\u0005;\u0000\u0000\u05e7\u05e8\u0005E\u0000\u0000\u05e8\u05f4\u0001\u0000\u0000\u0000\u05e9\u05ed\u0003\u0106\u0083\u0000\u05ea\u05ec\u0003\u0104\u0082\u0000\u05eb\u05ea\u0001\u0000\u0000\u0000\u05ec\u05ef\u0001\u0000\u0000\u0000\u05ed\u05eb\u0001\u0000\u0000\u0000\u05ed\u05ee\u0001\u0000\u0000\u0000\u05ee\u05f0\u0001\u0000\u0000\u0000\u05ef\u05ed\u0001\u0000\u0000\u0000\u05f0\u05f1\u0005;\u0000\u0000\u05f1\u05f2\u0005E\u0000\u0000\u05f2\u05f4\u0001\u0000\u0000\u0000\u05f3\u05d6\u0001\u0000\u0000\u0000\u05f3\u05d7\u0001\u0000\u0000\u0000\u05f3\u05db\u0001\u0000\u0000\u0000\u05f3\u05dc\u0001\u0000\u0000\u0000\u05f3\u05dd\u0001\u0000\u0000\u0000\u05f3\u05de\u0001\u0000\u0000\u0000\u05f3\u05df\u0001\u0000\u0000\u0000\u05f3\u05e9\u0001\u0000\u0000\u0000\u05f4\u00e5\u0001\u0000\u0000\u0000\u05f5\u05f6\u0003^/\u0000\u05f6\u05f7\u0005;\u0000\u0000\u05f7\u05f9\u0001\u0000\u0000\u0000\u05f8\u05f5\u0001\u0000\u0000\u0000\u05f8\u05f9\u0001\u0000\u0000\u0000\u05f9\u05fa\u0001\u0000\u0000\u0000\u05fa\u05fb\u0003z=\u0000\u05fb\u05fd\u0003\u0118\u008c\u0000\u05fc\u05fe\u0003\u0108\u0084\u0000\u05fd\u05fc\u0001\u0000\u0000\u0000\u05fd\u05fe\u0001\u0000\u0000\u0000\u05fe\u00e7\u0001\u0000\u0000\u0000\u05ff\u0600\u0003\u00fa}\u0000\u0600\u0601\u0003\u00eau\u0000\u0601\u0602\u0003\u00f4z\u0000\u0602\u060c\u0001\u0000\u0000\u0000\u0603\u0604\u0003z=\u0000\u0604\u0609\u0003\u00eau\u0000\u0605\u0606\u0003z=\u0000\u0606\u0607\u0003\u00f0x\u0000\u0607\u060a\u0001\u0000\u0000\u0000\u0608\u060a\u0003\u00f4z\u0000\u0609\u0605\u0001\u0000\u0000\u0000\u0609\u0608\u0001\u0000\u0000\u0000\u060a\u060c\u0001\u0000\u0000\u0000\u060b\u05ff\u0001\u0000\u0000\u0000\u060b\u0603\u0001\u0000\u0000\u0000\u060c\u00e9\u0001\u0000\u0000\u0000\u060d\u060e\u0003z=\u0000\u060e\u0610\u0003\u0118\u008c\u0000\u060f\u0611\u0003\u00f6{\u0000\u0610\u060f\u0001\u0000\u0000\u0000\u0610\u0611\u0001\u0000\u0000\u0000\u0611\u0615\u0001\u0000\u0000\u0000\u0612\u0614\u0003\u00ecv\u0000\u0613\u0612\u0001\u0000\u0000\u0000\u0614\u0617\u0001\u0000\u0000\u0000\u0615\u0613\u0001\u0000\u0000\u0000\u0615\u0616\u0001\u0000\u0000\u0000\u0616\u061a\u0001\u0000\u0000\u0000\u0617\u0615\u0001\u0000\u0000\u0000\u0618\u061a\u0003\u0106\u0083\u0000\u0619\u060d\u0001\u0000\u0000\u0000\u0619\u0618\u0001\u0000\u0000\u0000\u061a\u00eb\u0001\u0000\u0000\u0000\u061b\u061c\u0005;\u0000\u0000\u061c\u061d\u0003z=\u0000\u061d\u061f\u0003\u0118\u008c\u0000\u061e\u0620\u0003\u00f6{\u0000\u061f\u061e\u0001\u0000\u0000\u0000\u061f\u0620\u0001\u0000\u0000\u0000\u0620\u00ed\u0001\u0000\u0000\u0000\u0621\u0622\u0003z=\u0000\u0622\u0624\u0003\u0118\u008c\u0000\u0623\u0625\u0003\u00f8|\u0000\u0624\u0623\u0001\u0000\u0000\u0000\u0624\u0625\u0001\u0000\u0000\u0000\u0625\u0626\u0001\u0000\u0000\u0000\u0626\u0627\u0003\u00f4z\u0000\u0627\u00ef\u0001\u0000\u0000\u0000\u0628\u063f\u0005/\u0000\u0000\u0629\u062d\u00050\u0000\u0000\u062a\u062c\u0003\u0104\u0082\u0000\u062b\u062a\u0001\u0000\u0000\u0000\u062c\u062f\u0001\u0000\u0000\u0000\u062d\u062b\u0001\u0000\u0000\u0000\u062d\u062e\u0001\u0000\u0000\u0000\u062e\u0630\u0001\u0000\u0000\u0000\u062f\u062d\u0001\u0000\u0000\u0000\u0630\u0640\u0003\\.\u0000\u0631\u0632\u0003\u00d6k\u0000\u0632\u0636\u00050\u0000\u0000\u0633\u0635\u0003\u00f2y\u0000\u0634\u0633\u0001\u0000\u0000\u0000\u0635\u0638\u0001\u0000\u0000\u0000\u0636\u0634\u0001\u0000\u0000\u0000\u0636\u0637\u0001\u0000\u0000\u0000\u0637\u063c\u0001\u0000\u0000\u0000\u0638\u0636\u0001\u0000\u0000\u0000\u0639\u063b\u0003\u0104\u0082\u0000\u063a\u0639\u0001\u0000\u0000\u0000\u063b\u063e\u0001\u0000\u0000\u0000\u063c\u063a\u0001\u0000\u0000\u0000\u063c\u063d\u0001\u0000\u0000\u0000\u063d\u0640\u0001\u0000\u0000\u0000\u063e\u063c\u0001\u0000\u0000\u0000\u063f\u0629\u0001\u0000\u0000\u0000\u063f\u0631\u0001\u0000\u0000\u0000\u0640\u00f1\u0001\u0000\u0000\u0000\u0641\u0642\u0003z=\u0000\u0642\u0643\u0005/\u0000\u0000\u0643\u0644\u0003\u00d6k\u0000\u0644\u0645\u00050\u0000\u0000\u0645\u00f3\u0001\u0000\u0000\u0000\u0646\u0648\u0003\u010c\u0086\u0000\u0647\u0649\u0003<\u001e\u0000\u0648\u0647\u0001\u0000\u0000\u0000\u0648\u0649\u0001\u0000\u0000\u0000\u0649\u00f5\u0001\u0000\u0000\u0000\u064a\u064b\u0005u\u0000\u0000\u064b\u064e\u0005v\u0000\u0000\u064c\u064e\u0003\u0108\u0084\u0000\u064d\u064a\u0001\u0000\u0000\u0000\u064d\u064c\u0001\u0000\u0000\u0000\u064e\u00f7\u0001\u0000\u0000\u0000\u064f\u0650\u0005u\u0000\u0000\u0650\u0653\u0005v\u0000\u0000\u0651\u0653\u0003\u00fa}\u0000\u0652\u064f\u0001\u0000\u0000\u0000\u0652\u0651\u0001\u0000\u0000\u0000\u0653\u00f9\u0001\u0000\u0000\u0000\u0654\u0655\u0005u\u0000\u0000\u0655\u0656\u0003\u00fc~\u0000\u0656\u0657\u0005v\u0000\u0000\u0657\u00fb\u0001\u0000\u0000\u0000\u0658\u065d\u0003\u0100\u0080\u0000\u0659\u065a\u0005J\u0000\u0000\u065a\u065c\u0003\u0100\u0080\u0000\u065b\u0659\u0001\u0000\u0000\u0000\u065c\u065f\u0001\u0000\u0000\u0000\u065d\u065b\u0001\u0000\u0000\u0000\u065d\u065e\u0001\u0000\u0000\u0000\u065e\u00fd\u0001\u0000\u0000\u0000\u065f\u065d\u0001\u0000\u0000\u0000\u0660\u0665\u0003\u0100\u0080\u0000\u0661\u0662\u0005J\u0000\u0000\u0662\u0664\u0003\u0100\u0080\u0000\u0663\u0661\u0001\u0000\u0000\u0000\u0664\u0667\u0001\u0000\u0000\u0000\u0665\u0663\u0001\u0000\u0000\u0000\u0665\u0666\u0001\u0000\u0000\u0000\u0666\u00ff\u0001\u0000\u0000\u0000\u0667\u0665\u0001\u0000\u0000\u0000\u0668\u0669\u0003z=\u0000\u0669\u066d\u0003\u0102\u0081\u0000\u066a\u066c\u0003\u0104\u0082\u0000\u066b\u066a\u0001\u0000\u0000\u0000\u066c\u066f\u0001\u0000\u0000\u0000\u066d\u066b\u0001\u0000\u0000\u0000\u066d\u066e\u0001\u0000\u0000\u0000\u066e\u0101\u0001\u0000\u0000\u0000\u066f\u066d\u0001\u0000\u0000\u0000\u0670\u0673\u0003^/\u0000\u0671\u0673\u0003\u0106\u0083\u0000\u0672\u0670\u0001\u0000\u0000\u0000\u0672\u0671\u0001\u0000\u0000\u0000\u0673\u0103\u0001\u0000\u0000\u0000\u0674\u0675\u0003z=\u0000\u0675\u0676\u0005/\u0000\u0000\u0676\u0677\u00050\u0000\u0000\u0677\u0105\u0001\u0000\u0000\u0000\u0678\u0679\u0007\u000b\u0000\u0000\u0679\u0107\u0001\u0000\u0000\u0000\u067a\u067b\u0005u\u0000\u0000\u067b\u0680\u0003b1\u0000\u067c\u067d\u0005J\u0000\u0000\u067d\u067f\u0003b1\u0000\u067e\u067c\u0001\u0000\u0000\u0000\u067f\u0682\u0001\u0000\u0000\u0000\u0680\u067e\u0001\u0000\u0000\u0000\u0680\u0681\u0001\u0000\u0000\u0000\u0681\u0683\u0001\u0000\u0000\u0000\u0682\u0680\u0001\u0000\u0000\u0000\u0683\u0684\u0005v\u0000\u0000\u0684\u0109\u0001\u0000\u0000\u0000\u0685\u0687\u0005L\u0000\u0000\u0686\u0688\u0003\u00d4j\u0000\u0687\u0686\u0001\u0000\u0000\u0000\u0687\u0688\u0001\u0000\u0000\u0000\u0688\u0689\u0001\u0000\u0000\u0000\u0689\u0694\u0005M\u0000\u0000\u068a\u068b\u0005;\u0000\u0000\u068b\u0691\u0003\u0118\u008c\u0000\u068c\u068e\u0005L\u0000\u0000\u068d\u068f\u0003\u00d4j\u0000\u068e\u068d\u0001\u0000\u0000\u0000\u068e\u068f\u0001\u0000\u0000\u0000\u068f\u0690\u0001\u0000\u0000\u0000\u0690\u0692\u0005M\u0000\u0000\u0691\u068c\u0001\u0000\u0000\u0000\u0691\u0692\u0001\u0000\u0000\u0000\u0692\u0694\u0001\u0000\u0000\u0000\u0693\u0685\u0001\u0000\u0000\u0000\u0693\u068a\u0001\u0000\u0000\u0000\u0694\u010b\u0001\u0000\u0000\u0000\u0695\u0697\u0005L\u0000\u0000\u0696\u0698\u0003\u00d4j\u0000\u0697\u0696\u0001\u0000\u0000\u0000\u0697\u0698\u0001\u0000\u0000\u0000\u0698\u0699\u0001\u0000\u0000\u0000\u0699\u069a\u0005M\u0000\u0000\u069a\u010d\u0001\u0000\u0000\u0000\u069b\u069e\u0003\u0110\u0088\u0000\u069c\u069e\u0003\u0112\u0089\u0000\u069d\u069b\u0001\u0000\u0000\u0000\u069d\u069c\u0001\u0000\u0000\u0000\u069e\u010f\u0001\u0000\u0000\u0000\u069f\u06a0\u0003\u0112\u0089\u0000\u06a0\u06a1\u0005o\u0000\u0000\u06a1\u06a2\u0003\u00d8l\u0000\u06a2\u0111\u0001\u0000\u0000\u0000\u06a3\u06ac\u0003\u0114\u008a\u0000\u06a4\u06a7\u0005L\u0000\u0000\u06a5\u06a8\u0003\u0110\u0088\u0000\u06a6\u06a8\u0003\u0112\u0089\u0000\u06a7\u06a5\u0001\u0000\u0000\u0000\u06a7\u06a6\u0001\u0000\u0000\u0000\u06a8\u06a9\u0001\u0000\u0000\u0000\u06a9\u06aa\u0005M\u0000\u0000\u06aa\u06ac\u0001\u0000\u0000\u0000\u06ab\u06a3\u0001\u0000\u0000\u0000\u06ab\u06a4\u0001\u0000\u0000\u0000\u06ac\u0113\u0001\u0000\u0000\u0000\u06ad\u06af\u0003\n\u0005\u0000\u06ae\u06ad\u0001\u0000\u0000\u0000\u06af\u06b2\u0001\u0000\u0000\u0000\u06b0\u06ae\u0001\u0000\u0000\u0000\u06b0\u06b1\u0001\u0000\u0000\u0000\u06b1\u06b3\u0001\u0000\u0000\u0000\u06b2\u06b0\u0001\u0000\u0000\u0000\u06b3\u06b4\u0003\u0100\u0080\u0000\u06b4\u06b5\u0003\u0118\u008c\u0000\u06b5\u0115\u0001\u0000\u0000\u0000\u06b6\u06b7\u0005\u00d3\u0000\u0000\u06b7\u06bc\u0003^/\u0000\u06b8\u06b9\u0005J\u0000\u0000\u06b9\u06bb\u0003^/\u0000\u06ba\u06b8\u0001\u0000\u0000\u0000\u06bb\u06be\u0001\u0000\u0000\u0000\u06bc\u06ba\u0001\u0000\u0000\u0000\u06bc\u06bd\u0001\u0000\u0000\u0000\u06bd\u0117\u0001\u0000\u0000\u0000\u06be\u06bc\u0001\u0000\u0000\u0000\u06bf\u06c0\u0007\f\u0000\u0000\u06c0\u0119\u0001\u0000\u0000\u0000\u00cf\u011b\u0120\u0126\u0132\u0137\u013c\u0141\u0148\u014a\u0151\u0162\u0166\u016b\u016e\u0171\u0174\u017b\u017f\u0185\u018e\u0193\u0196\u01a5\u01ac\u01b1\u01c3\u01cb\u01d6\u01de\u01e4\u01ea\u01ed\u01f0\u01f9\u01ff\u0202\u0208\u020e\u0211\u0214\u021f\u0228\u022f\u0235\u0239\u0243\u0246\u024e\u0252\u0258\u025e\u0263\u026e\u0273\u027c\u027f\u0287\u028b\u0294\u029b\u02a0\u02a6\u02a8\u02ad\u02b2\u02ba\u02bd\u02c0\u02c7\u02cc\u02d3\u02da\u02dd\u02df\u02e9\u02ee\u02f7\u02fc\u02ff\u0304\u030d\u0319\u0328\u0335\u033d\u0340\u0347\u0351\u0359\u035c\u035f\u036c\u0374\u0379\u037e\u0387\u038b\u038f\u0393\u0397\u0399\u03a1\u03a5\u03ae\u03b3\u03b9\u03c2\u03c8\u03ce\u03d9\u03de\u03e7\u03ee\u03f1\u03f8\u0400\u0415\u0418\u041b\u0423\u0427\u0434\u043d\u0442\u044d\u045a\u045f\u0465\u0468\u046d\u048a\u0495\u049e\u04a7\u04ac\u04b1\u04bc\u04c1\u04c9\u04ce\u04d3\u04d7\u04d9\u04e0\u04e6\u04ee\u04f2\u04f6\u04f9\u04fd\u0502\u0513\u051d\u052a\u052e\u0533\u053d\u054d\u0576\u0581\u0587\u058b\u0593\u05a1\u05a5\u05ab\u05ad\u05af\u05b7\u05c1\u05c8\u05cf\u05d4\u05e3\u05ed\u05f3\u05f8\u05fd\u0609\u060b\u0610\u0615\u0619\u061f\u0624\u062d\u0636\u063c\u063f\u0648\u064d\u0652\u065d\u0665\u066d\u0672\u0680\u0687\u068e\u0691\u0693\u0697\u069d\u06a7\u06ab\u06b0\u06bc";

    public static final ATN _ATN = new ATNDeserializer().deserialize(_serializedATN.toCharArray());

    static {
        _decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
        for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
            _decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
        }
    }
}
