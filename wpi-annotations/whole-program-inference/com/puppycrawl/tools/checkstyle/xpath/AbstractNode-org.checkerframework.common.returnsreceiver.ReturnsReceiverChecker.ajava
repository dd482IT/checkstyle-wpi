///////////////////////////////////////////////////////////////////////////////////////////////
// checkstyle: Checks Java source code and other text files for adherence to a set of rules.
// Copyright (C) 2001-2023 the original author or authors.
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 2.1 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
///////////////////////////////////////////////////////////////////////////////////////////////
package com.puppycrawl.tools.checkstyle.xpath;

import java.util.Collections;
import java.util.List;
import net.sf.saxon.Configuration;
import net.sf.saxon.event.Receiver;
import net.sf.saxon.om.AtomicSequence;
import net.sf.saxon.om.NamespaceBinding;
import net.sf.saxon.om.NamespaceMap;
import net.sf.saxon.om.NamespaceUri;
import net.sf.saxon.om.NodeInfo;
import net.sf.saxon.om.TreeInfo;
import net.sf.saxon.pattern.NodePredicate;
import net.sf.saxon.s9api.Location;
import net.sf.saxon.str.UnicodeString;
import net.sf.saxon.tree.iter.AxisIterator;
import net.sf.saxon.tree.util.Navigator;
import net.sf.saxon.type.SchemaType;

/**
 * Represents general class for {@code ElementNode}, {@code RootNode} and {@code AttributeNode}.
 */
@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.common.returnsreceiver.ReturnsReceiverChecker")
public abstract class AbstractNode implements NodeInfo {

    /**
     * The {@code TreeInfo} object.
     */
    private final  TreeInfo treeInfo;

    /**
     * The children.
     */
    private  List<AbstractNode> children;

    /**
     * Constructor of the abstract class {@code AbstractNode}.
     *
     * @param treeInfo {@code TreeInfo} object
     */
    protected AbstractNode( TreeInfo treeInfo) {
        this.treeInfo = treeInfo;
    }

    /**
     * Getter method for token type.
     *
     * @return token type
     */
    @org.checkerframework.dataflow.qual.Pure
    public abstract   int getTokenType( AbstractNode this);

    /**
     * Returns underlying node.
     *
     * @return underlying node
     */
    @org.checkerframework.dataflow.qual.Pure
    public abstract  Object getUnderlyingNode( AbstractNode this);

    /**
     * Getter method for node depth.
     *
     * @return depth
     */
    @org.checkerframework.dataflow.qual.Pure
    public abstract   int getDepth( AbstractNode this);

    /**
     * Creates nodes for children.
     *
     * @return children list
     */
    @org.checkerframework.dataflow.qual.Pure
    protected abstract  List<AbstractNode> createChildren( AbstractNode this);

    /**
     * Getter method for children.
     *
     * @return children list
     */
    protected  List<AbstractNode> getChildren( AbstractNode this) {
        if (children == null) {
            children = createChildren();
        }
        return Collections.unmodifiableList(children);
    }

    /**
     * Returns true if nodes are same, false otherwise.
     *
     * @param nodeInfo other node
     * @return {@code TreeInfo}
     */
    @org.checkerframework.dataflow.qual.Pure
    public   boolean isSameNodeInfo( AbstractNode this,  NodeInfo nodeInfo) {
        return this == nodeInfo;
    }

    /**
     * Returns if implementation provides fingerprints.
     *
     * @return {@code boolean}
     */
    @org.checkerframework.dataflow.qual.Pure
    public   boolean hasFingerprint( AbstractNode this) {
        return false;
    }

    /**
     * Get the URI part of the name of this node.
     *
     * @return The URI of the namespace of this node.
     */
    @org.checkerframework.dataflow.qual.Pure
    public  NamespaceUri getNamespaceUri( AbstractNode this) {
        return NamespaceUri.NULL;
    }

    /**
     * Returns uri of the namespace for the current node.
     *
     * @return uri
     */
    @org.checkerframework.dataflow.qual.Pure
    public  String getURI( AbstractNode this) {
        return "";
    }

    /**
     * Determines axis iteration algorithm.
     *
     * @param axisNumber element from {@code AxisInfo}
     * @param nodeTest filter for iterator
     * @return {@code AxisIterator} object
     */
    public  AxisIterator iterateAxis( AbstractNode this,   int axisNumber,  NodePredicate nodeTest) {
        AxisIterator axisIterator = iterateAxis(axisNumber);
        if (nodeTest != null) {
            axisIterator = new Navigator.AxisFilter(axisIterator, nodeTest);
        }
        return axisIterator;
    }

    /**
     * Returns tree info.
     *
     * @return tree info
     */
    @org.checkerframework.dataflow.qual.Pure
    public final  TreeInfo getTreeInfo( AbstractNode this) {
        return treeInfo;
    }

    /**
     * Returns string value. Throws {@code UnsupportedOperationException}, because no child
     * class implements it and this method is not used for querying.
     *
     * @return string value
     */
    @org.checkerframework.dataflow.qual.SideEffectFree
    public  String getStringValue( AbstractNode this) {
        throw createUnsupportedOperationException();
    }

    /**
     * Returns namespace array. Throws {@code UnsupportedOperationException}, because no child
     * class implements it and this method is not used for querying.
     *
     * @param namespaceBindings namespace array
     * @return namespace array
     */
    @org.checkerframework.dataflow.qual.SideEffectFree
    public final NamespaceBinding[] getDeclaredNamespaces( AbstractNode this,  NamespaceBinding  [] namespaceBindings) {
        throw createUnsupportedOperationException();
    }

    /**
     * Returns namespace array. Throws {@code UnsupportedOperationException}, because no child
     * class implements it and this method is not used for querying.
     *
     * @return namespace map
     */
    @org.checkerframework.dataflow.qual.SideEffectFree
    public NamespaceMap getAllNamespaces( AbstractNode this) {
        throw createUnsupportedOperationException();
    }

    /**
     * Returns boolean. Throws {@code UnsupportedOperationException}, because no child
     * class implements it and this method is not used for querying.
     *
     * @return boolean
     */
    @org.checkerframework.dataflow.qual.SideEffectFree
    public final boolean isId( AbstractNode this) {
        throw createUnsupportedOperationException();
    }

    /**
     * Returns boolean. Throws {@code UnsupportedOperationException}, because no child
     * class implements it and this method is not used for querying.
     *
     * @return boolean
     */
    @org.checkerframework.dataflow.qual.SideEffectFree
    public final boolean isIdref( AbstractNode this) {
        throw createUnsupportedOperationException();
    }

    /**
     * Returns boolean. Throws {@code UnsupportedOperationException}, because no child
     * class implements it and this method is not used for querying.
     *
     * @return boolean
     */
    @org.checkerframework.dataflow.qual.SideEffectFree
    public final boolean isNilled( AbstractNode this) {
        throw createUnsupportedOperationException();
    }

    /**
     * Returns boolean. Throws {@code UnsupportedOperationException}, because no child
     * class implements it and this method is not used for querying.
     *
     * @return boolean
     */
    @org.checkerframework.dataflow.qual.SideEffectFree
    public final boolean isStreamed( AbstractNode this) {
        throw createUnsupportedOperationException();
    }

    /**
     * Returns configuration. Throws {@code UnsupportedOperationException}, because no child
     * class implements it and this method is not used for querying.
     *
     * @return configuration
     */
    @org.checkerframework.dataflow.qual.SideEffectFree
    public final Configuration getConfiguration( AbstractNode this) {
        throw createUnsupportedOperationException();
    }

    /**
     * Sets system id. Throws {@code UnsupportedOperationException}, because no child
     * class implements it and this method is not used for querying.
     *
     * @param systemId system id
     */
    @org.checkerframework.dataflow.qual.SideEffectFree
    public final void setSystemId( AbstractNode this,  String systemId) {
        throw createUnsupportedOperationException();
    }

    /**
     * Returns system id. Throws {@code UnsupportedOperationException}, because no child
     * class implements it and this method is not used for querying.
     *
     * @return system id
     */
    @org.checkerframework.dataflow.qual.SideEffectFree
    public final String getSystemId( AbstractNode this) {
        throw createUnsupportedOperationException();
    }

    /**
     * Returns public id. Throws {@code UnsupportedOperationException}, because no child
     * class implements it and this method is not used for querying.
     *
     * @return public id
     */
    @org.checkerframework.dataflow.qual.SideEffectFree
    public final String getPublicId( AbstractNode this) {
        throw createUnsupportedOperationException();
    }

    /**
     * Returns base uri. Throws {@code UnsupportedOperationException}, because no child
     * class implements it and this method is not used for querying.
     *
     * @return base uri
     */
    @org.checkerframework.dataflow.qual.SideEffectFree
    public final String getBaseURI( AbstractNode this) {
        throw createUnsupportedOperationException();
    }

    /**
     * Returns location. Throws {@code UnsupportedOperationException}, because no child
     * class implements it and this method is not used for querying.
     *
     * @return location
     */
    @org.checkerframework.dataflow.qual.SideEffectFree
    public final Location saveLocation( AbstractNode this) {
        throw createUnsupportedOperationException();
    }

    /**
     * Returns the value of the item as a Unicode string.
     * Throws {@code UnsupportedOperationException}, because no child class implements it and
     * this method is not used for querying.
     *
     * @return CharSequence string value
     */
    @org.checkerframework.dataflow.qual.SideEffectFree
    public final UnicodeString getUnicodeStringValue( AbstractNode this) {
        throw createUnsupportedOperationException();
    }

    /**
     * Returns fingerprint. Throws {@code UnsupportedOperationException}, because no child
     * class implements it and this method is not used for querying.
     *
     * @return fingerprint
     */
    @org.checkerframework.dataflow.qual.SideEffectFree
    public final int getFingerprint( AbstractNode this) {
        throw createUnsupportedOperationException();
    }

    /**
     * Returns display name. Throws {@code UnsupportedOperationException}, because no child
     * class implements it and this method is not used for querying.
     *
     * @return display name
     */
    @org.checkerframework.dataflow.qual.SideEffectFree
    public final String getDisplayName( AbstractNode this) {
        throw createUnsupportedOperationException();
    }

    /**
     * Returns prefix. Throws {@code UnsupportedOperationException}, because no child
     * class implements it and this method is not used for querying.
     *
     * @return prefix
     */
    @org.checkerframework.dataflow.qual.SideEffectFree
    public final String getPrefix( AbstractNode this) {
        throw createUnsupportedOperationException();
    }

    /**
     * Returns type of the schema. Throws {@code UnsupportedOperationException}, because no child
     * class implements it and this method is not used for querying.
     *
     * @return type of the schema
     */
    @org.checkerframework.dataflow.qual.SideEffectFree
    public final SchemaType getSchemaType( AbstractNode this) {
        throw createUnsupportedOperationException();
    }

    /**
     * Returns AtomicSequence. Throws {@code UnsupportedOperationException}, because no child
     * class implements it and this method is not used for querying.
     *
     * @return AtomicSequence
     */
    @org.checkerframework.dataflow.qual.SideEffectFree
    public final AtomicSequence atomize( AbstractNode this) {
        throw createUnsupportedOperationException();
    }

    /**
     * Generate id method. Throws {@code UnsupportedOperationException}, because no child
     * class implements it and this method is not used for querying.
     *
     * @param buffer buffer
     */
    @org.checkerframework.dataflow.qual.SideEffectFree
    public final void generateId( AbstractNode this,  StringBuilder buffer) {
        throw createUnsupportedOperationException();
    }

    /**
     * Copy method. Throws {@code UnsupportedOperationException}, because no child
     * class implements it and this method is not used for querying.
     *
     * @param receiver receiver
     * @param index index
     * @param location location
     */
    @org.checkerframework.dataflow.qual.SideEffectFree
    public final void copy( AbstractNode this,  Receiver receiver,   int index,  Location location) {
        throw createUnsupportedOperationException();
    }

    /**
     * Returns UnsupportedOperationException exception. Methods which throws this exception are
     * not supported for all nodes.
     *
     * @return UnsupportedOperationException exception
     */
    @org.checkerframework.dataflow.qual.SideEffectFree
    private static  UnsupportedOperationException createUnsupportedOperationException() {
        return new UnsupportedOperationException("Operation is not supported");
    }
}
